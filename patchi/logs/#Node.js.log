**** BEGIN LOGGING AT Sun May 10 19:35:29 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<DarkElement>	Hey guys how can I execute and get the live output of a PhantomJS script in Node.js?
<rom1504>	DarkElement: phantomjs site has a nice getting started, follow it
<DarkElement>	:|
*	xiinotulp is now known as plutoniix
<owen1>	i refactor my app - from angular + express into 2 separate apps: nginx and node.js. i use passport for user/password auth. i noticed that after login. my future requests don't have any cookie. where do i start troubleshooting this?
<Seventoes>	the parts of your code that handle basic auth and cookies :P
<owen1>	ahahhh
<owen1>	is it something to do with the fact that my angular makes calls to http://localhost:3001/api ?
<owen1>	instead of /api ?
<Seventoes>	is that a different host?
<owen1>	my nginx is running on port 80 and my node on 3001
<Seventoes>	then yeah, those two won't be able to share cookies
<owen1>	oh!
<owen1>	how do work around this?
<Seventoes>	cookies can be shared across subdomains, but not different domains
<Seventoes>	so api.yoursite.com can share with yoursite.com, assuming the cookie was set with the proper settings
<awesomenessispur>	Hi
<Seventoes>	but yoursite.com cannot share with yoursite.com:9000
<owen1>	Seventoes: does it mean that i have to use another nginx to be a reverse proxy? (so i can serve angular + nginx on 3000 and the API on 3001) ?
<Seventoes>	that's normally how those types of apps are handled, yeah
<awesomenessispur>	hi
<owen1>	Seventoes: but in production, if i decide to put each components on a different hosts, i don't need that nginx anymore, right+
<owen1>	?
<Seventoes>	if the apps are both on the same domain then yeah, as long as your cookies are set with options that allow that
<ImJune>	node is so cool
<ImJune>	I am having a blast with this
<SuperHeroINTJ>	ImJune, do you come from which language/envirometn?
<ImJune>	I studied c in college to get my degree
<ImJune>	and I was previously using rails and django as a hobby
<ImJune>	I got sick to death with python and django
<owen1>	Seventoes: thanks!
<Seventoes>	awesomenessispur: you can ask your question btw, you don't need to wait for someone to say hi to you :P
<Seventoes>	owen1: np!
*	zz_AlphaTech is now known as AlphaTech
*	silvers_ is now known as zz_silvers_
<tejasmanohar>	someone here familiar with mongoose?
<fels>	hi all -  besides mean.io and hackathon starter kit - is there anything else that can be used to quickly start a new app
<tejasmanohar>	fels: what are you looking for in the kit?
<tejasmanohar>	and why not one of those?
<fels>	tejasmanohar: we've looked at both - mean.io is good for some of the team angular is a hurdle - for others jade :) so I'm tasked with looking for alterantives
<tejasmanohar>	fels: are you familiar w/ mongoose?
<tejasmanohar>	i actually am stuck on a mongoose thing rn
<tejasmanohar>	and mean uses that so was thinking maybe you know that :)
<tejasmanohar>	ttps://gist.github.com/tejasmanohar/085b373d4f8da9ea8d98#file-controller-js-L80
<tejasmanohar>	https://gist.github.com/tejasmanohar/085b373d4f8da9ea8d98#file-controller-js-L80
<tejasmanohar>	im getting this error that im not really sure how to track down
<tejasmanohar>	keeps telling me that CastError: Cast to undefined failed for value "[object Object]" at path "referrals"
<tejasmanohar>	referrals is supposed to be an array
<tejasmanohar>	ive included my model, controller, the highlighted line of error, and the error itself
<tejasmanohar>	if someone could clue me in the right direction or what to console.log or a speculation of why im getting the error, thatd really help
<tejasmanohar>	referrals is an array as defined in my schema also pasted there
<tejasmanohar>	im console logging those two values that im using in the query and thats why i think its right
<fels>	tejasmanohar: I'll take a look but I"m not the best :) but I'll look
<tejasmanohar>	http://mongoosejs.com/docs/api.html#model_Model.update -- reference for the function im using
<tejasmanohar>	fels: thank you
<fels>	tejasmanohar: when does the error occur ?
<tejasmanohar>	fels: l#80 of controller.js
<tejasmanohar>	first file
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Sun May 10 20:53:31 2015

**** BEGIN LOGGING AT Sun May 10 21:10:07 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<greves>	why did/is node splitting into io.js?
<penzur>	too many unicorns?
<penzur>	just kidding :D
<dodobrain>	umm.. i've created an express app for simple crud.. how do i make npm deploy code changes automatically?
<dodobrain>	currently i'm editing code, then killing the npm process and re-running 'npm start' in the app dir
<Wraithan>	dodobrain: usually I use something like nodemon to restart my app whenever there are local code changes
<owen1>	Seventoes: i setup reverse proxy that sends site.my-server.com to 3001 and api-site.my-server.com to 3000. i also added .my-server.com to the express-session middleware but i still don't have cookie in the request that happend after i login.
<tejasmanohar>	hey
<tejasmanohar>	is someone here familiar w/ mongoose
<owen1>	http://paste.ubuntu.com/11071695/
<owen1>	Seventoes: ^
<Wraithan>	tejasmanohar: don't ask to ask, just ask your question. Sometimes it is more a JS problem than a specific library problem, other times you might have a developer of the library lurking but might come out to help once you've asked
<tejasmanohar>	https://gist.github.com/tejasmanohar/3d3376ea94004708170a#file-main-js-L76
<tejasmanohar>	Not sure why it's just saying MongoError: n/a
<Wraithan>	Usually in explaining your problem you can find new insights into what might be wrong, so even if you don't get an answer you might help yourself!
<tejasmanohar>	or what potentially could b wrong with my query
*	garthk is now known as garthk_away
<tejasmanohar>	ive attached the error log, controller, and model there
<tejasmanohar>	in the gist
<Wraithan>	tejasmanohar: did you try pulling out just that query and running it in a terminal to check out the objects?
<tejasmanohar>	Wraithan: findByIdAndUpdate isnt a mongo method
<tejasmanohar>	so no
<tejasmanohar>	but i know it returns no objects... i just dont know why that errors here
<tejasmanohar>	http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate
<Wraithan>	tejasmanohar: I mean run the mongoose query in a node terminal
<tejasmanohar>	Wraithan: how to?
<tejasmanohar>	Wraithan: i have to setup my schema etc in node query O.o
<tejasmanohar>	Wraithan: my code is very limited here and ive narrowed down exactly where the issue is
<tejasmanohar>	i just dont know why
<Wraithan>	you have nearly 100 lines in one of those files, that's not narrowed down
<tejasmanohar>	i highlighted the line Wraithan
<Wraithan>	tejasmanohar: does it happen if you pull the other calls out of the chain?
<tejasmanohar>	and i put console.log('4\n'+err) so i can trace it
<Wraithan>	isolate the code
<tejasmanohar>	let me see
<Wraithan>	as far as you can
<tejasmanohar>	ok one sec, im going to try one thing and thne im going to try commenting out everything and just running individual queries from mongoose
<tejasmanohar>	in this file
<Wraithan>	I've so far successfully stayed ignorant of most of mongoose other than some of its inner workings where it touches the mongodb driver
<Wraithan>	But good debugging practice says continue narrowing down and removing extra stuff until you find the problem
<Wraithan>	you've found a symptom, an error, but not the reason why it happens, so you need to keep narrowing
<tejasmanohar>	indeed
<tejasmanohar>	opening my mongo client outside of this project
<node6js524>	Can anyone help me with naming? Trying to figure out how to expose an api that has two types of routing, one linear (similar to koa-js) and one hierarchical (similar to abyssa-js). I have a router that can work both ways but i's so hard to choose how the api is exposed.
<mchelen>	when developing a module, how do you deal with varying nodejs binary names?
<joepie91>	mchelen: by telling your users to symlink node to nodejs :)
<Seventoes>	mchelen: why does the binary name matter for your module?
<mchelen>	joepie91: ah ok, i wasn't sure if there was anything better to put in files besides #!/usr/bin/env node
<joepie91>	mchelen: no, that should be fine
<joepie91>	the whole node vs nodejs thing is a debian packaging issue
<mchelen>	yeah i know :(
<mchelen>	Seventoes: it seems to be calling the wrong binary when from cli
<mchelen>	*when run from
<Seventoes>	yeah, i think just use "node". that's standard everywhere except debian computers that have the Amateur Packet Radio Node program
<Seventoes>	which is to say, it's standard everywhere. lol
<joepie91>	lol
<hendry>	i have a `npm install` in my makefile, that installs things in the CWD IIUC. Is it "OK" (common practice) to then have a line like: ./node_modules/.bin/XXXX to use that installed stuff?
<mchelen>	yeah on a test box i can see /usr/sbin/node symlinks to ax25-node
<dodobrain>	Wraithan, thanks. i just noticed your message. and i am comfortably using nodemon now :)
<dodobrain>	err.. isn;t there something better than    if('foo' in req.query) { ... }    to check for the existence of ?foo&bar=baz query parameter with no value
<dodobrain>	or is that the standard/recommended/etc. way to do it?
<Seventoes>	why's that not good?
<dodobrain>	it is good. i just felt it was different in some way
<Seventoes>	an alternative is 'typeof req.query.foo != "undefined"', so 'in' is pretty nice :P
<Seventoes>	or req.query.hasOwnProperty("foo")
<dodobrain>	yes, those are the other ways
<dodobrain>	but the 'in' and 'typeof' and 'hasOwnProperty' still don;t differentiate between ?foo and ?foo=42
<Seventoes>	what is "foo" set to if there's no value in the querystring?
<Seventoes>	that's up to your querystring parsing middleware
<dodobrain>	dataset/abcd?full
<Seventoes>	do you need to differentiate between when it's set to a value and when it's just defined?
<dodobrain>	don;t think so..
<Seventoes>	then it doesn't matter really hehe
<dodobrain>	is detecting extraneous query params a good thing when creating an api?
<joepie91>	if ('foo' in req.query && req.query.foo === "")
<joepie91>	?
<joepie91>	idk
<joepie91>	seems a bit strange to check for
<Seventoes>	depends how rigorous you're trying to be. if you're Stripe and you want to make 100% sure that everything sent to the API is what was intended to be sent then it might make sense
<dodobrain>	i.e. ?full=bleh&thisiscrap=sflkjsf&iloveyou=true  would end up giving the exact same output as ?full
<Seventoes>	(or any other financial stuff)
<joepie91>	dodobrain: that's fine
<Seventoes>	but if it's just a social media thing it probably doesn't matter
<joepie91>	be flexible in what you accept etc
<joepie91>	dodobrain: ref https://en.wikipedia.org/wiki/Robustness_principle
<joepie91>	"In other words, code that sends commands or data to other machines (or to other programs on the same machine) should conform completely to the specifications, but code that receives input should accept non-conformant input as long as the meaning is clear."
<dodobrain>	ok, cool. thanks joepie91 and Seventoes .. i'll just check existence of foo with 'in' :)
<greves>	does it make any sense to transpile es6 code to es5 for developing a node app with express?
<Seventoes>	greves: if you want the es6 features sure :P
<greves>	how to do? :P
<Seventoes>	pretty sure babeljs.io is what everyone's using
<GreenJello>	greves, you can require('babel/register') which makes all subsequent requires go through babel
<greves>	oh wow
<greves>	well i sort of just learned how to do the client side build process with gulp and whatnot over the last few weeks, but it seems like server side there is no build process, right?
<symbol>	I'm trying to create an API endpoint in Node for my Rails application to post to...if I'm POSTing a JSON object, shouldn't I be able to access it via request.body?
<GreenJello>	or you essentially copy files into another directory and run each through babel, which is what the react repo does before publishing to npm
<GreenJello>	greves, when publishing to npm, you should convert it to es5 first; but for applications babel/register is fine
<GreenJello>	for applications that need fast startup time (like cli tools) you should also do the conversion ahead of time
<beaky>	hello
<foofin>	Hello!
<greves>	well i mean more for development, but i also would like to understand how deployment works
<greves>	deployment meaning a web server, not an npm package
<beaky>	how do i use es6 modules in nodejs scripts
<greves>	beaky, i just asked the exact same question :P
<greves>	require('babel/register');
<beaky>	ah
<beaky>	what is babel
<greves>	babel is the es6 transpiler
<beaky>	so i wont need any intermediary build step?
<greves>	that's sort of what i'm asking
<beaky>	:D
<gkatsev>	not with babel/register
<imZEH>	hello Everyone.  im just confuse what first to consider in developing nodejs API projects. ?
<dodobrain>	imZEH, i think the first thing you decide is on the api itself
<dodobrain>	i.e. the url scheme you are going to use
<greves>	dodobrain, what do you do after that? :P
<imZEH>	hmm...  how about unexpected server stop because of some errors ? dodobrain  how to handle that ?
<joepie91>	symbol: using Express?
<dodobrain>	greves, after that you write the application.. fully from scratch or with express or if you are into new-fangled-ness with koa
<symbol>	joepie91: Indeed...I think it's because I'm using body-parser for url-encoded?
<symbol>	From the body-parser docs...it looks like I should just be using the body parser defaults...I think
<joepie91>	symbol: not sure. either way, you'll need something that parses JSON
<joepie91>	and ensure that you are using application/json as the content-type in your request
<greves>	is there such a thing as a 'best practices' or 'style guide' similar to john papa's angular style guide, for building full stack web apps with express?
<symbol>	Yeah, I've got the content-type. Thanks for the direction
<greves>	seriously i spend way too much time on figuring out folder structure and stuff that's going to work for a large scale app
<symbol>	I know that feel.
<greves>	i would love to have a set of guidelines
<p15x>	are there any nodejs platform-as-service that run on AWS other than heroku?
<beaky>	my personal guideline to whether my code sucks or not: is it easy to understand/test or add/remove/change stuff? if not then my code sucks :D
<joepie91>	beaky: deriving from that; if your code sucks, refactor it ;)
<joepie91>	greves: I can give you some common conventions / suggestions, but there is no hard style guide, no
<greves>	joepie91, yeah well that's what i would like is common conventions and suggestions because i'm coming from django where everything is pretty rigidly structured, so i just feel like i'm jumping into the abyss here
<greves>	do whatever in any file and in any folder, and wire it all up
<greves>	that doesn't get my creativity going (yet) :P
<joepie91>	greves: route files in routes/ (split up by concern, generally), views/templates in views/, ORM models in models/, miscellaneous reusable modules that aren't quite generic enough to put on npm in lib/
<joepie91>	app.js (or index.js) in project root
<joepie91>	express-generator creates a bin/www that's basically just a JS script that starts a HTTP server, and then imports ../app.js
<greves>	yeah i'm looking at the express-generator generated one right now in my IDE
<joepie91>	oh, and public/ for public assets like CSS, JS, etc
<joepie91>	I personally like public/js/, public/css/, and public/images/
<joepie91>	you'll also want to look into webpack or browserify for frontend JS bundling - I tend to put the source for that in frontend/
<greves>	so i'm going to make my api in routes/api/ or something?
<joepie91>	(but I've not seen anybody else do the last thing)
<joepie91>	greves: for example, up to you
<joepie91>	if there's 5 routes, then routes/api.js probably suffices
<greves>	my api has ~20 routes
<joepie91>	if it's a large API, then you'll probably have a routes/api/ with a bunch of .js files, split by concern
<joepie91>	complex routes?
<joepie91>	or just "database shovelling" so to say
<greves>	about ~3/4 of them are just standard crud on typical models, and there's 3 or 4 that require some modifications to the standard
<joepie91>	might split that up then
<greves>	but maybe that will be different in node if i'm using bookshelf because it looks like that library supports almost everything
<joepie91>	it depends on the size really
<greves>	yeah
<joepie91>	I generally try to keep a single .js file under 200 lines
<joepie91>	ideally under 100
<joepie91>	so I'd say "if you go over 200 lines, it's probably time to split up your routes"
<greves>	so my front end is react and i'm using scss for styles... how does build stuff for that go?
<joepie91>	which is something you can do once it gets too big, of course - you don't have to decide that upfront :)
<joepie91>	greves: depends. I personally use gulp with a lot of fancy sugar
<greves>	because my views/index.ejs basically just has a hook for react to mount on, and it should serve the react app with startup data and then pass the react buildfile down the pipe
<joepie91>	watching, livereload
<joepie91>	using webpack
<greves>	you use gulp & webpack together?
<joepie91>	your build process may look different, but gulp will probably still be useful to hook it all up together
<joepie91>	yeah
<joepie91>	it's pretty trivial
<greves>	interesting.
<beaky>	wow how do u do livereload
<joepie91>	(unlike browserify, where it's an utter mess)
<greves>	well i've got gulp set up right now
<joepie91>	beaky: there's a gulp-livereload and a browser extension :)
<greves>	but what parts of your process are in gulp, what parts in webpack?
<joepie91>	greves: hold, let me gist a gulpfile
<greves>	thanks
<joepie91>	greves: cleaned up version of the gulpfile I use for https://pdf.yt/: https://gist.github.com/joepie91/b7879160f1794ceafad7
<joepie91>	but it's also all here: https://github.com/joepie91/pdfy2
<joepie91>	shows both webpack and livereload
<joepie91>	cc beaky
<p15x>	anyone run nodejs on elastic beanstalk?
<joepie91>	greves: that clarify it any?
<greves>	joepie91, any reason you use gulp for scss instead of webpack?
<joepie91>	greves: I don't pack my stylesheets :)
<greves>	what does that mean
<joepie91>	greves: webpack is for bundling everything into one (or a few) .js files
<greves>	ah
<joepie91>	you CAN bundle CSS into it, but it introduces a dependency on JS
<greves>	got it
<joepie91>	now clients without JS can no longer see your CSS :P
<joepie91>	so that's not a good idea
<greves>	right
*	j201__ is now known as j201
<joepie91>	I only use it for bundling JS (well, coffeescript), and would only recommend packing HTML/CSS when you're using stuff like Angular/React/Polymer/Riot/etc
<joepie91>	(ie. you already have a JS dependency at that point anyway)
<joepie91>	with the sidenote that you should really only use such "frontend frameworks" for "web apps", not for every site
<joepie91>	because it completely breaks non-JS clients
<greves>	yeah i have a web app
<joepie91>	which is okay for a real "app", but not for a site :P
<joepie91>	right
<greves>	do you think its a bad idea to do CMS type stuff in a frontend framework? i want like real-time dashboard and that kind of thing for our admins
<joepie91>	greves: for an admin panel it's probably fine
<joepie91>	look at it this way: if a search engine spider might be interested in your pages, they shouldn't be using a frontend framework
<greves>	right
<greves>	makes sense
<joepie91>	admin panels have a very limited audience, so the impact of requiring JS isn't very big
<joepie91>	spiders don't care, archival tools don't care, the admins probably have JS anyway or can enable it
<joepie91>	they run the place, more or less, so trust is not an issue
<joepie91>	as long as your public-facing stuff doesn't require JS :P
<substack>	greves: here's what I do http://substack.net/task_automation_with_npm_run
<greves>	how do you do authentication? currently i'm doing session + JWT (for api calls)
<joepie91>	(can use it to make stuff fancier ofc, a la progressive enhancement, it just shouldn't /require/ it)
<greves>	and in the express ecosystem how is that going to work - is that middleware?
<GreenJello>	yep
<greves>	ok
<greves>	joepie91, i still don't quite understand one thing that i was asking yesterday and sort of got some clarification on but not totally - am i going to run different apps for each part of my page? like one for the backend API, one for the static/public/landing pages, and one for the 'app' ?
<greves>	because eventually i'll want to put everything behind nginx
<joepie91>	greves: don't see an immediate reason for that
<greves>	ok
<joepie91>	you might want to split up eg. your API into a separate set of processes for performance reasons as you scale up, but it's certainly not a requirement
<greves>	i see
<joepie91>	it's all just HTTP endpoints anyway :P
<greves>	yeah
<joepie91>	that being said, don't do heavy computation in your main thread
<joepie91>	er
<joepie91>	in your process *
<greves>	but with node's blocking stuff i've been reading it can be quite an issue
<joepie91>	only if you're doing lots of blocking things
<greves>	(at scale)
<joepie91>	which is not the case in the average application
<joepie91>	plus the cluster module is a thing that exists :)
<joepie91>	there's also a few slightly hacky thread implementations
<joepie91>	but you probably don't want to use them
<greves>	ok so if app.js/index.js is serving public/, everything else is going to be hidden from the interwebs right? and that means my stuff like scss or jsx files should not be in public/ ?
<joepie91>	greves: only the stuff in your static content directories (public/ if you used express-generator) and the routes you specified will be visible
<joepie91>	it's not like PHP
<GreenJello>	yeah, but you generally want to serve files with a static file server
<joepie91>	(PHP is CGI-like, Node.js is not)
<joepie91>	(there *is* a module to make Node.js CGI-like, but please don't use that :)
<GreenJello>	you can serve them in node.js in development, but not so much in production
<greves>	GreenJello, well if i'm running on AWS/heroku and using nginx x-sendfile, does that work?
<greves>	that seems to be what i've been told is a typical solution
<GreenJello>	I've never seen that before
<greves>	oh really?
<beaky>	what is CGI
<joepie91>	beaky: something you shouldn't use :D
<joepie91>	hehe
<GreenJello>	heroku is weird, but in AWS you either have nginx handle a path like /public, or a subdomain like static., or use s3+cloudfront and your web servers only handle the dynamic requests
<greves>	joepie91 / GreenJello this is sort of where i'm heading at the moment, any feedback? https://bpaste.net/show/7afb0c105c0e
<Protomega>	beaky: CGI stands for Common Gateway Interface, as far as I know I believe it is used to passing information to and from the server and client.
<joepie91>	greves: what's "scripts" for?
<joepie91>	lib/scripts
<greves>	joepie91, to differentiate from sass
<joepie91>	greves: confused. what does it contain, and for what purpose?
<greves>	react apps
<joepie91>	okay... this is clientside code?
<greves>	yeah
<joepie91>	does it go through webpack?
<joepie91>	or browserify?
<greves>	yeah it should do
<GreenJello>	greves, usually scripts refers to command line scripts for deployment, etc., and lib means third party (while src is your code), and you describe scripts as apps, so call it apps :-)
<joepie91>	right
<greves>	i want to serve the same code from the server AND the client, though
<joepie91>	greves: I would recommned renaming it from 'scripts' to something more descriptive
<joepie91>	eg. 'react'
<joepie91>	greves: similarly, api/main.js and api/other.js? :)
<joepie91>	that's only one step from one.js/other.js :P
<greves>	oh that was just to put some filenames in there, doesn't mean much :P
<joepie91>	other than that, it looks good
<joepie91>	ahh
<joepie91>	I'll dig up something for your models, sec
<greves>	ok so maybe change lib/ to src/ since that's all my own code
<greves>	and scripts to react/
<GreenJello>	yeah
*	joepie91 personally uses lib/ for own reusable but project-specific modules
<joepie91>	anyhow
*	edoardo is now known as Guest56833
<joepie91>	https://gist.github.com/joepie91/7f531cc7fa7245e68cc8 / https://gist.github.com/joepie91/9b1ca2392a72e82b44fb
<greves>	joepie91, yeah well its kind of annoying because with react half of it is reusable and half of it isn't
<GreenJello>	and just make sure that the routes reflect the urls, so api/foo/bar.js is /api/foo/bar
<joepie91>	greves: ^ gists to shove a database/bookshelf object onto your requests
<joepie91>	so you can have req.db or whatever
<joepie91>	I should have something else..
<joepie91>	oh right, I forgot, gist search is uselss
<joepie91>	>.>
<joepie91>	greves: ex. https://github.com/joepie91/pdfy2/blob/master/models/blogpost.coffee
<joepie91>	require("./models/blogpost")(bookshelfInstance)
<joepie91>	that way your model files do not need to be aware of the bookshelf instance
<greves>	oh smart
<greves>	oh yeah - what about migrations?
<joepie91>	this also works for basically any other library that expects an initialized instance :)
<greves>	i was reading about that in the docs but there's not too much info in there
<greves>	knex docs specifically
<joepie91>	greves: just use commandline knex with a knexfile - the docs are a bit sparse but it works
<joepie91>	knex migrate:make, knex migrate:latest
<greves>	ok
<greves>	do you keep a separate migrations folder in your models?
<greves>	models/migrations/ ?
<joepie91>	make sure to specify a migration name for migrate:make
<joepie91>	it automatically shoves it into migrations/
<joepie91>	iirc
<joepie91>	which is a fine path for that
<joepie91>	(migrations are not models)
<greves>	ok
<greves>	so migrations/ is another folder at the root level
<joepie91>	yeah
<joepie91>	knex should auto-create it
<greves>	ok
<greves>	well this is good i'm feeling more confident about it now
<greves>	still not sure about socket io and serving react isomorphically
<dodobrain>	actually i'm curious about why the term is 'migrations'
<greves>	dodobrain, because you 'migrate' data from one schema to another
<dodobrain>	you migrate data? i thought the migrations essentially setup the schemas
<greves>	afaik that's not really where the term came from
<greves>	it would be more like migrating your data from one database to another
<greves>	or one schema to another
<joepie91>	they are schema changes
<joepie91>	I presume the name has something to do with "migrating to a new version [of the software]"
<joepie91>	since that's what it's used for
<joepie91>	worth noting that knex migrations do not just work with Knex
<joepie91>	they can be used for anything :)
<joepie91>	see eg https://github.com/joepie91/pdfy2/blob/master/migrations/20150321183245_persist-init.coffee
<greves>	do any of you guys do TDD or partially at least?
<dodobrain>	too many ->
*	dodobrain hides
<joepie91>	nope, no TDD here
<beaky>	what is tdd
<joepie91>	don't write tests for anything besides a few edgecases, intentionally so
<greves>	test driven development
<greves>	joepie91, what's the logic behind that decision?
<p15x>	I write unit tests and integration tests
<beaky>	i dont test anything ever
<p15x>	I write the tests first if the app is well defined
<joepie91>	greves: hold on, explaining something to somebody for a bit, will get back to you in 5 mins with the logic
<joepie91>	:p
<greves>	ok hah take your time :)
<joepie91>	greves: basically, I only see value in tests for things that are either 1) security-critical (eg. crypto stuff), 2) extremely fragile, often due to third party influences (eg. WHOIS data parsing)
<joepie91>	or 3) things where you don't care about the quality of the software
<joepie91>	rationale:
<greves>	wow i'll have to see the explanation for (3)
<joepie91>	if you care about your software, you're not just going to do automated tests, you're aklso going to try and actually USE it as if you were an end user, throw weird stuff at it, see whether it not only acts according to spec, but also still makes *sense* to the end user
<beaky>	greves hackathons
<greves>	joepie91, but integration tests can do all that and more for you automatically, every time you run it...
<joepie91>	this is a task that cannot be automated, as it requires human perception, but is critical if you REALLY care about the quality of your software
<joepie91>	no, they cannot
<joepie91>	again, the purpose of such tests is not to test against a spec
<joepie91>	it's to test whether it makes *sense*
<joepie91>	that is something a machine cannot decide
<greves>	ah
<greves>	well yeah you should do end-user testing anyway, even if you're the end user for the tests
<greves>	but still integration tests at least let you know that it is functional
<joepie91>	there are lots of small inconsistencies that a user is going to notice, but that a machine can't... and your tests are only as good as the testcases you can think of
<joepie91>	greves: not finished yet :)
<greves>	ok continue haha
<joepie91>	my core point is that if you're going to do those "real-world tests", you're going to cover the same ground that your automated tests would cover
<joepie91>	if something doesn't pass an automated test, it's almost certain that you're going to see the consequences of that as an end user
<joepie91>	so you basically end up testing the same thing twice
<joepie91>	once automated, once indirectly as a real end-user
<greves>	hmmm, i see your point
<joepie91>	at which point, as far as I'm concerned, the tests are a wasted effort - they cost lots of time to maintain, write and test
<greves>	but the automated ones are run every few seconds throughout development
<joepie91>	whereas the added value is close to zero
<joepie91>	greves: yes, but that is not actually necessary
<dodobrain>	there was a paper about the over-reliance of software quality on automated tests
<joepie91>	something doesn't have to be tested until before it gets shipped
<joepie91>	or before it gets checked into source control, if you have a bunch of devs working on the same component
<greves>	interesting spin
<joepie91>	having broken code is perfectly okay, as long as it is no longer broken when it makes it into repo/production
<joepie91>	so you can make a ton of changes, test all of it once at the end
<greves>	i mean it definitely makes development faster *initially* , i don't know about long term because i'm not there yet
<joepie91>	if your code is structured well, any errors are trivial to track down
<joepie91>	so yeah, that's my rationale :)
<joepie91>	greves: to clarify on point 3 a bit more
<joepie91>	it is not uncommon in corporate software land to not really care about software quality
<joepie91>	as long as it meets spec/regulations, it ships
<joepie91>	no matter whether it makes sense to an end user
<joepie91>	in such cases, you don't do real-world testing
<joepie91>	and automated tests make sense
<joepie91>	but then the question is why you apparently don't care enough about the software you develop :)
<greves>	true
<joepie91>	security-critical stuff is an exception here, because a single mistake can have catastrophic consequences
<joepie91>	so even for that last 0.01% of coverage it's worth it
<joepie91>	fragile stuff like WHOIS parsing is often unpredictable and highly repetitive, just with different source data, so automated tests make sense there also
<joepie91>	as you're not going to manually test a batch of WHOIS data
<greves>	right
<greves>	interesting
<beaky>	idk i find my tests help serve as documentation of module usage + catching subtle things like type errors
<joepie91>	greves: I should note that this is a very unpopular opinion, and gets you flamed in most circles :)
<joepie91>	beaky: if your tests "serve as documentation", that means your documentation is crap :P
<greves>	joepie91, yeah, well i'm far from convinced based on my own experience with testing (very helpful)
<joepie91>	(or non-existent)
<beaky>	:(
<dodobrain>	greves, essentially what he is saying is that you need to ascend to higher levels on ninjahood :p
<joepie91>	and that's your problem, not tests
<greves>	dodobrain, hahahah
<joepie91>	beaky: for module usage, you should not have to look at anything other than the docs
<joepie91>	greves: far from convinced about my rationale? :P
<greves>	yeah, i'm skeptical that end user testing can hit as many ridiculous scenarios as i can do with some testing
<greves>	or that they can be as thorough
<greves>	one thing i don't agree with about TDD is always the 'only test until the function passes the test' mantra
<greves>	sorry s/test/code/
<joepie91>	greves: alright, I'll give you a practical example
<joepie91>	https://pdf.yt/
<joepie91>	site I built, running in production
<joepie91>	try finding a bug that I do not yet know about
<joepie91>	(and that isn't in pdf.js, as that's upstream)
<greves>	wow nice site very snappy
<joepie91>	the most glaring bug is probably in the donation page
<greves>	your title goes wonky on small screens
<greves>	PDFy shows up halfway off the title bar under Donate or Abuse
<joepie91>	select payment method, switch donation type, switch back donation type, payment method still selected but box 4 doesn't restore its data
<joepie91>	greves: yeah, I haven't done proper mobile testing yet
<joepie91>	still need to figure out a bunch of stuff with pdf.js perf on mobile first
<joepie91>	because it's nowhere near where I'd like it to be
<greves>	are you dutch?
<joepie91>	yep
<greves>	your name makes a lot more sense all of a sudden
<joepie91>	:)
<greves>	<--- ik spreek nederlands
<joepie91>	ik ook, uiteraard ;)
<joepie91>	but let's keep it English here, heh
<greves>	ya just sayin, 'joepie' sounds quite funny in english :P
<beaky>	but i agree a lot of testing is a waste of effort that could be covered by better tools like static analyzers and proper type systems and  stuff
<joepie91>	greves: https://avatars1.githubusercontent.com/u/1663259?v=3&s=460 ;)
<greves>	hahahah
<joepie91>	(my avatar)
<greves>	there ya go
<joepie91>	somebody drew that for me
<joepie91>	based on their interpretation of my name
<joepie91>	heh
<joepie91>	literally a cup of joe on a pie
<greves>	yeah, i got that ;)
<joepie91>	Dutch people tend to miss the "cup of joe" bit
<dodobrain>	don;t forget the '91' printed on the cup!
<joepie91>	since it's very much an americanism
<joepie91>	yep
<joepie91>	greves: but yeah, you'll find that despite the complete lack of tests, my stuff is generally quite reliable
<greves>	joepie91, well i wish my coding skills were that 1337 :P
<joepie91>	and if there's a bug, I already know of it, and I just haven't gotten around to fixing it yet
<joepie91>	greves: it's not about coding skills, though
<greves>	well i think really its mostly about organization
<joepie91>	all you need is 1) ability to modularize well, 2) not being afraid to refactor the same blob of code two or three times before calling it 'done', 3) rigorous end user testing
<greves>	the amount of code needed to do any one particular thing is small enough that its easy to get right if you hack on it for a while
<joepie91>	and 4) peripheral knowledge of principles like DRY, general security knowledge, etc - nothing particularly high-level, just be familiar with the concepts
<joepie91>	have those, and you can do the same
<greves>	question is just when you've got 1,000 'one little things' to do :P
<joepie91>	it's more a discipline thing than a skill thing
<joepie91>	greves: right, but that's the idea
<greves>	ah well discipline and skill mean the same thing in english, in many senses
<joepie91>	you just write 1000 modules
<greves>	so, i agree
<joepie91>	which then become 500 modules as you realize that you're actually duplicating a lot
<joepie91>	and then 200 because you realize that you could merge a few
<joepie91>	and suddenly you're done :P
<greves>	yeah
<joepie91>	greves: I mean the other definition of "discipline", not the "profession" one but rather the "self-control" one
<greves>	joepie91, yeah, that's the definition of 'skill' that i was referring to
<joepie91>	that has nothing to do with skill, though :)
<joepie91>	skill is adeptness at a particular task or class of tasks
<joepie91>	very different from self-control
<greves>	yeah but discipline requires skill & vice versa
<joepie91>	no, not necessarily
<joepie91>	skill can be obtained without discipline, just generally more slowly
*	garthk_away is now known as garthk
<joepie91>	discipline can certainly exist without skill
<joepie91>	discipline is about attitude, not experience
<greves>	ok ok i know what you mean anyway
<dodobrain>	its like that saying 'it takes X muscles to frown, but only Y muscles to smile' with obviously Y<X
<joepie91>	my point is really that if you take the right attitude, writing reliable code /isn't actually hard/
<dodobrain>	but the addendum is 'it takes Z muscles to keep looking the same as your usual self' Z<Y<X
<joepie91>	it is still non-trivial, but not hard
<greves>	joepie91, yeah, i agree. the coding isn't the hard part
<joepie91>	but to name an example, if you absolutely insist on using a poor tool for a particular task, then writing reliable code is hard
<joepie91>	eg. using C for something that doesn't require manual memory management
<joepie91>	using plain callbacks instead of something like promises
<joepie91>	those are both decisions that /will/ lead to reliability issues, because you're not using the right tool, and the tool you're using makes it hard to do the right thing
<greves>	but i thought l33t hackers write everything in C, including hybrid web apps :P
<joepie91>	yet many people are unwilling to drop either of those (or any other tools suffering from the same issues), often for completely arbitrary reasons
<joepie91>	and that's where it goes wrong :P
<joepie91>	MongoDB Is another great example
<joepie91>	it's objectively bad in basically every aspect
<greves>	ah, i dont understand the whole love affair with mongodb
<joepie91>	as in, by the numbers
<greves>	at all
<joepie91>	there's nothing it's good at
<joepie91>	yet people keep using it
<joepie91>	yeah, that's going to result in data loss and DB downtime
<greves>	why would anybody *want* unstructured data?
<joepie91>	because you picked a crappy tool
<greves>	there's like whole fields of science dedicated to making unstructured data structured
<joepie91>	greves: unstructred data can be the right choice in some circumstances
<joepie91>	but even if it is
<joepie91>	mongodb is still the wrong tool
<greves>	and now people are like 'everything should be unstructured all the time!'
<joepie91>	because it sucks even at the advertised usecase
<deltab>	semistructured
<joepie91>	greves: it's the illusion of simplicity
<RLa>	i'm still waiting for schemaful nosql
<joepie91>	"I don't have to define schemas!"
<joepie91>	yes you do
<greves>	haha
<joepie91>	you're just doing it implicitly
<joepie91>	multiple times
<Protomega>	greves: Because there are certain cases where relational databases aren't a great concept.
<joepie91>	with no ability for reasonable migrations
<joepie91>	in different places
<RLa>	something with almost zero space overhead for keys
<RLa>	requires strong consistency for schema changes tho
<Protomega>	I'll agree that NoSQL has gotten kind of out of hand, but I use a graph database all the time for note taking and I'm working on something that will actually utilize the database.
<Bajix>	How has it gotten out of hand? *has no context*
<beaky>	i love mongodb i can put json in it
<greves>	beaky, you can put json in postgres, and its faster
<greves>	and you can put everything else in postgres, too
<joepie91>	Protomega: NoSQL != non-relational != document store
<beaky>	but postgres isnt webscale
<joepie91>	Protomega: different concepts
<joepie91>	Protomega: something can be NoSQL and still be relational
<Bajix>	Well, it is easier to make thin architecture using MongoDB, which is really sexy for SPA's
<joepie91>	just by virtue of it not using SQL
<joepie91>	(the language)
<joepie91>	Bajix: eh?
<joepie91>	how is it/
<greves>	yeah i have to say i'm not a big fan of SQL but - it gets the job done and anyway, that's why we have ORMs :D
<beaky>	personally i find relational modeling EZier than modeling my stuff as JSON objects
<pistis>	hi~ :)
<joepie91>	it's important to understand that SQL the language is not the same thing as something being relational
<beaky>	hello pistis
<joepie91>	can't emphasize that enough
<Bajix>	@joepie91 you can basically just directly do a 1-1 crud endpoint set to collection setup, making everything very formulaic, and use query parameters mirroring mongodb queries, and have a fully fledged API almost instantly
<deltab>	some would even argue that SQL isn't relational (or is a corruption of the relational ideal)
<greves>	oh yeah i meant to ask - unrelated to the current topic but related to node - what is actually the difference between dependencies and dev-dependencies?
<joepie91>	Bajix: which isn't actually easier because you've just increased your maintenance and migration burden by 1000%
<beaky>	gg
<Bajix>	how so?
<greves>	for stuff that's not getting deployed on npm, does it make a difference?
<deltab>	(because of duplicated rows and nulls)
<joepie91>	Bajix: try changing a column/property name.
<joepie91>	try doing complex relational things
<Bajix>	Eh? MongoDB is insanely easy to do that
<Protomega>	joepie91: True, and that was a mistake of semantics on my end.
<Bajix>	there's like even an operator just for that
<elnerdo>	Hey everyone
<joepie91>	Bajix: you're effectively dumping JSON received via the API directly into your DB
<beaky>	hello elnerdo
<elnerdo>	Question
<joepie91>	Bajix: this means that your API must reflect your DB structure
<joepie91>	and no, migrations are not easy
<elnerdo>	Has anyone used bcrypt before?
<joepie91>	I'm just going to reference this again: http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/
<beaky>	yes what turns me off document dbs is the high amount of coupling between queries and document structure
<joepie91>	elnerdo: just ask the question you have, if somebody knows they will answer
<Bajix>	joepie91, similarly yes - and why don't you think migrations are easier? I've written like 50 migrations....
<Bajix>	it's comically easy...
<elnerdo>	I'm running into this issueIncorrect arguments
<joepie91>	Bajix: because you have no schema to validate/enforce against, and you need to make modifications to the entirety of your DB
<joepie91>	elnerdo: pastebin your error?
<joepie91>	with stack trace
<Bajix>	joepie91, I never said anything about not having a schema or validation
<elnerdo>	throw "Incorrect arguments";
<elnerdo>			^
<elnerdo>	Incorrect arguments
<joepie91>	elnerdo: pastebin the *entire* error, including stacktrace, here: https://gist.github.com/
<joepie91>	then post the link
<Bajix>	you'd use something like Mongoose, and have all the validation and sanitisation ever
<joepie91>	Bajix: at which point you're reimplementing an RDBMS in something that isn't an RDBMS and wasn't built to function like one
<joepie91>	so why are you using MongoDB?
<elnerdo>	Because I thought mongoose would be much easier and not such a pain to use
<elnerdo>	But I was wrong
<joepie91>	(not to mention that it doesn't and *can't* provide the same guarantees that your average RDBMS can)
<elnerdo>	lol
<Protomega>	joepie91: <joepie91> you're effectively dumping JSON received via the API directly into your DB
<Protomega>	Some people like that fact.
<Bajix>	They're different concepts... just because I like MongoDB for some cases doesn't mean I'd want to use it without an ODM, that's just silly talk
<beaky>	i use mongodb because its javascript. my webserver is javascript, my client app is javascript, therefore my database must also be javascript
<Bajix>	I'd use SQL with a ORM as well
<joepie91>	Protomega: that's the point, it's fake simplicity - it seems really simple, until you need to do data maintenance, and then it becomes a mess
<beaky>	id make my os javascript if i could
<joepie91>	beaky: mongodb is not javascript.
<beaky>	oh
<joepie91>	Bajix: the fact that you're using an ODM indicates that you shouldn't be using MongoDB to begin with
<joepie91>	I'm not sure what's so hard to understand about this
<Bajix>	why?
<Protomega>	beaky: I think they are working on that. I know there was talk about them doing it with android.
<joepie91>	Bajix: because it tries to implement behaviour that MongoDB specifically was NOT built to provide?
<Bajix>	you haven't made any arguments for what's wrong with an ODM
<joepie91>	with the associated performance and assurance issues
<joepie91>	Bajix: did you actually read the thing I linked?
<Bajix>	nope
<joepie91>	because I don't really feel like basically rewriting that article in-channel
<joepie91>	okay, then that's probably going to be a good start
<Protomega>	I don't think ODM is the problem joepie91 is referring to. I think what he is getting at is that if you are going to make something structured, why keep it in something that is unstructured.
<joepie91>	Protomega: basically.
<dodobrain>	essentially
<elnerdo>	@joepie91: Would you like a link to my gist?
<joepie91>	this is exactly the "use the right tool" and "attitude" thing that I was pointing out earlier
<dodobrain>	i came to the same conclusion a while back
<RLa>	btw, how is postgresql replication?
<joepie91>	elnerdo: that would be helpful, yes :)
<joepie91>	RLa: there are a few different replication systems with different approaches, as I understand it
<Bajix>	well, having something structured is sane. I don't really think anyone should be using MongoDB with unstructured data, and if they were, it would be a field designated as such
<joepie91>	Bajix: that is what MongoDB was literally MADE for.
<joepie91>	unstructured data.
<joepie91>	that is its purpose of existence
<elnerdo>	https://gist.github.com/Drenerdo/780059727116c29cda7b
<joepie91>	(and it does that poorly, too, but that's besides the point)
<RLa>	joepie91, can i get master-slave replication without automatic failover working with core tools?
<beaky>	i thought mongodb was made for webscaleness
<joepie91>	elnerdo: is that the full output? it's missing a stacktrace
<beaky>	(i.e. ease of replication)
<elnerdo>	Yes
<elnerdo>	That's what I'm seeing in terminal
<joepie91>	beaky: from everything I've heard, backed by actual arguments (rather than just rhetoric), mongodb is apparently a nightmare to scale
<Bajix>	Eh? Just because that was a use case originally doesn't mean MongoDB should be pigeonholed
<joepie91>	RLa: not sure
<GreenJello>	beaky, you do know webscale is a sarcastic term, right?
<Bajix>	Have you ever actually scaled out MongoDB?
<joepie91>	Bajix: I don't understand how we're even still having this argument
<joepie91>	Bajix: MongoDB performs poorly, it loses data, it's problematic to scale, and it forces implicit schemas
<joepie91>	yet you are arguing for using it for the very thing that RDBMSes are designed to do - and indeed your average RDBMS does it faster, more correct, and more reliably than MongoDB does
<joepie91>	why, exactly, are you still defending MongoDB in this matter?
<Bajix>	I just have an issue with your argument that it defeats the point to use MongoDB with structured schemas
<GreenJello>	Bajix, what are the pros of mongo over e.g. postgres?
<joepie91>	Bajix: it does. you're trying to use the exact functionality that it doesn't provide and doesn't intend to provide
<joepie91>	the whole reason for its existence is to NOT provide that functionality
<joepie91>	and it fares poorly at that functionality
<joepie91>	so how does that not defeat the point?
<GreenJello>	joepie91 is saying it offers the absence of schemas, which you are using, so what other value does mongo offer to you?
<Bajix>	GeenJello, it's very easy to use, and makes sense for cases that can be represented well as collections
<joepie91>	Bajix: a table in an RDBMS is a collection.
<joepie91>	it makes sense for cases that can be represented well as collections.
<joepie91>	it is also easy to use
<joepie91>	so why mongodb?
<GreenJello>	okay, so that matches when I use mongo; quick projects where I care more about getting it done than it actually working in production (things that can fail)
<Bajix>	yes, and you need to do a lot more work with nested structures
<joepie91>	Bajix: work, such as?
<ludjer>	Most people use mongo db as a secondary store these days. So they a rdbms at the back and then compute some data and store in in mongodb collection.
<ludjer>	and this is due to the fact that they dont trust the db's writing techniques.
<Bajix>	Well, write guarantees differ substancially between the two
<RLa>	what would be such secondary storage used for?
<Bajix>	Really a lot of it is that Mongoose is just a really solid ODM
<Bajix>	I think there are a lot of cases where you're more productive using Mongoose and MongoDB, and the actual database is somewhat moot
<ludjer>	so for example you have complex joins and lookups that take a long to to compute in your rdbms
<ludjer>	you would then cache the data you computed into mongo db so it is reusable
<joepie91>	ludjer: might as well do that in a table in your regular RDBMS, no?
<ludjer>	nah
<ludjer>	dont want to write complex joins again
<ludjer>	rather just store the json map in maongo db
<beaky>	yeah dont indexed materialized views handle that kind of usecase
<joepie91>	ludjer: which you can also do in postgresql :)
<Bajix>	What ORM do you use for Postgres?
<ludjer>	yeah but i use oracle
<joepie91>	bookshelf, in production
<joepie91>	writing my own currently
<ludjer>	200 tb db's
<beaky>	node-postgres
<joepie91>	ew, oracle :(
<ludjer>	yeah i know, corporate stuff. Still haev not see a db that can cluster as well as oracle with regards to read and write performance
<ludjer>	yes it might cost a couple million $$$ but its worth it with regards to performance
<Bajix>	node-postgres isn't an ORM
<beaky>	how come oracle isnt the first thing to come in mind (vs. mongodb et al)  when ppl talk about webscale
<Bajix>	it's only a PostgeSQL client
<ludjer>	well cause normal websites dont have 10 million dollars to drop on hardware and license costs when it comes to running a website
<greves>	wow just took a lunch break and we're still talking about databases? :D
<Bajix>	The bigger issue is that NodeJS libraries for PostgreSQL are lacking
*	joepie91 refers to http://howfuckedismydatabase.com/
<joepie91>	greves: apparently so
<joepie91>	Bajix: in what sense?
<Bajix>	Show me a worthwhile postgres ODM
<dodobrain>	yeah, node-postgres doesn't do anything magical by default. it provides a bare-bones sql interface
<ludjer>	personally i used http://docs.sequelizejs.com/en/latest/
<ludjer>	was quite nice, though i worked with maria db
<joepie91>	Bajix: ... postgres ODM?
<RLa>	how good is oracle performance at all?
<Bajix>	sorry ORM**
<joepie91>	right
<RLa>	they do not even allow benchmarking it
<greves>	Bajix, django? :D
<joepie91>	Bajix: functionality-wise, bookshelf
<joepie91>	API-wise, working on it
<greves>	joepie91, have you seen this? https://github.com/tulios/mappersmith
<greves>	i was just made aware of it
<Bajix>	compare the documention and capabilities to Mongoose
<joepie91>	Bajix: API ideas so far: https://gist.github.com/joepie91/9d82f707127f30535a13
<joepie91>	Bajix: what about it?
<angular_mike_>	hello, anyone have experience with running node on Digital Ocean?
<joepie91>	greves: hmm. basically an ORM except it uses an API instead of a DB as data source?
<joepie91>	angular_mike_: digital ocean is just a VPS host
<Bajix>	Mongoose has a lot more functionality, which is why people use it, and they end up using MongoDB as a database because Mongoose is more productive to work with
<ludjer>	well depends on the inferstructure but i can get over a 400k writes on our core cluster. but thats on 5 million dollar hardware
<joepie91>	angular_mike_: just ask your question, if somebody knows they will answer
<angular_mike_>	whenever I try to run npm search I get this:
<joepie91>	Bajix: functionality such as?
<angular_mike_>	https://www.irccloud.com/pastebin/jIa7jjMH
<joepie91>	angular_mike_: from what I've heard, npm search is generally broken, and you should use the web search instead
<RLa>	greves, it does not use promises but promise-like api
<RLa>	greves, that's my issue with it
<angular_mike_>	joepie91: doesn't npm install use it
<angular_mike_>	?
<joepie91>	RLa: mappersmith you mean?
<joepie91>	angular_mike_: npm search? no
<RLa>	yes
<greves>	ah, promise-like - that's no good
<angular_mike_>	oh, then I guess I have another problem then
<greves>	haven't looked into it yet just heard about it but i guess that kind of makes it useless off the bat
<joepie91>	mappersmith reminds me a bit of a thing I built a while ago
<RLa>	i'm sick of promise-like apis that give my weird surprises when i try use them as promises
<Bajix>	joepie91 getter/setters/defaults, extendable schemas, event emitters, aggregate pipelines, streaming capabilities, validation, hooks, query object validation etc
<joepie91>	greves: ?
<greves>	joepie91, sorry - mappersmith
<greves>	if it doesn't use promises
*	garthk is now known as garthk_away
<joepie91>	Bajix: getters/setters/defaults check, extendable schemas needs more of a definition, event emitters how?, aggregrate pipelines is what you use knex for, streaming capabilities is missing in bookshelf but available in knex, validation (beyond schema) does not belong in an ORM, hooks?
<joepie91>	greves: right
<joepie91>	greves: thing I wrote a good while ago: https://github.com/KnightSwarm/Envoy/blob/2db58b74b1c97dbd0336db5f5fdd6d86efcb71f3/src/api.json
<joepie91>	well
<joepie91>	the 'manifest' for it
<joepie91>	except that wasn't just a client
<joepie91>	rather a generator for both API server and client
<joepie91>	based on api.json with some custom language-specific hooks
<joepie91>	95% of the API defined as (platform-independent) JSON, remaining 5% defined as actual code
<joepie91>	boom, instant server/client
<greves>	wow
<greves>	i need that
<joepie91>	still need to port that to Node :)
<beaky>	u can try http://loopback.io/ for that
<greves>	like, really need that :D
<joepie91>	beaky: loopback isn't platform-independent, and afaik doesn't generate a client
<beaky>	(if u want to design api servers based on a model definition)
<joepie91>	greves: code is here, fwiw: https://github.com/KnightSwarm/Envoy/tree/2db58b74b1c97dbd0336db5f5fdd6d86efcb71f3/src/api/public_html/cphp-rest
<joepie91>	but it's PHP
<joepie91>	hence needing to port to Node
<greves>	joepie91, nothing already exists that you know of that does this?
<joepie91>	greves: example hooks here, for a relatively complex API: https://github.com/KnightSwarm/Envoy/blob/2db58b74b1c97dbd0336db5f5fdd6d86efcb71f3/src/api/public_html/rewrite.php
<joepie91>	greves: not cross-platform, to my knowledge
<joepie91>	it's a bit of a weird thing, though, it's half ORM and half API generator
<greves>	agh php - my eyes hurt
<Bajix>	you can setup custom getters/setters. For example, you can have a setter to trim and lowercase, or split arrays etc. You can make plugins to extend schemas, maybe adding in automatic createdAt/updatedAt management, have different libraries to bolt on functionality. The hooks all you to do actions before/after validation, saving etc so that you can do complex invalidation, or whatever, maybe update slugs or trigger tasks
<Bajix>	There's jsut a whole crapload of things you can do with Mongoose
<greves>	joepie91, but it seems like ORM & API should sort of go together
<joepie91>	greves: I tried implementing them separately, but didn't get very far unfortunately
<joepie91>	perhaps I'll fare better on that with Node
<joepie91>	(which is generally easier to modularize)
<joepie91>	Bajix: getters and setters are present in bookshelf as I said
<Bajix>	also, I do recall there was a VERY long time in which SQL sucked in Node and had poor bindings, which gave Mongoose a several year head start
<greves>	it seems like currently the only solution is to roll your own everything in express
<joepie91>	Bajix: you can write plugins for bookshelf also, though a bit rudimentary
<joepie91>	Bajix: not sure whether there are hooks in bookshelf, but they're there in the thing I'm writing atm
<joepie91>	greves: well, the idea is that you can combine existing components
<joepie91>	only writing glue code
<Bajix>	right, you're writing them now... SQL was always something that Node didn't adequately support, and so peopel gravitated towards MongoDB
<greves>	well if i'm looking for existing libraries what do you recommend? knex&bookshelf for the actual ORM stuff
<joepie91>	Bajix: the things you're describing are ORM issues, not SQL issues
<greves>	but do i actually have to write app.get('api/v1/model', ......) a hundred times?
<joepie91>	greves: currently, knex + bookshelf, yes
<joepie91>	greves: not necessarily, you can fairly easily abstract it
<joepie91>	perhaps modules even exist for that already
<Bajix>	Yes. There're all ORM issues. There were also, and maybe still are, huge bottlenecks with the bindings
<joepie91>	(they probably do(
<joepie91>	Bajix: not aware of any
<Bajix>	There are a couple articles floating around on it
<RLa>	greves, how many endpoints you have?
<greves>	RLa ~20
<Bajix>	There were several years in which the performance of SQL was low solely because of the lack of a good client
<greves>	RLa 5 or less that are nonstandard REST
<RLa>	that does not sound much
<greves>	actually it's probably closer to double that because i was using a bunch of plugins in django that had their own models that i will now have to re-work
<greves>	my current dev server has 41 tables
<joepie91>	completely unrelated
<joepie91>	if anybody is bored and good at writing documentation, express-session needs help: https://github.com/expressjs/session/issues/147#issuecomment-100224498
<joepie91>	errrr.
<joepie91>	if anybody is bored and good at writing documentation, express-session needs help: https://github.com/expressjs/session/issues/147
<joepie91>	greves: before I go to sleep, did you manage to find any bugs? :)
<Bajix>	documentation is a real pain in the ass ;(
<greves>	aha i wasn't looking that much, but i'll take your word for it that its pretty much bug free except for a few obvious glitches :P
<Bajix>	but in all seriousness it's a make it or break it thing in determining the adoption
<joepie91>	thankfully the documentation is very good on average in Node.js-land
<joepie91>	(compared to basically everything else)
<joepie91>	I suspect that has to do with modules generally being small
<joepie91>	 === easier to document
*	simius1 is now known as simius
<Bajix>	joepie91 https://github.com/felixge/faster-than-c
<kevin2r>	cite some examples of websites built in node that are currently running
<ljharb>	walmart. paypal. amazon.
<ljharb>	npm.
<kevin2r>	completely
<ljharb>	i'm not entirely sure of the percentage.
<ljharb>	why?
<kevin2r>	curiosity
<ljharb>	i mean, if you know what it's built in because of anything besides "the company told you so" then it's not doing it's job right :-)
<nshm>	hey
<greves>	hi
<nshm>	can you tell me what is NaN
<nshm>	why modules migrate to it
<RLa>	>> NaN
<ecmabot>	RLa: (number) NaN
<Naji>	NotANumber
<nshm>	https://www.npmjs.com/package/nan
<RLa>	it makes stuff run on all node/iojs versions
<ljharb>	nshm: it's a compatibility layer for c++ modules across node/iojs versions.
<nshm>	i've just got a request to port npm module to this thing
<nshm>	I wonder is it official thing
<nshm>	or something I should wait a bit
<BloodyScythe>	hi there. I'm learning node.js using learnyounode but got trouble figuring out what to to at excercise 6/13 "make it modular" could anyone explain it to me please?
<BloodyScythe>	to do*
<fl0w>	It’s almost a defacto standard. AFAIK it’s been discussed to bring it into Node.js (or was it io.js?).
<fl0w>	nshm: ^
<nshm>	fl0w: ok, thanks a lot
*	edoardo is now known as Guest36740
<fl0w>	BloodyScythe: Could you try and explain the exercise a bit? You could also open a ticket at https://github.com/nodeschool/discussions
<fl0w>	BloodyScythe: Or rather, search it and see others who have had questions about that exercise.
<BloodyScythe>	that's the problem. I have no idea what I have to do. I assume, the only thing I understand is, that I have to use the file from the last exercise which lists files of a dir and filters them by extension and prints them out to console
<BloodyScythe>	but now I have to wrap them inside of a module or some sort of?
<BloodyScythe>	I'll look it up on google, thanks
*	Guest91910 is now known as Eskorbuto
<fl0w>	BloodyScythe: Yea sorry, can’t really help at the moment. However, I recommend waiting for some more activity here once the America wakes up, or open an issue, and/or check out repository for additional documentation. http://git.io/vUliI
<BloodyScythe>	all cool, I've found the solution of the problem. atm I'm figuring out why I would code it like that
<fl0w>	If you share I code I could help with that - just use a paster, or (my paster of choice) gist.github.com
<BloodyScythe>	http://web.swfideas.com/nodejs-learnyounode/ that's the exercise I'm currently on... I just have to understand what's going on
<beaky>	what makes node so great apart from being in javascript compared to all the other similar platforms in different platforms
<beaky>	or is being in js the killer feature
<ljharb>	that's a pretty killer feature
<ljharb>	also it's really fast. and it's got npm, the largest package manager of them all.
<beaky>	yeah i cant imagine life wihtout npm
<beaky>	how did it succeed where all the other platforms package managers fell so short
<beaky>	nobody ever complains about npm hell, but package management hell is a real thing for every other platform lol
<ljharb>	because node isn't a global pool of dependencies.
<synthmeat>	eh, i'd complain about overusing npm in long-term projects. a lot of packages fallen out of date, should've written my own. but that's not npm's fault per se
<ljharb>	it uses filesystem hierarchy.
<fl0w>	beaky: Nodes asynchronous nature is for sure an USP.
<synthmeat>	also, am i wrong in thinking that if, say, each module in module dependencies tree needs "log4js", i end up with gajillion of instances of log4js in my app?
<beaky>	idk i think thats a good thing since npm actually deals with the reality of packages having different versions
<fl0w>	synthmeat: Yes, you could (probably will) end up with multiple instances of a package - but I think that’s a solution in the making.
<synthmeat>	i felt wrong in logging department. so wrong.
<ljharb>	synthmeat: disk space is free.
<ljharb>	and infinite.
<synthmeat>	memory isn't?
<ljharb>	also `npm dedupe`
<ljharb>	hard drive space is. it doesn't actually use much ram.
<synthmeat>	it doesn't allocate for each instance? ram doesn't go up linear?
<synthmeat>	"dedupe" sounds spot on of what i'd need, gonna check that up
<fl0w>	ljharb: Wasn’t there a discussion some time ago about making the dependencies flat but with semver added to the directory name? Like node_modules/<dependency><delimiter>x.y.z?
<ljharb>	if they're all required, perhaps
<ljharb>	no
<fl0w>	huh, then I’m mistaken.
<ljharb>	fl0w: npm 3 will `npm dedupe` on install tho
<ljharb>	basically, it'll be flat, except where version conflicts require it not to be.
<synthmeat>	ah, no. this just reduces disk space requirements and i agree with that - disk space is cheap
<ljharb>	synthmeat: if you have 30 different versions of foo that are required, your app *can never work* without all 30.
<synthmeat>	what if they're all the same versions?
<ljharb>	synthmeat: then npm dedupe will dedupe them.
<ljharb>	and they'll require the same instance.
<synthmeat>	oh
<synthmeat>	i usually fork a lot of libs, vet packages a bit, and make them use the exact (preferably same) version of dependency
<ljharb>	not exact. you should use semver ranges.
<synthmeat>	i do exact. why semver?
<ljharb>	you get non-breaking changes for free, and you have a greater chance of a dedupable tree.
<ljharb>	exact versions are an antipattern.
<synthmeat>	hm. ok. good points.
<ljharb>	synthmeat: tbh, forking packages is something to avoid too imo.
<ljharb>	synthmeat: it's fine so you can make a PR, and temporarily use your fork while you wait for it to be accepted, but that's it
<synthmeat>	yeah, but this particular package "suite" i did that for became a bit messy, outdated, PRs not accepted on some modules, etc.
<synthmeat>	just wanted something stable i run merges from upstream every once in a while
<ljharb>	in that case, find better packages i'd say :-)
<synthmeat>	</boring_details>
<synthmeat>	eh, too late in the game for that :)
<ljharb>	never too late
<synthmeat>	sure is if ya gonna go live in 20 days :)
<synthmeat>	i'll probably try to remake it in Nim during summer anyways. not that there's anything wrong with node
<synthmeat>	for the fun of it
<erste>	Hi, I've installed NodeJS in Ubuntu using the terminal.. but, when typing "node --version" it prints out nothing
<synthmeat>	erste: how did you install it? sudo apt-get?
<erste>	yes
<erste>	I'm running Ubuntu 14.04 LTS
<kevin2r>	try npm -v
<synthmeat>	me too. but it works tho, unsure what could've gone wrong there with your install
<erste>	npm -v = 1.3.10
<synthmeat>	erste: does just "node" open up repl?
<erste>	just "node" .. nothing happens
<erste>	it doesn't even show something like, command not recognized..
<erste>	btw, apt-get autoremove .. how do I use it?
<erste>	I want to try reinstalling it
<synthmeat>	"sudo apt-get remove --pugre node" followed by "sudo apt-get autoremove"
<synthmeat>	i'd recommend you adding a ppa first for it though
<erste>	synthmeat, thanks, I'll try it
<erste>	I followed this tutorial btw: https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server
<synthmeat>	erste: sorry, it's not "--pugre". it's "--purge"
<synthmeat>	typo
<erste>	:P
<erste>	tried without that ..
<erste>	didn't work, let me try again :)
<imZEH>	Hello. where should i implement the functionality for sharing file to google drive?  does should it be in front end or back end ?
<_rgn>	it's interesting that a string "foo" can be JSON.stringified but not parsed
<_rgn>	eh, yes it can
<imZEH>	?
<ljharb>	erste: best not to install node with apt.
<erste>	hmm
<synthmeat>	ljharb: because of the outdatedness?
<ljharb>	that, and that node isn't officially distributed there.
<synthmeat>	there's this fairly maintained ppa https://answers.launchpad.net/~rwky/+archive/ubuntu/nodejs
<synthmeat>	since chris didn't update his ppa to 0.12
<ljharb>	yes but it's still not official.
<ljharb>	which means, not supported.
<erste>	ljharb, so.. you suggest this?
<erste>	http://www.hostingadvice.com/how-to/install-nodejs-ubuntu-14-04/#maintained-ubuntu-packages
<synthmeat>	ljharb: you recommend building from sources? if so, local vs global install? i had some funky permission behaviour (iirc) with local
<ljharb>	erste: no.
<ljharb>	i suggest building from source, or installing with nvm/nave/n, which install from the node website.
<ljharb>	http://nvm.sh is what i usually use (and maintain)
<erste>	I'll take a look
<synthmeat>	ljharb: can one try out io.js under any of those ve solutions?
<fl0w>	synthmeat: yes. nvm installs iojs.
<imZEH>	who  had tried back end approach in sharing files to specific email address to google drive for nodejs ?
<ljharb>	synthmeat: yep - nvm has full iojs support also.
<synthmeat>	amazing. k, gonna try to do a deploy with that in few weeks. thanks!
<fl0w>	ljharb: except it doesn’t check checksums
*	txdv_ is now known as txdv
<ljharb>	fl0w: not yet, no. iojs only has sha256, not sha1.
<ljharb>	fl0w: but, that only matters if someone MITMs your ssl
<erste>	ljharb, nvm ls-remote = list all the versions.. how do I know which is stable? or I should just pick the latest one?
<fl0w>	erste: node even = stable, iojs just pick latest.
<erste>	fl0w, I see.. thanks :)
<synthmeat>	that even=stable thingie is bsd style, iirc?
<fl0w>	ie 0.10.x, 0.12.x are considered stable. io.js do semver
<erste>	oh.. I thought it was the last number..
<erste>	so .. 0.11.2 = unstable
<erste>	?
<synthmeat>	yes
<fl0w>	erste: yes, because the minor is odd.
<erste>	I see... thnks :)
<fl0w>	major.minor.patch
<ljharb>	erste: `nvm install stable`
<ljharb>	erste: and for iojs, semver doesn't convey stability, so everything is stable.
<ljharb>	erste: also `nvm install unstable` will install node unstable.
<erste>	ljharb, I see.. I just tried with 0.12.2 .. now my terminal is going a little bit crazy .. lol.. will need to check later...
<erste>	because I did without sudo command..
<erste>	and btw.. iojs .. I think this was mentioned by someone else :P.. no idea what it is
<synthmeat>	erste: a fork of node to free it from the clutches of capitalism!
<erste>	lol
<erste>	Bringing ES6 to the Node Community ..
<ljharb>	erste: with nvm you never ever use sudo
<erste>	ljharb, I see.. just wondered .. because the first few outputs.. had some .. "Download.. attempt failed.. or something.."
<erste>	but now , it seems that is working fine..
<erste>	still waiting for it to complete
<fl0w>	ljharb: sometimes, it installs weirdly on os x though (or a pre-existing installation sets stuff up in a weird state) I had that issue as well
<ljharb>	then you should chown $NVM_DIR
<ljharb>	since it's inside your user dir, it should be entirely owned by you anyways
<erste>	ah btw, one curiosity.. with Mac pc's .. or .. laptops, can you boot a pendrive with linux?
<erste>	never used one before
<ljharb>	i don't see why not
<erste>	I see.. :P
<fl0w>	You’re probably right, I know it’s under ~/.nvm but I figured a global package was incorrectly installed or something (pre-nvm). Anyway, didn’t put much effort into it as clean installed os x (due to other reasons).
<ljharb>	if you installed nvm via homebrew, or npm, then sure, you had a broken or wrong nvm :-)
<erste>	btw..
<erste>	installing node .. with nvm.. takes a long time
<erste>	lol
<ljharb>	same speed as anything else
<synthmeat>	hell, i'm gonna go nvm right now. who knows when's the next time i'll have a maintainer active around :P
<erste>	;P
<erste>	;O. finished :)
<ljharb>	synthmeat: lol i'm around most of the time
<erste>	yay, node -v works now :)
<ljharb>	also you can ask in #nvm if you want to avoid getting lost in the scrollback, and avoid cluttering up other channels :-)
<synthmeat>	:) just to ffigure out how to uninstall npm on os x, i don't have a clue where it is
<synthmeat>	ok, sure
<ljharb>	synthmeat: `nvm deactive && which npm`
<ljharb>	*deactivate
<synthmeat>	lol. it's a node module :D
*	edoardo is now known as Guest83840
<synthmeat>	ljharb: was about to ask you "do you recommend a brew install?" and then read up on issues :P
<ljharb>	nope
<ljharb>	avoid brew :-)
<synthmeat>	i think it's natural for any software dev to go from package manager install trying things out to building from sources with custom flags in evolution. nothing bad about it, i think
<synthmeat>	tbh, i decided to go with canonical nvm install now only because i read up that you'll not support brew-based installs (which is fine, no problem with that). just stating
<ljharb>	fair
<ljharb>	if i didn't have lots of people coming to me with broken brew-installed nvms i might be inclined to support it
<synthmeat>	yeah, i can imagine. a lot of the formulas are just, ugh
<poutine>	Anyone have any recommendations for how to play audio stream from a mp4 file through nodejs?
<poutine>	remote mp4 file, preferably works with streams
<greves>	are there any tutorials for creating/migrating database schemas in knex?
<greves>	haven't found any good hits on the googles
<synthmeat>	ljharb: ok, just one more question (hopefully) - nvm is shell-based, so when i start up many many shells automatically at once with different projects and node version requirements, all in their own ttys, there shouldn't be some sort of race-condition-like issues with nvm?
<ljharb>	nope, each shell has its own version
<synthmeat>	lovely
<ljharb>	nvm is just modifying the PATH
<ljharb>	if you're creating aliases, there could be one
<ljharb>	because that's writing to the filesystem
<ljharb>	or if you're `npm install -g` to the same node in two tabs - but that'd happen anyways
<synthmeat>	yeah, shouldn't run into those. cool
<ljharb>	synthmeat: also, you can make a `.nvmrc` file for each project that has the node version you want, and `nvm use` will read it.
<ljharb>	as will `nvm install`
<synthmeat>	yup, just about to make a lot of .nvmrc files
<synthmeat>	oh, wow. this was a fast switch! love it already
<synthmeat>	ljharb: thanks!
*	meandi_2 is now known as meandi
<erste>	ljharb, are you there? the NodeJS I installed with nvm ..
<erste>	works on one terminal window only
<erste>	when opening a new terminal window, "node" is not recognized again
<erste>	with the terminal I installed, by running nvm ls, it gives me ->0.12.2 (and "system" on the next line)
<erste>	on a new terminal window, nvm ls, ouputs only "v0.12.2"
<erste>	any ideas?
<beaky>	i think u need to tell nvm to use ur 0.12.2 as default
<erste>	hmm, let me take a look
<erste>	beaky, yep, works now.. thanks :)
<beaky>	btw when i do that it makes my terminal take a bit longer to start... why is that
<erste>	beaky, hmm.. I've not noticed that yet, I used the " nvm alias default 0.12.2 " command
<erste>	after that, opening a new terminal.. it still opens in the same speed as before
<beaky>	yeah could be my fault :D
<erste>	Finished in 2.766 seconds
<erste>	1 test, 1 assertion, 0 failures
<erste>	:).. finally, learning "protractor" :D
<beaky>	prtractor is awsome
<beaky>	how did people test webapps before protractor existed i have no idea
<erste>	manually :) .. I used to do that.. haha
<theahindle>	In the good ol days!
<pampuchy>	is there a channel for brunch? or should i ask here?
<greves>	knex error? io.js error? https://bpaste.net/show/e2becf43585e
<okdamn>	i have an array like this ['123.titit', '345.djsjjs', '123.dkdkdk']
<okdamn>	how do i remove all the items starting by "123." ?
<okdamn>	from that array
<okdamn>	need to iterate on the array or is there something built iin / native i can use?
<greves>	okdamn, _.remove(array, function(text) { text.slice(0,3) === '123' }
<greves>	sorry that should be text.slice(0,4) === '123.' if that's what you want
<okdamn>	greves:  lodash? is that a loop over the array, do you even know?
<greves>	it loops over the array and uses the callback function as a test for items to remove, it removes the item on `true`
<okdamn>	mmm it's quite the same as loping on the array and search matches i guess…
<okdamn>	i would like something really fast and not heavy but i understand it's not possible :(
<greves>	well theres plenty of things you can do but i'm not sure which one is fastest
<greves>	maybe just str.startsWith('123.')
<greves>	and that should have a return in the function btw, sorry :D
<greves>	if you use lodash...
<diegoviola>	going for a job interview to work with node (I know very little about it), I'm a rails developer, suggestions or any tips welcome
<lennym>	diegoviola: Don't try to bullshit too much, stick to where you're confident, and play up transferable skills and ability to learn quickly. If you start making shaky assertions of your ability and knowledge that don't hold up then you're likely to lose more than you gain.
<lennym>	If I'm interviewing you, I don;t need to to know everything on day 1, I need you to have built working software in X months.
<diegoviola>	yeah yeah but what would you say on a interview "I'm not a Node dev"?
<lennym>	It depends a lot how specific the job ism and how much you are actually bullshitting I guess.
<diegoviola>	lennym: at least you're reasonable by saying months and not 10 days
<diegoviola>	what if they ask how much node experience I have?
<lennym>	Tell them.
<DerisiveLogic>	diegoviola: Were they the ones who approached you in the first place?
<diegoviola>	DerisiveLogic: they asked me to go to their office
<DerisiveLogic>	diegoviola: Well then you must've shown them something to catch their eye.
<lennym>	"I haven't shipped any production code, but I have worked on a number of personal projects, and given my experience with these I don't find that the node ecosystem is fundamentally different to an in-browser environment, save for the usual considerations of writing web server software which I have experience with from X years building ruby sites"
<lennym>	If someone gave me that answer (or something similar) then I'd want to give them a shot (probably assuming I had at least one other experienced dev on the team)
<lennym>	(a lot will depend on the nature of the team they have and are trying to build)
<lennym>	Make some noise about how node is just a tool and whenever you go into new teams and environments there is always a learning curve around the tools that they use (test frameworks, build systems, agile processes etc), and you have always proven to be adaptable and quick to learn in the past and see no reason why this should be different.
<diegoviola>	lennym: right
<diegoviola>	ty
<lennym>	A good employer will provide support to get people in the position they want them to be, if you outright lie about experience then you won't put yourself in a position to get that support. And if the support isn;t going to be there then it's probably not a good job for you.
<diegoviola>	right
<diegoviola>	I'll tell him I know nothing, and that it's likely that they don't too, but I'm open to be hired
<diegoviola>	just kidding
<synthmeat>	lennym: pretty good advice there. kudos.
<greves>	i'm trying to clear this up in my head: DB <> ORM <> app.js (=== express()) <> REST API <> client
<greves>	is this right?
<opensorceress>	greves basically
<greves>	opensorceress, so i'm using knex for schema migrations, bookshelf for models, haven't decided/found a REST API client yet, maybe just roll my own, but how is it all supposed to get wired up to be modular
<DragonPunch>	is there an interent to search for funny stuff
<DragonPunch>	i type something in and i get funny stuff related to it
<arussel>	is there a way to run 'selenium' like test with node js. I just want to get a page, look some element, click some button and check the result
<arussel>	I want to run the script from jenkins. The target is our production site, so always running.
<hipsterslapfight>	arussel: i've used tape and testling with success in the past
<hipsterslapfight>	there's also phantomjs implementations i'm sure
<konobi>	greves: restify
<greves>	konobi, i dont really see the difference between restify and express
<konobi>	restify is a client too
<greves>	oh?
<arussel>	hipsterslapfight: phantomjs will do, thanks for your help
<konobi>	greves: http://mcavage.me/node-restify/#client-api
<greves>	i think i'm confused right now because of circular dependencies
<greves>	https://bpaste.net/show/445093e8553c
<greves>	is that actually the right way to do it?
<greves>	or... should i set a different key on the app like 'models' or something to use at the api routes?
<hipsterslapfight>	i personally don't set anything on my apps like that
<hipsterslapfight>	but rather pass the db through to the functions that need them
<greves>	hipsterslapfight, so how do i get my model definitions available in my api routes that need to query them?
<konobi>	require('models/foo')
<hipsterslapfight>	^^^ is the typical way yes
<greves>	hmm ok
<greves>	i thought maybe it would be too 'not modular enough' or something
<hipsterslapfight>	well it's certainly modular that way! just not so functional
<greves>	well i guess its not horrible if you've got 1 api route file per model and they have the same names
<greves>	hipsterslapfight, what do you do?
<konobi>	is it just an API?
<greves>	no, i will have other stuff
<greves>	i'm starting with the api
<greves>	bookshelf docs suggest this style of hanging it on the app to make sure you only have one instance per app
<hipsterslapfight>	you only have one instance per app anyway
<hipsterslapfight>	node makes sure of that
<beaky>	what is bookshelf
<greves>	beaky: ORM
<hipsterslapfight>	http://bookshelfjs.org
<beaky>	ah
<greves>	hipsterslapfight, what exactly do you mean by passing the db through to the functions that need them?
<greves>	so you would wrap all of your routes in a function and pass the db object in like that from app.js ?
<greves>	or maybe pass in an object with all of our models on it or something?
<hipsterslapfight>	app.get('/thing', require('thing')(db))
<greves>	ya, ok
<greves>	definitely still getting used to this style of coding :P
<konobi>	DI
<greves>	is there any time that i will actually need the bookshelf instance outside of adding models to it?
<greves>	seems like i can just bring in all of the models to a models.js file and export the models in an object, and forget about the bookshelf instance everywhere else
*	Sharaal1 is now known as Sharaal
*	lance|afk is now known as lanceball
<MI6>	joyent/node: Mathias Küsel v0.10 * e7c84f8 : win,msi: broadcast WM_SETTINGCHANGE after install (+1 more commits) - http://git.io/vU8bw
<greves>	does this make more sense? https://bpaste.net/show/e694f7976e24
*	edoardo is now known as Guest89830
<TheDist>	I have a question about callbacks, if I have a function that pulls some data from a website and assigns some variables, if I give that function another function as an argument will that be executed after the variables are assigned?
<TheDist>	right now I'm having to use setTimeout to intentionally delay the running of the 2nd function so that the first function has time to pull the data from the web address and set the variables correctly
<bradleymeck>	TheDist: nothing is done automatically, so it will only execute when you tell it to
<bradleymeck>	so after your fn pulls data down, it should call the 2nd function
<bradleymeck>	no magic, one of the happiest things about node right now
<TheDist>	nice, I've only just started to program like this and it was getting annoying trying to use timers to delay things from happening before another function is finished
<bradleymeck>	no need for timers
<bberry>	Should i www or not? :/
<RLa>	not a node project but anyone else got data request from? https://github.com/stamaimer/MrUirf
<RLa>	it's "user identity resolution and user information fusion across multi-social network"
<RLa>	they promise to not leak any data
<hipsterslapfight>	that sounds like an awful, awful idea
<bberry>	I'm pretty sad, in all my experiences with JavaScript/node over the past couple years, not once did I read anything about external scope variable access (with closures) would be bad for GC. :/
<RLa>	bberry, i never had problems with that
<bberry>	RLa: yeah, im crossing my fingers :P
<txdv>	is tj quitting?
<RLa>	if something is eating your memory then it's prolly a lib with shitty code
<RLa>	or coded by total noob
<RLa>	that's why i read source of every package i add into dependencies
<bradleymeck>	bberry: pay me for a month and I can write escape analysis to null out unused vars
<bradleymeck>	XD like anyone will give me money
<bberry>	bradleymeck, :P
<bradleymeck>	i can also write a type inference engine, but thats more like a year
<bradleymeck>	so never going to happen
<bberry>	RLa: lol thats what im afraid of. thankfully i've been the only one from my team writing the server code
<RLa>	bradleymeck, nobody pays for compiler stuff
<bradleymeck>	i know /sadface
<RLa>	already been there
<bradleymeck>	i at least get to do it in 20% time sometimes
<RLa>	bberry, you still need to inspect packages
<RLa>	missing semicolons and stuff like that is a warning
<bberry>	Rla: blegh. i almost want to wait untili have a problem before i try to fix it :/
<hipsterslapfight>	RLa: what if there's no semicolons at all :v
<RLa>	hipsterslapfight, then i do not use the package
*	grawlix is now known as grawlyx
<sim642>	What would be the best way to read 64 bits of a Buffer into a number?
<sim642>	I know it will turn into floating point, but still
<RLa>	sim642, readDouble?
<sim642>	no, it's int64
<sim642>	it's not in IEEE float format
<bradleymeck>	read 2 Uint32 , << 32 the higher, | with the lower
<sim642>	it's a normal 64 bit integer but I want to read it from a Buffer
<sim642>	bradleymeck, that only works for uint
<bradleymeck>	or i would honestly just
<bradleymeck>	leave it a buffer.
<sim642>	that's what I did right now but I kind of want to do things with the number
<RLa>	or a pair of 2 32bit numbers
<sim642>	RLa, and how would you output that?
<erste>	Hi, anyone uses Stormpath for authentication? is it safe?
<RLa>	output to where?
<sim642>	as a human readable number
<sim642>	in decimal
<RLa>	no idea :)
<RLa>	but i think it would be possible without requiring actual 64bit integer arithmetics
<RLa>	or maybe output in hex
<sim642>	I don't think the end-user would really understand :P
*	DeviaVir_ is now known as DeviaVir
<bradleymeck>	sim642: are you ok with me writing you an ugly hack then?
*	bradleymeck is surprised indutny doesnt have this lying around
<sim642>	bradleymeck, sure if you can be bothered to
<d10n-work>	Has anyone here figured out how to debug jasmine unit tests in IDEA?
<bradleymeck>	sim642: got tired of ironing edges, https://github.com/broofa/node-int64 work?
<symbol>	Coming from Rails...where I always wrote migrations, I have no clue where to look for documenation surrounding how to write a schema.sql for a one-to-one relationships
<sim642>	bradleymeck, that example shows to me that it doesn't actually do anything
<sim642>	converting to string is just 'Infinity'
<bradleymeck>	:-/
<sim642>	found some kind of hack: http://www.emoticode.net/javascript/node-js-read-and-convert-a-little-endian-64bit-integer-from-buffer-to-number.html
<lucidz2>	has anyone here tried to hook in a middleware into gulp server (wrapper for connect) ? the docs say i can add middleware: function(req,res) but when I do this, req and res are both null
<lucidz2>	well, undefined
<RLa>	sim642, just convert 8 octets directly to decimal with a bunch of / and % ops
<sim642>	I thought about that but that just works for unsigned
<sim642>	not twos complement
<RLa>	oh
<RLa>	it probably works but with more magic
<sim642>	that hacky code snippet seems to contain two's complement
<sim642>	with bunch of JS trickery like >>>0 idk why
<sim642>	but it seems to work
<bradleymeck>	sim642: >>>0 will drop the sign but preserve the backing number
<sim642>	I wonder if it could be generalized to work for larger ints too
<symbol>	is it JS convention to use camel case in the db?
<wattz>	morning
<kaepora>	symbol: AFAIK there is no one JS convention
<kaepora>	symbol: What do you mean by "db"?
<symbol>	database - mainly the schema
<kaepora>	What database?
<symbol>	Postgres
<kaepora>	Ah. No idea.
<kaepora>	Sorry.
<Sharaal>	I would name the variable just "db"
<symbol>	Oh, I'm referring to the schema. Sorry, I'm still waking up. userId vs user_id
<symbol>	Coming from Rails, we do user_id.
<breakingthings>	(underscore case is still the superior case)
*	breakingthings dons a fireproof suit
<symbol>	I think I'll stick to the underscore and see if anyone screams at me.
**** BEGIN LOGGING AT Mon May 11 22:13:05 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<ljharb>	Object.prototype.hasOwnProperty.call(object, key)
<ljharb>	to avoid a "hasOwnProperty" key causing problems.
<kevireilly>	tristanp: gulp is serving? ceasing gulp causes your computer to behave as expected?
<tristanp>	kevireilly: yes
<tristanp>	if i kill gulp server then it goes back to normal
<kevireilly>	tristanp: is it with a `watch` like scenario where you want the server to restart when file changes are detected?
<tristanp>	yes i am watching hella files
<kevireilly>	that is probably the issue. If you can exclude files, exclude node_modules
<tristanp>	yep, we have node_modules and jspm_packages excluded and stuff, it wouldn't even try to watch those if we hadn't
<tristanp>	the project is large :/
<kevireilly>	gotcha
<kevireilly>	tristanp: tried increasing the interval?
<tristanp>	 no i will
*	Zachary_DuBois is now known as Tokyo
<blackhole>	Is there any way to write a node.js module that can execute common lisp
<greves>	yes, there most certainly is
<blackhole>	greves: I actually want to execute common lisp natively
<greves>	blackhole, well i wouldn't really have any idea how to actually do it, but i'm 100% positive it can be done ;)
<blackhole>	greves: I couldn't find anything like that on internet though, I am also sure it can be done but I don't know what direction to go
<greves>	blackhole, well i know of python bindings maybe you could look into those
<greves>	see how its done with another language
<blackhole>	hmm
<blackhole>	greves: Please share link for it?
<greves>	you want to run lisp code in node or the other way around?
<greves>	this package (https://github.com/markfinger/python-js-host) lets you execute arbitrary javascript in native python code
<greves>	including node modules
<greves>	i think you basically write a script in one language that calls code written in the other one from the shell
<greves>	so you'd want to write a javascript function that calls your lisp modules and gets the results, probably just passing through stdin/stdout
*	stylus_ is now known as stylus
<blackhole>	greves: Hmm, I think so
<blackhole>	greves: Would I need to write any kind of bindings in node for that ?
<greves>	blackhole, probably need to write bindings for a child process and catch the stdout, i guess
<blackhole>	ok
<sabrehagen>	should node/io be installed as root or as the user who will be running it?
<greves>	why don't we need to use the `new` keyword with express.Router(); ?
<jakeyy>	well what operating system do you use? on linux, you usually install packages as root
<PLO_>	OLA
<DarkElement>	Hey guys, looking to run some phantomJS code with the phantomjs-node package for node.js. Here is the file I'm working on, with phantom-node code commented, and phantomJS code as the rest of the file. Hope you guys can help!
<PLO_>	JDNJN
<jakeyy>	my guess is that it does create a new instance internally, and just doesn't want you to worry about the instances when you instantiate it
<PLO_>	M
<greves>	jakeyy, ok, interesting
<PLO_>	<iframe src="http://webchat.freenode.net?uio=d4" width="647" height="400"></iframe>
<sabrehagen>	jakeyy: yes, i'm on linux
<jakeyy>	do you do apt-get install node?
<jakeyy>	or nodejs
<jakeyy>	whatever
<sabrehagen>	no, downloading iojs from latest on their site
<DarkElement>	ive got that working, as well. Just an implementation issue i'm facing.
<jakeyy>	well if you're only planning to use it from one user, I'd just install it from them
<jakeyy>	but if you want it available to everyone on the box, I'd install as root
<sabrehagen>	cool, thanks
<DarkElement>	Can anyone here help with implementing a phantomjs program into a nodejs file
<jakeyy>	DarkElement, you never posted your original file
<DarkElement>	mistakes were made: http://paste.pound-python.org/show/o1S5Ic1Yt6tLa3la4njr/
<stephen>	Has anyone looked into HTTP2 and Web Sockets?
<TehShrike>	mafintosh: hey there, had a question about mutexify
<TehShrike>	mafintosh:  I really like the API and the overall functionality and the code size, but I'm having to dance around zalgo a lot - would you be open to a pull request that added process.nextTick or asap here? https://github.com/mafintosh/mutexify/blob/master/index.js#L8
<tristanp>	is it possible to have gulp-watch like dump a list of files it is watching based on the filename path matching you provided
<tristanp>	so i know if i accidentally matched too many
*	foooey is now known as fooey
<joepie91>	for my promises article, the sections I have in my todo: promises error handling and why it's better than in nodebacks, performance, why promises > async, why bluebird > Q/ES6 (and when it isn't), basic usage, how to avoid memory leaks, how to modularize code using promises, how to export a dual nodeback/promises API, how to branch conditionally, how to use map/filter/reduce, how to promisify manually
<joepie91>	anything I'm missing?
<GreenJello>	joepie91, sounds good if you're targeting intermediate/advanced node/js developers; but I think the main area where this is a problem is people that are somewhat new to js, and are just grasping async to start, and they hear that promises are good for some reason but have a lot of difficult wrapping their heads around them.  If there's a way you could include pictures or
<GreenJello>	animations to add to what you're saying, that might help make the abstract 'promise' more tangible.
<joepie91>	GreenJello: yeah, I plan to go from basic concepts to advanced concepts
<joepie91>	sort of reference guide, really
<joepie91>	GreenJello: with an actual visual marker of where the "basics" section ends :P
*	JakeSays is now known as JakeSaysFukitol
<greves>	hmm i've got babel installed globally and require('babel') throws an error that it can't find the module
<symbol>	can anyone recommend a module for infinite scrolling? I might just use a pagination module and then use ajax to do some magic.
<kevireilly_>	greves: installing a module globally most commonly adds command line utilities but does not extend to `requires`
<kevireilly_>	-s
<greves>	kevireilly_, yeah i guess thats what i figured out :P works fine if i install locally
<kevireilly_>	ah excellent
<adgtl>	What is the best template to use for creating simple node.js express app?
<adgtl>	Anything that I can use from yeoman generator
<dodobrain>	there is an express-generator
<dodobrain>	i'm not a fan of generators. others might give you better answers
<joepie91>	I'm not a fan of generators either
<joepie91>	:p
<joepie91>	adgtl: nunjucks is very HTML-like
<joepie91>	but really, you don't need a generator
<adgtl>	joepie91: hmm express-generator forces you to use jade templates
<joepie91>	adgtl: no, it doesn't "force" you to do anything
<joepie91>	it just sets it as a default
<dodobrain>	adgtl, forces? you can use express-generator and then practically throw away everything it created and still have an express app
<adgtl>	dodobrain: ah
<joepie91>	but that's my point, you don't need a generator
<joepie91>	10 lines of code and you have an express app, basically
<greves>	hey joepie91 what do you think about iojs?
<adgtl>	joepie91: then how to create a starting app
<adgtl>	joepie91: I am totally noob
<greves>	i tried it out yesterday but too many bugs so i switched back
<joepie91>	adgtl: by reading the Express docs :)
<joepie91>	greves: it's great that it exists, I don't use it, it will eventually merge back into Node.js anyway
<joepie91>	goal has been accomplished, pretty much
<joepie91>	Joyent apparently agreed to an open governance model
<greves>	10 lines!? what kind of monstrous app are you writing!? require('express')().listen(3000); <--- an express app
<joepie91>	hahaha
<joepie91>	greves: I meant a production-ready hello world
<dodobrain>	greves, a reasonably useful express app
<joepie91>	:P
<joepie91>	dodobrain: hello world with a ?name= parameter?
<greves>	oh well i dont have any clue about that, all my apps are just variants of the above :P
<greves>	funny they dont have much interactivity though
<dodobrain>	joepie91, thats still more useful than his oneline app
<greves>	how much extra overhead will it cost me to require('babel/register') in most of my node server-side files?
*	edoardo is now known as Guest2657
<fcanela>	Hi, guys. I am trying to remove salts and hashes from an users get API.
<fcanela>	My idea was using lodash, which I know how to use to remove items from an array. But here "salt" and "hash" are subitem of the array
<fcanela>	Any idea about how to approach the problem? forEach with lodash inside?
<Sharaal>	fcanela: sounds like a case for .map
<Sharaal>	fcanela: and for every item remove the salt, hash keys
<fcanela>	Sharaal, nice one. Thanks :)
<lance7in>	1
<mafintosh>	Tehstrike: whats zalgo?
<mafintosh>	TehShrike: whats zalgo?
<Industrial>	some internet culture thing
<Industrial>	kids these days
<glontu>	hi. anyone using PM2 ? i have a process in pm2 and i would like PM2 to try and restart my process every 10 seconds for example. right now it goes into a frenzy and tries to restart all the time. Can i make it chill out a bit ?
<glontu>	P.S. i forgot to mention that the process dies. i don't want to restart it while it's running fine.
*	newbie is now known as Guest19154
<Guest19154>	Google doesn't seem to be much help, but is there any resources on controlling a commandline application from node? Not node itself, but other applications running in the commandline?
*	Guest19154 is now known as Zlepper
<sp00x>	you can read/write to stdout/stderr via a spawned process?
<sp00x>	Zlepper: ^
<Zlepper>	Is there any documentation on that anywhere, i'm pretty new to node, so i'm stilling learning my way around the robes
<sp00x>	Zlepper: https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options  (then see the examples below)
<sp00x>	ie you get the .stdout and .stderr you can read output from via the 'data' events and also write to
<Zlepper>	That seems to be exacly what I was looking for :D
<glontu>	i keep getting this and i don't know how to stop it from making my process die: Potentially unhandled rejection [1] Error: connect ECONNREFUSED
<glontu>	does anyone have any ideea ? The remote server is dead when my process attempts to connect and if it fails this appears
<sp00x>	vague guess; missing 'error' event handler?
<sp00x>	(for the socket or wahtever you're doing)
<glontu>	sp00x, i am handling the 'error' event on the connection object but that dosn't get called. should i also bind on the process ?
<sp00x>	i'm not sure how the unhandled error exception handling works in node, tbh.
<glontu>	i've put my code in this here issue if anyone wants to take a peek: https://github.com/squaremo/amqp.node/issues/153
*	outpatient is now known as inpatient
<sp00x>	yes well but the conn.on('error',..) bit is already inside the amqp.connect, that is failing. is there no .on('error') on the amqp rmq lib itself?
<sp00x>	the conn.on(..) would be for failures after the connection has been _established_
<glontu>	i'm trying to dig through the amqplib connect code and see
<sp00x>	(btw, the 'amqp' lib (not the one you're using) does automatic reconnecting iirc)
<chovy>	'[COLOR blue][I][B]Example Stream[/B][/I][/COLOR]'
<sp00x>	(but it's probably a bunch of rewriting required to use it)
<chovy>	what is this? Is there some name for this syntax?
<sp00x>	chovy: looks like some forum markup, like phpbb
<chovy>	i tried bbcode
<chovy>	but it doesn't recognize [color blue]
<sp00x>	and you won't have any luck googling for that phrase, even quoted ;)
<_rgn>	is there a way to make this less ceremonial? https://github.com/lob/massage/blob/37314176739f437400590bd45b76a92f584dc90a/massage.js#L22-L50
<sabrehagen>	_rgn: make an array and push your functions on, then map a function to create the prototype?
<SAmms>	Hello, I have a question about clustering and cron jobs together...
*	ec-not-irccloud is now known as ec
*	ec is now known as ec\
<DeviaVir_>	shoot SAmms, chances are higher you'll get a response
<SAmms>	DeviaVir_ thanks, new here ;-) so I am running a process.. using pm2 I'm running 4 instances. an instance has different modules using redis etc and a cron job manager, which all it does is checking if a specific key exists in redis and starts a job for every key that exists..So I think I'm going to have multiple cron jobs right? (each cron job asks
<SAmms>	 another server for information) .. how do I make sure that not more then one instance queries the other server? so ifi have 4 I won't get the 3rd party queried 4 times
<_rgn>	is the right way to bubble an Error to the next catch handler to throw it again?
<_rgn>	sorry, talking about bluebird here
<sabrehagen>	_rgn: unless you have a catch, don't add one in order to catch the error and pass it to the parent catch. errors automatically bubble up the chain and will be caught by the next attached error handler
<_rgn>	https://gist.github.com/a11ad6b83ef741a3c939
<_rgn>	I'm creating the error using https://github.com/jshttp/http-errors
<p15x>	anyone had good experience running nodejs on azure?
<p15x>	seems more expensive than the competition though
<Sharaal>	p15x: only with the others, heroku and aws, if it helps
<p15x>	evaluating my options now that heroku free plan is ending
<greves>	hmm i can't seem to get webpack working, i'm doing my stuff pretty much according to the examples on webpack docs and gulp-webpack docs
<greves>	keep getting an 'Unhandled stream error in pipe'
<Sharaal>	p15x: yes, the new plan with the 6 hours downtime seems to be hard. but the free dyno was so or so not really a production thing. more as 2k rpm was not possible in my load tests
<p15x>	I run it in production without problems
<p15x>	Heroku basically told me to make small services and not worry about the cost unless they were gonna be using up too many resources, pretty annoyed at them
<Sharaal>	yes
<p15x>	They're the best though
<p15x>	As far as I can tell, even at $7
<Sharaal>	$7 is expensive if you having an application consists of a lot of microservices
<p15x>	I have a lot of microservices, but maybe they will fall under the 18 hours
<p15x>	until some search engine figures out the API url
<DeviaVir_>	SAmms: You're doing queuing?
<DeviaVir_>	SAmms: (this came to mind: https://github.com/Automattic/kue)
<asdfasfd>	hi all
<Sharaal>	p15x: is it perhaps possible to define the downtime self, so define it in the night knowing no one need it?
<asdfasfd>	i am coming
<p15x>	if I really want to hack heroku I can just setup my routing to half the day route to appA and half the day route to appB
<p15x>	dunno if they will consider that cheating
<Sharaal>	sounds good :)
<SAmms>	DeviaVir_: I'm not doing queuing -> the Cron jobs are asking a server for location information every X seconds
<DeviaVir_>	SAmms: You're checking if a specific key exists, and if it does, you execute a task
<DeviaVir_>	how is that not queuing?
<SAmms>	Maybe I'm getting the idea wrong.. the key check is done once
<SAmms>	should be done once
<SAmms>	but the problem is that if i'm executing each instance .. it will be done a few times
<DeviaVir_>	SAmms: Exactly. That's why queuing systems were built. To have multiple machines work through a redis "queue", marking a key "in use" when already being executed, and "done" when.. well.. done.
<greves>	joepie91, i need your gulp webpack config again !! :P
<MI6>	joyent/node: James J. Womack refs/tags/jenkins-accept-pull-request-temp * 5f1c225 : API docs: fix omission in console.dir - http://git.io/vUzD6
<MI6>	joyent/node: James J. Womack refs/tags/jenkins-accept-commit-temp * 256137f : API docs: fix omission in console.dir - http://git.io/vUzDS
<sybarite>	Anyone here with experience testing a big node js app? Would like to know your approach? How did you guys organize the tests? How much coverage was satisfactory for good results?
<phpmiddleman>	is it good idea to have npm depend upon bower, and then invoke bower with node_modules/.bin/bower?
<p15x>	I test based on scenarios
<SAmms>	DeviaVir_: Thank I will look into it, still confused, but maybe all i need to do is to run the specific job manager only on the master
<p15x>	like "user adds a widget to their account" scenario
<sybarite>	p15x, How big is your application? How many developers working on it?
<p15x>	just me, I dunno how to quantify how big it is
<sybarite>	phpmiddleman, Its better to have run it after the npm install is finished as a post install script
<p15x>	also I split everything into small services joined with HTTP
<sybarite>	p15x, How many routes?
<sybarite>	or roughly how many middlewares if you have a express project?
<p15x>	lots and lots of routes, just one service can have like 10-40 routes and I have 15 services
<greves>	wow webpack is terrible... can't even get it running
<greves>	at least browserify works
<greves>	>.<
<sybarite>	p15x, So how do you test all the routes are functioning as expected? Have you written tests for all of them?
<sybarite>	How have you organized the test folder? Your mocks? Fixtures?
<p15x>	I do unit testing on the function level and then scenario integration testing on each route
<sybarite>	p15x, How much time does it take you to write these tests?
<p15x>	the unit tests are very low level and just test state machine type things, the scenario tests are very high level and pretend to be a user
<p15x>	1/3 of the time maybe?
<sybarite>	Also I would like to know how are you organizing all these tests?
<p15x>	each scenario gets a file and I have an organizer to run a specific scenario, a set of scenarios, or all scenarios - plus a cleaner to run in between scenarios
<p15x>	I use vows
<sybarite>	vows? I have not heard of this? Is this what you are talking about http://vowsjs.org/?
<p15x>	yeah
<sybarite>	p15x, Why not use mocha + chai for this?
<p15x>	I don't like vows' async control flow helpers all that much though so generally i use async for that
<p15x>	it doesn't really matter much what I use, the testing framework doesn't do the majority of the work
<sybarite>	p15x, Thats true
<p15x>	just used vows for a long time and no problem with it
<sybarite>	p15x, Would you say your testing framework setup will work with a team of developers? Will be there be any hurdles? What would you have to do if you want make sure that a team has to use your testing infrastructure?
<sybarite>	p15x, Also thanks for all the replies I am collecting personal insights of people testing their applications
<link_q>	hey
<link_q>	anybody here? i need some basic help with nodejs ..
<ASEV>	yes
<link_q>	ah. so i'm trying out nodejs for the first time, and i got the example webserver running. it responds on localhost / 127.0.0.1 just fine, but not on my public ip address as given by google
<link_q>	any idea why?
<ASEV>	many possibilites
<fl0w>	link_q: number of reasons to why that might occur. Usually, you’re behind a firewall (internal in a router) and it blocks all connections in.
<link_q>	okay, how do i determine what's causing it?
<fl0w>	start by checking your firewall setting.
<ASEV>	it may not be the firewall
<link_q>	what am i looking for in the firewall settings?
<ASEV>	your router doesnt know to route packets to your local computer
<ASEV>	check port forwarding for tcp packets
<link_q>	okay, checking.
<ASEV>	if you use the default http port 80, then forward them to your computer
<link_q>	so i just forward tcp packets to localhost?
<ASEV>	not to localhost
<link_q>	then..?
<ASEV>	to your computers IP that is used in LAN
<link_q>	is that different from my public ip?
<ASEV>	yes
<ASEV>	it is
<ASEV>	for example, my computers LAN ip may be 10.0.2.15
<ASEV>	but public IP is totally different
<link_q>	oh, okay. how do i find out my local ip?
<ASEV>	windows/linux?
<link_q>	windows
<SuperHeroINTJ>	Is it possible to return multiple arguments to a promise?
<SuperHeroINTJ>	Which pattern people use for such situation?
<ASEV>	link_q: open command prompt
<ASEV>	and ipconfig
<link_q>	okay, done.
<ASEV>	what do you see there?
<link_q>	a "Link-local IPv6 Address", an "IPv4 Address", a "Subnet Mask", and a "Default Gateway"
<SuperHeroINTJ>	link_q, IPv4 Address
<_rgn>	hmm, relying on process.exit as flow control (i.e. return statement)  makes testing tricky
<zhodge>	does anyone notice a delay when creating a new bash shell if using nvm?
<zhodge>	I’m wondering if there’s enough overhead in the nvm functions for that
<bberry>	Aria: you around? Was going to ask if ya'll run your node apps behind nginx or some other static file server
<node8js401>	Hi
<node8js401>	Anyone here?
<MI6>	joyent/node: James J. Womack refs/tags/jenkins-accept-commit-temp * a608a20 : API docs: fix omission in console.dir - http://git.io/vUgOX
<node8js401>	I got a question
<node8js401>	im passing down a callback into a scope
<node8js401>	with an object
<node8js401>	when i debug the object it has all the function as it should
<node8js401>	but when i call the function from the object is says undefined function
<node8js401>	:/
<node8js401>	?
*	lance|afk is now known as lanceball
<DeviaVir_>	node8js401: can you gist the relevant pieces of code?
<node8js401>	anyone here
<node8js401>	yes
<node8js401>	DeviaVir_
<node8js401>	sec
*	zcm is now known as Guest89980
<node8js401>	Lets say i got:  var that = this;  this.regUser({object..}, function(){  that.sms.send('blalabla');  });
<node8js401>	that.sms is an object when i console log it
<node8js401>	it shows the object with the functions
<node8js401>	but when i try to use it is says undefined
<node8js401>	that.sms = function , that.sms.send = undefined
<node8js401>	if i call it out of scope like: this.sms.send..
<node8js401>	it works.
<node8js401>	seems like the instance of this is lost
<node8js401>	but it cannot be
<node8js401>	because it knows about sms when i log it
<node8js401>	any idea?
<Rantanen>	node8js401: Full code and full error message?
<DeviaVir_>	node8js401: (+Rantanen) Please gist all relevant parts :)
<guy>	anyone from Lithuania here?
<monseiur_swifty>	i'm not
<monseiur_swifty>	:-P
<zcm>	US here
*	edoardo is now known as Guest29895
<Jayflux>	Hey guys, is there any way of viewing documentation in the terminal without needing the website (like with python)? thanks
<faysal>	hi guys
<faysal>	anyone familiar with mikronode ?
*	choop-lurks is now known as choop
*	DeviaVir_ is now known as DeviaVir
*	fourq is now known as awayq
<Aria>	I am, bberry.
<Aria>	We do, and Enterprise Grade Load Balancers.
<Aria>	(actually, though, we don't use nginx for static file serving. That's left to express if things go direct, but usually we use a CDN)
<bberry>	Aria: i see. probably a bit early for me to use any load balancing. if you dont use nginx for static file serving, it is only used a proxy then?
<Aria>	bberry: Yeah. And a few security redirect rules.
<bberry>	makes sense
<bberry>	Aria: and for the CDN, do you host your own or do you use some third party cdn
<Aria>	We've got our own.
<bberry>	haha very nice, im jealous :P
<Aria>	Paypal is old-school and vaguely paranoid.
<bberry>	yeah, the other engineers here dont want to use any third party cdn either, so we just serve it from here
<bberry>	have a local copy
<bberry>	Aria: tyvm, as always, youve been quite helpful :D
*	awayq is now known as fourq
<Aria>	bberry: Start doing latency measurements from around the globe. They'll want a CDN after that ;-)
<bberry>	Aria: hahaha awesome, good point
<Aria>	But from experience: keep your static files relatively long cached, use hashes in the URLs so that when content changes so does the URL, and then use a CDN that works as a proxy cache. That's going to be your most pleasant integration experience.
<Aria>	You point some other domain at your servers, and they fill the CDN from you as users request things.
<Aria>	It's not hard to plan for the future in that case.
*	exec_s is now known as exec_off
<bberry>	nice, will do
<saquibkh_>	Hi All
<SuperHeroINTJ>	hi saquibkh_
<bel3atar_>	do I have to use mongo-koa with koa, or is the official driver just fine?
<Aria>	Official driver is fine. Just won't be shaped the same way as the koa APIs.
<donCams>	can I ask socketio-specific questions here?
<Aria>	Yep.
<donCams>	thanks. Anybody has an idea why adapter is undefined in this code? http://pastebin.com/ZETENQaJ
<myndzi>	var io = require('socket.io')(youdidn'tdothispart)
<myndzi>	in the example on socket.io-adapter-mongo: var io = require('socket.io')(3000);
<donCams>	isn't that the same as sio.listen(server); ???
<myndzi>	presumably, but the thing is, "adapter" is a method of the instance
<myndzi>	and you're calling it on the class
<myndzi>	which is why it doesn't exist
<myndzi>	i haven't seen this syntax before so i'm not actually sure what it exactly means, one sec
<donCams>	so I can do var sio = require('socket.io')(); var io = sio.listen(server); ???
<myndzi>	probably not
<myndzi>	but you can probably do
<myndzi>	var io = sio.listen(server)
<myndzi>	io.adapter(whatever) ?
<myndzi>	i'm not sure, trying to see
<myndzi>	this syntax seems really weird
<myndzi>	you'd want to set the adapter BEFORE listening one would think
<myndzi>	ah, here we go
<myndzi>	var io = require('socket.io')(app);
<myndzi>	you probably want to use that syntax
<myndzi>	THEN io.adapter
<myndzi>	THEN app.listen
<donCams>	hmmm
<donCams>	hmmm. seems the app is still using v0.9.5
*	fourq is now known as awayq
*	awayq is now known as fourq
*	fourq is now known as awayq
<donCams>	got it to work! updated the version :) thanks myndzi
*	meandi_2 is now known as meandi
*	danmactough_ is now known as danmactough
*	awayq is now known as fourq
*	ian_mac is getting tired of npmjs.com being a full page ad all the time and having to scroll down
<Aria>	Scroll down to what?
<ian_mac>	ah fixed it
<ian_mac>	nevermind
<ian_mac>	*sigh*
<ian_mac>	didn't realize that no thanks was persistent
<iamthechad>	Does anybody have resources to get started hacking on the core? I can't even get "make test" to work consistently across different OSes.
<bradleymeck>	iamthechad: what is happening when you `make test`
<iamthechad>	On Mac, all tests pass. On Ubuntu/Debian I get lots of test failures. (I don't know if there's a report or list somewhere that details all the failed tests. I couldn't find it.) I assume I'm missing some dependencies but not sure what.
<bradleymeck>	iamthechad: it should list which tests failed
<bradleymeck>	im not sure if there is anything more it will output
<bradleymeck>	iamthechad: do you at least see the stdio msgs when you run make test?
<bradleymeck>	cause you should see that
<iamthechad>	I'm rebuilding my Ubuntu VM. I'll see what exact output I get from running the tests.
<iamthechad>	I do see messages to stdio. I see a lot of error messages go by as the tests run.
*	danmactough is now known as danmactough_
<bradleymeck>	iamthechad: they will probably hint as to what the problem is
<arduinoob>	I need to upgrade npm on a server where node (and npm) were installed from a package manager. Apparently the usual npm install npm -g doesn't work. Neither did npm upgrade npm -g.
<arduinoob>	Can I just download the tarball for the most recent node and just export PATH=/path/to/new/npm:$PATH?
<bradleymeck>	arduinoob: you can do that, you can also tell your package manager to set a proper prefix for npm and go complain at whomever, probably debian
<arduinoob>	bradleymeck: it is debian
<bradleymeck>	hah
<bradleymeck>	read https://docs.npmjs.com/misc/config#prefix and which npm
<bradleymeck>	`which npm`
<ian_mac>	which version of node are you running?
<arduinoob>	0.8.16
<bradleymeck>	jesus
<arduinoob>	\m/
<ian_mac>	people here say it is worthwhile to use the alternative debs you can get somewhere
<bradleymeck>	arduinoob: https://github.com/nodesource/distributions
<ian_mac>	that gives you the latest 0.10 I think
<bradleymeck>	ian_mac: they have separate reps for 10 and 12
<bradleymeck>	which is a long story as to why, but politics
<ian_mac>	oh they call 0.12 dev
<ian_mac>	I see.
<arduinoob>	http://www.kiwiirc.com/ - A hand crafted IRC client
<arduinoob>	as opposed to.....
<ian_mac>	I TLDR'd right into the usage instructions which don't mention that
<iamthechad>	bradleymeck: Of course all tests pass now. I was obviously doing something wrong before. I think I forgot to re-run ./configure after installing g++.
<bradleymeck>	ah
<bradleymeck>	iamthechad: if you have any questions about where to find info let me know
*	danmactough_ is now known as danmactough
<iamthechad>	bradleymeck: Thanks. I imagine I'll be trying to figure out how to debug before too long.
<bradleymeck>	iamthechad: NODE_DEBUG=$INSERT_THING is a big thign for simple js debugging, i defer to others for gdb/lldb debugging
<bradleymeck>	cause i'm lazy ha
<iamthechad>	Cool. Hopefully I won't have to go spelunking too much.
*	itscassa is now known as itscassa|away
<ashnur>	hi
<ashnur>	noob question alert: is it possible to handle mouse events with nodejs if that nodejs process is running in a terminal emulator and i am clicking in the same terminal emulator window_
<ashnur>	?
*	itscassa|away is now known as itscassa
<j0hnsm1th>	ashnur, i vaguely remember you are able to do this, look for package on npm called terminal-kit i think
<j0hnsm1th>	ashnur, yup found it - https://www.npmjs.com/package/terminal-kit#ref.event.mouse
*	exec_off is now known as exec_s
*	ChanServ gives channel operator status to AvianFlu
<lucidz2>	i have a conceptual question. if i have a lot of html files that will be retrieved as just data/information (think pages of a book) and the searching/indexing/faceting for these files will be handled with solr, do i gain anything by putting these html files into document storage like mongodb vs having them on the file system and just using fs access to open them?
<symbol>	Is there a way to prevent people from spamming a submit button in express.js?
<bradleymeck>	lucidz2: probably not, but you would want to pick the right file system / have the file system able to replicate
<symbol>	Making quick POST requests hangs up node
<chiper>	then you did something wrong...
<symbol>	chiper: Is that to me?
<chiper>	yes
<symbol>	Undoubtedly  ^_^
<symbol>	https://gist.github.com/anonymous/dd7999e96b2fc2865b03
<chiper>	if your app can't handle multiple post requests simultaneously, then your post route is doing too much computation syncronously
<chiper>	what is Flow.create?
<symbol>	It's a db query
*	toddself is now known as toddself_zz
<symbol>	https://gist.github.com/anonymous/a2c73b31ead2581dabd7
<chiper>	that alone shouldn't be slowing down the app enough to cause problems. with multiple submits
<symbol>	Good to know - I'm new to thinking in async terms...chances are I have a bug somewhere.
<chiper>	if you want to prevent the user from submitting multiple times, you need some frontend code to disable the submit button after they click it
<symbol>	That makes sense - it just bothered me how slow it was running.
<MI6>	joyent/node: Alexis Campailla refs/tags/jenkins-accept-pull-request-temp * 5f3ba1f : test,win: disable test-tls-server-verify for CI - http://git.io/vU2d7
<MI6>	joyent/node: Alexis Campailla refs/tags/jenkins-accept-commit-temp * 0dbaee4 : test,win: disable test-tls-server-verify for CI - http://git.io/vU2FT
<steeze>	anyone have experience with any of of the CMSs written for node?
*	lizzin is now known as Guest99509
<MI6>	joyent/node: Alexis Campailla v0.12 * 0dbaee4 : test,win: disable test-tls-server-verify for CI - http://git.io/vUakF
<bberry>	from a security point of view, is it really beneficial to require new users to have a password with special characters and/or a number?  I would think that that would just tell potential hackers more information about the password scheme
<bradleymeck>	bberry: it increases the base of the permutations per character, you do give some info out, but it is minor compared to increasing a base size
<bradleymeck>	it also can prevent overly simplistic attacks from even working
<bberry>	yeah
<bberry>	although it doesnt really increase the base of the permutations
<bberry>	they were there before
<bradleymeck>	a fun one is setting your hostname to unicode random characters, watching what breaks around your house
<bberry>	its just that now potential hackers will know what 2 of the characters have to be
<bberry>	lol
<bradleymeck>	my printer won't talk to me if I name my host "👺"
<bradleymeck>	bberry: knows 2 character classes not 2 characters
<bangdollar>	i stil have files named in kanji that i havent taken the time to delete :)
<bangdollar>	nor there positions
<bangdollar>	their
<bberry>	bradleymeck, haha yes, my fingers got lazy
*	toddself_zz is now known as toddself
*	marthinal_ is now known as marthinal
*	Zak is now known as Guest4411
<computerperson>	is it unreasonable to expect request.post to work with a 50mb file as string?
<computerperson>	without getting a memory error? (my memory limit is at least 512 mb)
<joepie91>	computerperson: use a stream
<joepie91>	computerperson: although request is very buggy with streams, so I recommend looking at https://www.npmjs.com/package/bhttp
<joepie91>	(disclosure: I'm the author)
*	dguttman_ is now known as dguttman
<computerperson>	thanks will check it out. i had been trying streams but without much success
*	spader is now known as terinjokes
<computerperson>	but not sure if i was implementing correctly to be honest
*	zoite is now known as Guest92083
<joepie91>	computerperson: the bhttp docs have an example :)
<computerperson>	cool will try after lunch, bb later
<moleWork>	computerperson, note that while writing to streams in small chunks you should observe the return value of stream.write and wait for the stream to drain
<wtfExpress>	Hi
<moleWork>	lol @ nick
<wtfExpress>	I have made a node express application. I just uploaded to an ubuntu server and finished installing the dependencies. I did npm start and it's says it's listening so all is fine.
<wtfExpress>	Now, i try to connect to it and it won't allow me to
<moleWork>	can you connect to it from localhost
<wtfExpress>	Do i need to modify something to allow external access to it?
<wtfExpress>	I was able to on my machine yes without a problem
<moleWork>	curl -v http://127.0.0.1:3000 from the server
<moleWork>	or whatever your port is
<wtfExpress>	It works
<wtfExpress>	I tried to listen to port, ip where IP is the one provided by the "droplet"
<joepie91>	moleWork: ping
<wtfExpress>	Okay
<wtfExpress>	I don't know where i fucked up
<wtfExpress>	but now it works
<wtfExpress>	Thanks guys :D
<moleWork>	wtfExpress, what does your app.listen look like? you should just call app.listen(process.env.PORT || 3000) alternatively you can app.listen(process.env.PORT || 3000, '0.0.0.0')
<moleWork>	joepie91, pong!
<joepie91>	moleWork: quite some latency :P
<joepie91>	moleWork: slight correction to my statement the other day
<wtfExpress>	i had to put the IP there
<joepie91>	when I said DO uses Xen
<joepie91>	I was thinking of AWS there
<wtfExpress>	Thanks
<joepie91>	I believe DO uses KVM
<wtfExpress>	<3
<joepie91>	(same end result, though)
<moleWork>	lol, sorry fyi i don't mean to argue with you... btw... i enjoy the opinionated discussion
<moleWork>	joepie91, yeah i actually read that and confirmed that too :)
<joepie91>	AWS *does* use Xen :P
<joepie91>	realized it a day or two ago but you weren't around, heh
<moleWork>	i really enjoy ops but i much more enjoy application development... i really wish that per developer there was a dev ops guru who just setup what you asked them too and you never had to worry about running stuff yourself
<moleWork>	ops is such a mess, exciting times for applications and ops but ops is too ugly for me too look at for so long
<joepie91>	curious deal: http://lowendtalk.com/discussion/52467/repost-market-crash-dual-e5420-20-mo-dual-l5520-29-mo-recurring-btc-pp-cc
<joepie91>	slightly dubious about the company though
*	danmactough is now known as danmactough_
<moleWork>	5TB bandwidth crazy
<joepie91>	moleWork: ?
<joepie91>	5TB is not a lot :P
<moleWork>	no but to be included in the price
<joepie91>	yes?
<joepie91>	that's pretty much normal
<moleWork>	didn't know that
<joepie91>	I'm more surprised about the hardware :p
<joepie91>	moleWork: bandwidth is cheap, basically
<_X_C_V_B_>	joepie91: per what mouth???
<moleWork>	i've only looked at AWS or Azure where it doesn't seem cheap
<joepie91>	_X_C_V_B_: 5TB/month
*	Spr0cket- is now known as Spr0cket
<joepie91>	moleWork: yeah, that's because they (and most services like it) grossly overcharge for bandwidth
<Gottox>	I got a 50eur server with 20tb of traffic.
<Gottox>	and even that is no hardlimmit.
<joepie91>	Gottox: germany?
<Gottox>	yes.
<Gottox>	hetzner.
<joepie91>	figured :)
<joepie91>	yeah
<joepie91>	oh, they do 20 now?
<joepie91>	used to be 10 iirc
<_X_C_V_B_>	moleWork: with digitalocean I get 1TB a mouth for $5
<moleWork>	_X_C_V_B_, per 1TB or just the initial offering?
<_X_C_V_B_>	moleWork: https://www.digitalocean.com/pricing/
<joepie91>	moleWork: traffic allocation for regular VPS/dedicated services is basically always per month
<moleWork>	I know their plans include 3TB but i think after that it ends up costing
<Gottox>	joepie91: they even increased to 30tb.
<joepie91>	it's really just AWS/Azure/etc. who count per TB
<STRML>	not sure really what DO does if you go over on transfer
<STRML>	Ah. $0.02/GB
<joepie91>	the normal models for hosting are either monthly traffic allocation, 95th percentile billing, shared unmetered, or dedicated unmetered
<STRML>	pretty stiff tbh
<joepie91>	STRML: DO doesn't keep track of overages ;)
<joepie91>	and meh, 0.02 is fairly normal
<joepie91>	$20 per TB
<joepie91>	not too bad
<STRML>	Well, when you get 1TB for $5
<STRML>	along with a server
<STRML>	It's a pretty harsh overage if you have a crazy month
<joepie91>	STRML: yes, there's a reason for that
<joepie91>	STRML: buying upfront means they can change their upfront commit with the DC/upstreams to adjust for it
<STRML>	right
<joepie91>	unexpected overages means unexpected need for capacity
<joepie91>	and is thus charged higher
<joepie91>	though right now, DO doesn't measure traffic at all
<_X_C_V_B_>	more traffic more money you make
<joepie91>	as far as I am aware
<_X_C_V_B_>	in theory
<joepie91>	STRML: I generally use smaller VPS hosts, they tend to just disable networking on a VPS on overages, rather than charging extra
<joepie91>	and re-enable start of next month
<joepie91>	(or if you buy extra traffic)
<_X_C_V_B_>	I haven't had any problems with digitalocean so far
<_X_C_V_B_>	I only had them for a few mouths
<pspeter3>	Is there anyway to make npm colorize the script running?
*	joepie91 wonders what's going to happen when DO runs out of VC capital to crunch through
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Tue May 12 13:32:21 2015

**** BEGIN LOGGING AT Tue May 12 13:37:40 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<Aria>	What are you trying to do?
<Aria>	This sounds a little weird.
<ljharb>	git deps always install fresh
<ljharb>	because npm can't know if it's actually changed.
<ljharb>	if you want that behavior, you need to actually publish it somewhere.
<cjohnson>	ah, that makes sense
<cjohnson>	I'm just adding jsctags to my vim dir
<cjohnson>	I don't want to see the output or have it reinstall jsctags if it's already there
<Aria>	Ah, that's a bit weird.
<cjohnson>	What's weird about it?
<Aria>	Just using npm inside a vim directory.
*	chipwizard is now known as matthewt
<Aria>	And a git url to boot?
<cjohnson>	ah, yeah it's a bit odd
<cjohnson>	https://github.com/majutsushi/tagbar/wiki#javascript
<cjohnson>	but that's what they suggest
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Tue May 12 13:42:59 2015

**** BEGIN LOGGING AT Tue May 12 13:51:31 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	AtomicB0mB is now known as atomicbmb
*	atomicbmb is now known as atomicb0mb
<jaawerth>	Aria: lol, you crazy
<moleWork>	the file system should cache them in memory just as mongodb would, however if you have queryable metadata that might benefit from using a dbms with query engine
<jaawerth>	yeah, that's the thing
<jaawerth>	I find it much more pleasant to use a decent doc-based database for better querying/easier replication
<lucidz2>	yeah
<lucidz2>	so i haev gone back and forth
<jaawerth>	ultimately it's the same as using a file system but with more flexible indexing
<Aria>	Hehe. I have git for that.
<lucidz2>	there will be no searching in the files
<Aria>	But yeah, no indexes.
<lucidz2>	thats all done in solr
<jaawerth>	oh
<jaawerth>	well if you have solr then I probably wouldn't bother
<lucidz2>	yeah
<lucidz2>	just leave them in filesystem/
<jaawerth>	or I'd go the db-for-metadata, filenames-as-unique-scrambled-strings
<moleWork>	backing up a db with blobs isn't super fun all the time
<jaawerth>	but then you're basically implementing a CMS, in which case I'd just use a CMS
<lucidz2>	yeah we dont want any cms
<lucidz2>	these will be static files
<bradleymeck>	love me fs dbs but I also do static views rather than on the fly
<jaawerth>	personally I find CouchDB great for this kind of thing though
<moleWork>	however when the db gets disconnected from the filesystem you need to reconnect them so that's confusing... two things to backup
<jaawerth>	this is true
<jaawerth>	I deal with this a lot with Alfresco, it's a pain
<lucidz2>	they represent pages of a book and the books dont change and they dont add them often
<lucidz2>	they have a few epubs which we are extracting into htmls
<jaawerth>	if it's static or semi-static, then yeah, I'd say definitely not mongodb
<lucidz2>	ok
<lucidz2>	well cool guys. thanks
<jaawerth>	maybe couch though
<lucidz2>	it just felt dirty
<lucidz2>	because i've not done filesystem access from an api in years
<jaawerth>	if you think you might have to replicate at some point, or add better querying capabilities, I'd use couch (which is cleaner than mongo, plus the "eventually consistency" of its clustering is better-suited for less frequent updates than mongo's approach)
<lucidz2>	i see. well we already have mongo, for other aspects of the system as part of this api
<jaawerth>	ah
<lucidz2>	so it would have probably been mongo, or fs as our options
<jaawerth>	hmm
<lucidz2>	this isn't a very high load system
<lucidz2>	and we'll put caching middleware in
<joepie91>	lucidz2: obligatory http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/
<joepie91>	:P
<lucidz2>	hey i love postgres
<lucidz2>	used it at my last gig
<lucidz2>	relational + doc storage
<lucidz2>	love it
<jaawerth>	postgres is bestgres
<lucidz2>	haha
<joepie91>	lol
<bangdollar>	ist it bad to get your todo list of code changes by grepping the codebase for a unique 'todo' flagged comment? :P
*	Sorella hopes you're not using Mongo in a distributed configuration D:
<bangdollar>	s/ist/is
<joepie91>	bangdollar: nope, that's exactly what I do
<jaawerth>	I don't like using mongo for much of anything, haha
<joepie91>	FIXME for stuff that needs to be fixed before release
<cjohnson>	Aria: got any suggestions for a better way to get ctag support for JS in vim?
<bangdollar>	nice, so im not alone! :)
<joepie91>	TODO for stuff that needs to be fixed at some point in the near future
<lucidz2>	there wont be anything distributed here
<cjohnson>	jsctags doesn't even seem to work that great, most files it doesn't even give me any output
<joepie91>	bangdollar: there's even a Brackets extension for it ;)
<Sorella>	lucidz2: less worse then :P
<jaawerth>	I try to keep a centralized TODO list but I'll add a TODO into code on the fly as a reminder
<lucidz2>	its like 10 books, and probably less than a million visitors per month
<bangdollar>	i like to to use '!TODO!:'
<joepie91>	yeah, same
<jaawerth>	and then, yeah, grep for it
<bangdollar>	for stuff i want to implement
<joepie91>	I have both centralized list and inline
<lucidz2>	the searchability in solr is where all the functionality lives
<joepie91>	# FIXME:
<jaawerth>	that should be part of jsdoc
<bangdollar>	nice
<Sorella>	(Though Mongo might even manage to lose your data in a single-node configuration :P)
<jaawerth>	some of the docs comment systems must have a tag for that
<joepie91>	Sorella: we've found something mongodb is good at!
<joepie91>	losting data!
<joepie91>	losing *
<joepie91>	:P
<Sorella>	joepie91: :P
<jaawerth>	yep, it all comes down to "mongodb is great if you don't care about your data"
<Aria>	Oh goodness, cjohnson. This seems really poorly maintained.
<Sorella>	It's very good at that indeed
<Aria>	Still using really old constructs.
<bangdollar>	it would be kind of cool to have a standardized code comment format. lets write an rfc! :)
<joepie91>	jaawerth: at which point you are using a database because...? :P
<bangdollar>	i mean for code reminders/plans
<jaawerth>	thatsthejoke.jpg
<Sorella>	joepie91: well, I don't mind losing data in Redis :P
<joepie91>	bangdollar: to then have thousands of people claim to implement "the RFC" except all their implementations STILL  slightly vary in ways undefined by the RFC
<bangdollar>	lol jplock
<joepie91>	so you end up with the same scenario, except now people claim it's consistent
<bangdollar>	erm joepie91
<joepie91>	\o/
<joepie91>	see also: IRC
<bangdollar>	so true
<Sorella>	It might be annoying to the user, and make things run slower, but it's not the end of the world
<uptownhr>	is there a more popular orm than mongoose for mongodb?
<Aria>	cjohnson: jsctags is from 2012. And barely worked then, it seems like. Have you tried taginator or jstags? (jstags is othiym23's, and so likely to work)
<Sorella>	(unless you store important things in Redis, at which point I must really question your tech decisions)
<myndzi>	irc doesn't actually vary much at all and is pretty well defined too
<joepie91>	bangdollar: this is basically literally the IRC RFC I just described
<joepie91>	:P
<bangdollar>	joepie91, funny you say that. ive been digging through the irc rfcs the past few doing stuff with my bot. just added a toggle for viewRawServerMsgs :)
<myndzi>	the variance you refer to is more like 'extensions' or 'additions' ;)
<joepie91>	bangdollar: keep in mind that IRC wasn't designed
<othiym23>	Aria: jstags is unfinished and my shame :(
<bangdollar>	as i was going through them, i was realizing how much fun stuff you could probably do
<joepie91>	it was codified
<myndzi>	^
<joepie91>	according to the implementations at the time
<jaawerth>	it was grown in a vat
<joepie91>	and even after that, it STILL diverted a lot from the spec
<joepie91>	in many implementations
<othiym23>	I should really finish it one of these days
<bangdollar>	yeah
<myndzi>	funfacts: ~ was supposed to be allowed in nicks as capital `
<joepie91>	so I joke about your TODO RFC suggestion, but it already happened with IRC :D
<myndzi>	but someone forgot it when they wrote the rfc
<othiym23>	in my copious free time
<joepie91>	lol myndzi
<jaawerth>	what I want is an XMPP that doesn't rely on XML but XMPP is kinda dead :-\
<joepie91>	jaawerth: XMPP isn't dead, tbh
<joepie91>	just... moved
<bangdollar>	as an example, i was imagining what would happen if you sent a raw server response to a client that doesnt validate source
<joepie91>	ejabberd is absolutely dead
<myndzi>	the only irc implementation that is significantly borked/incompatible with RFC1459 is twitch :P
<joepie91>	but look at eg. prosody and lots of stuff is still going on
<jaawerth>	to..? seems like it's gone mostly private at this point, even if a lot of the private solutiosn are hreavily XMPP-based
<joepie91>	mobile XMPP specs are being worked on
<jaawerth>	by whom?
<joepie91>	jaawerth: different set of people
<myndzi>	but twitch is SO far off from IRC it may as well be its own protocol
<joepie91>	jaawerth: see the names on the recent XEPs :)
<jaawerth>	is it a standard?
<joepie91>	it largely revolves around Prosody, it seems
<joepie91>	will be, yes
<joepie91>	a XEP
<jaawerth>	I love prosody
<joepie91>	ie. XMPP extension standards
<myndzi>	or rather, it implements like 5% of irc and then reimplements functionality arbitrarily in other ways rather than using the structure IRC already provides
<cjohnson>	Aria: Investigating, thanks. when I run "jstags file.js" it just gives me the same output as "jstags" no args: http://pastie.org/10185124
<joepie91>	jaawerth: basically, if something is happening around XMPP, the person responsible can *probably* be found in the Prosody MUC
<cjohnson>	I'll try taginator
<joepie91>	:P
<jaawerth>	joepie91: how widely adopted is it though?
<jaawerth>	joepie91: that strikes me as pretty dead ;(
<joepie91>	jaawerth: it's still in progress afaik, so currently zero
<joepie91>	nah
<joepie91>	XMPP has been slowly developed for most of its lifetime
<joepie91>	it was mostly PR peaks
<Aria>	cjohnson: I think you have to give it file.js, not dir
<joepie91>	eg. when gtalk started using it
<joepie91>	XMPP is just one of those things that... exists
<joepie91>	and people just keep working on it
<jaawerth>	heh
<jaawerth>	fair enough
<joepie91>	but it doesn't really pop to the foreground very often
<cjohnson>	Aria: I did, scroll right. view.js
<cjohnson>	not sure what the output that I'm getting means
<Aria>	Oh, I see. Heh.
<joepie91>	jaawerth: ref also http://op-co.de/blog/posts/mobile_xmpp_in_2014/
<joepie91>	jaawerth: but some things have changed since that post
<Aria>	That's the empty output
<jaawerth>	nice
<myndzi>	oh god it's another protocol based on xml
<myndzi>	why do people do that :( it makes me sad
<jaawerth>	joepie91: even that link calls it a "still sad" state of affairs though
<cjohnson>	yeah. alright I'll try taginator
<joepie91>	jaawerth: yes, because it is :)
<joepie91>	well, was
<joepie91>	it's getting better
<joepie91>	myndzi: XMPP you mean?
<myndzi>	yes
<joepie91>	another? :P
<joepie91>	it's one that has been around for very very long
<joepie91>	heh
<joepie91>	but yeah, unfortunately it's XML
<myndzi>	"another" doesn't imply ordering
<joepie91>	the XEPs are mostly doable but the core spec is just "wat"
<myndzi>	the only one i could think of at the time was SOAP
<joepie91>	and too much jargon is used
<jaawerth>	yeah XMPP has been around forever. the reason this conversation came up was me whining about there not being a descendant based on a non-XML format, actually
<myndzi>	which is also an abomination :P
<joepie91>	jaawerth: heh
<cjohnson>	looks like taginator just uses jsctags which appears to suck :P
<jaawerth>	well, XMPP is a bit soapy
<jaawerth>	that's part of the reason it's taken so long to replace the XML bit I think. One thing SOAP is good at is bundling behavior information with the data
<jaawerth>	and JSON doesn't have as much utility for that as XML, sadly
<myndzi>	care to explain?
<joepie91>	jaawerth: 6 years later and I'm still on the fence as to whether that is a bug or a feature :)
<cjohnson>	Oh well, no js tag goodness for me :(
<jaawerth>	joepie91: true enough
<Aria>	Hrm.
<jaawerth>	myndzi: well, the main selling point of SOAP is that it has an industry standard way of specifying the data structure. You do a SOAP call, and you have a unified way to get metadata on how to parse the payload you're getting
<jaawerth>	myndzi: mainly, XML just has more ways of encoding information (attributes on the tags and the like)
*	lucidz2 is now known as lucidz
<jaawerth>	it's doable with JSON but you'd have to put more into standardizing what sort of property that would go on and where it would live
<jaawerth>	and your range of options for encoding it is more limited
<jaawerth>	it's not technically impossible, but then, I've never tried it
<myndzi>	metadata on how to parse the payload?
<myndzi>	don't you have to have an understanding of the payload to get any use out of an api call anyway?
<jaawerth>	SOAP bridges that gap to an extent
<jaawerth>	that's part of why it's used so much in enterprisey interoperation stuff
<jaawerth>	a good example of an attempt to duplicate this kind of thing in JSON is the CMIS protocol, which is based on XML/SOAPy stuff but also has a JSON-based "browser binding"
<ljharb>	https://web.archive.org/web/20130708174927/http://stopsoap.com/
<jaawerth>	it's.. super messy
<jaawerth>	but then, that's probably more because it's an adaptation of an existing SOAP spec
<myndzi>	what i mean is
<myndzi>	if you are calling an api method
<myndzi>	to get something done
<myndzi>	and do something with the result
<myndzi>	you kind of have to know what you're dealing with in the result
<myndzi>	otherwise the thing you are doing can't do its job
<myndzi>	i can see some utility in self-documentation, i guess, in the ability to like, look at a message and see what's going on (this isn't actually useful in practice in some or many cases; the soap apis i've dealt with basically jsut wrap everything in useless tags)
<jaawerth>	right. but one of the things about SOAP is that it allows you to encode some of that information in the payload. You can go in with a general sense of the data you're interacting with, know how to parse the "how to work with this payload" info, and extrapolate that to a TON of processing possibilities
<myndzi>	but since you have to generate soap calls to look at the messages to interpret the "documentation", it seems like just having documentation is more useful
<jaawerth>	take CMIS for example. You're accessing files/data in a content management system. The CMIS protocol tells you not only information about contents, but information about what the resository can do, how custom attributes map to built-in CMIS standard information, etc
<jaawerth>	as a result, you can use CMIS to access a foreign CMS and work with it without knowing anything about the capabilities of the foreign CMS beyond "it supports CMIS"
<jaawerth>	(again, CMIS just being an example, one I'm using because I've had to work with it a lot lately)
<bangdollar>	i just found a minor information leak bug in inspircd that a friend runs
<myndzi>	dunno what cmis is, would have to look into it, but i guess you're talking about things like "this is the name of the post, and it is a string"?
<bangdollar>	it includes hidden channels in the report of channels formed that it announces to all clients
<Aria>	Wow, cjohnson. These tools are all terrible.
<bangdollar>	but if you /list they arent there
<cjohnson>	Aria: haha, I know. I was unde the impression JS inside vim wasn't too bad
<jaawerth>	myndzi: more "this is a listing of repositories and what htey can do", "okay here is a list of nodes/folders/files in a given node/folder of the repository, here are the features enabled for them, here are the actions you can take with them with your ACLs", and the ACLs themselves come from payload info about the repository: "here are the ACLs, and how custom ones map to the built-in ones"
<Aria>	cjohnson: It's not, but I've never really wanted tags ;-)
<myndzi>	the combination of dccallow and watch on dalnet allowed you to track nick changes for users who you shared no channels with ;)
<cjohnson>	I can't even get one ctags generator to output any relevant tags
<cjohnson>	well beyond tags what else could there be? syntax highlighting
<jaawerth>	nothing you can't do with JSON, and they've implemented it with JSON, but the actual grabbing and parsing that information is a more limited with the JSON version
<cjohnson>	the rest is language-agnostic vim stuff
<myndzi>	jaawerth: understood, just trying to wrap my head around the meaningful differences :)
<cjohnson>	being able to quickly browse all the functions and variables in a file and jump to their uses and definitions is pretty sweet
<bangdollar>	haha myndzi  nice
<Aria>	cjohnson: have you tried exhuberant ctags?
<jaawerth>	mainly I think someoen just needs to encode a standard for doing that stuff with JSON, but it needs to be universal. They SORTA managed to do that with SOAP, which is why it' still in use in a lot of enterprise stuff
<cjohnson>	yeah that's what taginator was calling
<jaawerth>	which is too bad because actually using it is painful as hell
<cjohnson>	exact same output as jstags -- the 5 line header, and nothing underneath
<cjohnson>	my whole file is wrapped in an iife and that seems to throw it off
<jaawerth>	ljharb: haha, love that link
<ljharb>	:-D
<jaawerth>	still, trying to encode all that information with just JSON is a puzzle
<Aria>	Oh, that may well, cjohnson.
<ljharb>	the solution to the puzzle is, come up with a simpler smaller way of encoding your information ;-)
<Aria>	Like ... it's hard for it to follow what's a local vs global identifier for something
<jaawerth>	right, but that makes it less generalized
<ljharb>	right
<ljharb>	like, more suited to the problem at hand
<cjohnson>	yeah. Just a shame because that pretty much rules out most of my files. Oh well, thanks for your help Aria
<jaawerth>	right, but also less universal
<cjohnson>	fortunately tagbar works well with my PHP files which is where I tend to need it more
<ljharb>	that's a good thing.
<Aria>	cjohnson: Yeah. Sorry :/
<ljharb>	"write once, run anywhere" was a miserable failure
<jaawerth>	there's still a huge need for it for certain use-cases
<Aria>	I found my best bet was stupid token-based tagging.
<jaawerth>	particularly interopability
<Aria>	like "what other files have this token" and no more
<jaawerth>	which, bringing it back to XMPP, is what you need
<jaawerth>	a generalized spec for encoding realtime messaging
<jaawerth>	again, I'm not saying I LIKE it, but in certain realms it's a necessary evil
<Aria>	json-rpc ;-)
<Aria>	Also swagger etc
<jaawerth>	yeah, that's some neat stuff actually
<myndzi>	swagger is based on json-schema which is its own brand of mess :(
<bangdollar>	imho, protocol-style message passing should use a format where the encoding is as minimal as possible and any readers must simply use interpreters (following spec). this is why json is pretty damn near perfect for that.
<ljharb>	jaawerth: any of those use cases not "we've got legacy baggage to deal with"?
<bangdollar>	its easy for humans to manually edit and read, if familiar with spec, due to the nested nature of the structuring. nesting and structure along with data can give enormous context to function
<jaawerth>	ljharb: well, the CMIS example isn't just legacy baggage, it's "so you can write software that interacts with any CMS/document store, or so we can plug one store into the other", in the case of XMP it's "we need a universal messaging framework that can deliver ANY sort of payload"
<jaawerth>	I mean, I suppose there's always SMTP ;-)
<jaawerth>	but that aint realtime
<Aria>	No reason it can't be ;-)
<jaawerth>	but SMTP is kinda messy too. The only real selling point for it is it's already a stable standard because it's so old
<bangdollar>	smtp is kinda wonky, in function, imo
<Aria>	Mmm. I do like the tweaks LMTP introduced.
<Aria>	I wish they hadn't marked the spec as "local on;y!!!!!" because there's no reason the changes couldn't have been global.
<bangdollar>	haha
<jaawerth>	and ideally you'd awnt such things to be based on something a browser is good at consuming
<jaawerth>	and/or producing
<bangdollar>	yep
<jaawerth>	which brings us back to: JSON is simply going to be more limited there, and it's more work to put that kind of universal spec together for json
<bangdollar>	why do you say that?
<bangdollar>	o wait, youre talking about a particular implementation for a message passing system arent you?
<Aria>	Orthogonal extensibility is Hard.
<tristanp>	So has anyone run into trouble with their PhantomJS not starting correctly the first time and getting an error message like: PhantomJS have not captured in 60000 ms, killing.
<jaawerth>	yeah, it's tough
<tristanp>	I googled for this error message and there's a clutch of people having the problem in late 2013, but it seemed to be resolved for most of them by backgrading node to like 10.7 or something
<jaawerth>	the selling point with JSON is you can annotate data encoded in the tags (which in this case are sort of analogous to JSON object properties/array elements) with attribute info + more
<tristanp>	not an option at this point for me
<jaawerth>	er, selling point with XML*
<jaawerth>	granted that makes it horrible to read
<jaawerth>	and you can't parse it easily from JS/a browser
<Aria>	tristanp: that's not really a node thing is it? phantom is its own runtime.
<jaawerth>	but JSON has no equivalent
<bangdollar>	i hate xml's verbosity
<jaawerth>	you'd basically need to add a bunch of reserved words to the JSON properties specifically for encoding the metadata
<bangdollar>	its bloated and dumb
<tristanp>	Aria: yeah, i wouldn't have expected it to be a node thing, just relaying the fact that all the discussion in 2013 seemed to agree that backgrading node sort of fixed it. but this is 2 years later and my node, npm and karma are all much advanced from that time
<bangdollar>	its all about interpreters. json should be simple and clean, imo
<Aria>	new DOMParser().parseFromString(xml, 'application/xml')
<Aria>	FYP
<Aria>	er. FYI
*	lance|afk is now known as lanceball
<jaawerth>	bangdollar: I agree, but that still leaves it limited in its capabilities when it comes to encoding "how to consume this" info with your data payload
*	danmactough is now known as danmactough_
<bangdollar>	no, the how to consume this part should be a spec
<bangdollar>	that the json data follows if it is to be consumed
<bangdollar>	no need to annotate the data further
<jaawerth>	I feel like I'm getting cyclical, but that's again why SOAPy stuff is still often used sometimes
<bangdollar>	use an interpreter
<jaawerth>	because there are some use-cases where you need a universal spec that lets you extrapolate to system-specific information without necessarily knowing it going in
<jaawerth>	that's pretty necessary with XMPP
<bangdollar>	why not add an interpreter wedge and your done?
<Aria>	Semi-self-describing.
<bangdollar>	good json is self-describing, imo
<tristanp>	Aria: also, the discussion revealed it's not that phantomjs is failing to start up, it's that karma or node or whatever is failing to "capture" it.
<Aria>	Interesting. Using current versions?
<tristanp>	And after 60 seconds it will give up and "try again" and immediately it works 100% of the time
<Aria>	bangdollar: And orthogonally extensible? Or just reasonably sensible to a human reading it?
<tristanp>	also I can navigate to localhost:9876 during that 60 seconds and it sort of prods it into working as a matter of fact
<Aria>	(my favorite way to add orthogonal extensibility to json is to go semantic web on it and identify properties with urls)
<bangdollar>	data should just be data, in a structure, imo
<bangdollar>	data / code separation
<bangdollar>	if you need data to describe data, add another structure and link or embed
<jaawerth>	but then you're back to encoding specific consumption for each API
<bangdollar>	thats life
<bangdollar>	imo, thats how it should be. and the encoding/interpreter should be standardized
<jaawerth>	well, one of the powerful things about XMPP (to use our main example again) is that you can send ANYTHING on the payload
<Aria>	Yeah. It's not quite a layered protocol. But close.
<bangdollar>	but xml is yeck
<jaawerth>	so, for example, you can use any XMPP server to do video chat regardless of what sort of codecs are in use, without having to build any video management into the server itself
<jaawerth>	bangdollar: yeah, that's the conundrum that brought this up ;-)
<bangdollar>	:)
*	bangdollar being cyclical
<jaawerth>	but the benefit is: now you can have two people on two different jabber servers (connected vi a bridge) video conferencing together
<Aria>	So what we'd need is a JSON transport format.
<bangdollar>	yep
<jaawerth>	or you can use it to send files back and forth, or log data, or..
<jaawerth>	but yeah
<jaawerth>	that's exactly what we need
<bangdollar>	if you make json transort
<bangdollar>	make it wildly reusable
<jaawerth>	and supposedly it's in the works, but the limitations on JSON mean it's a lot of work, and you have to do more standardizing, add more reserved words, etc
<computerperson>	joepie91: worked. thanks. love it.
<Aria>	Yeah, or define a wrapping format -- where certain regions are reserved.
<jaawerth>	yep
<mihok>	does anyone know if the winston logging module has support for systemd/journald ?
<jaawerth>	mihok: I think node-systemd has a winston plugin/transport as part of the package
<mihok>	jaawerth, thanks ill have a look at that one
<jaawerth>	(<3 <3 winston)
<joepie91>	computerperson: :D
<jaawerth>	winston is in many ways the way a logging system SHOULD be built
<joepie91>	jaawerth: I feel like SOAP lives in the same category as COBOL
<joepie91>	"it seemed like a good idea at the time"
<mihok>	bah fails to build -_-
<jaawerth>	joepie91: haha yeah, it's one of those things where you can see exactly why it exists and the problems it solves but it turned into a horrible monster
<joepie91>	yep :P
<jaawerth>	but on paper I'm sure it looked great at first
<joepie91>	jaawerth: you should have a look at the UK public transport data some time
<HardeL>	joepie: Thats why they are using oData with REST :s
<bangdollar>	yeah, there are some very smart people working on data transport
*	T_Rex_ is now known as T_Rex
<joepie91>	jaawerth: http://www.naptan.org.uk/schema/2.5/doc/NaPTANSchemaGuide-2.5-v0.67.pdf
<joepie91>	schema guide
<joepie91>	237 pages
<jaawerth>	lol
<jaawerth>	Aria: incidentally, the use of wrappers/reserved sections is pretty much how they got a working spec for CMIS over JSON
*	qbit is now known as Guest90427
<Aria>	Yep. It's the right approach for JSON
<Razerglass>	if i setup a index.html and successfully got my button clicks registering in my global.js middleman file, how do i use cheerio on my html page?  "Uncaught ReferenceError: $ is not defined"
<Aria>	The other is mixing in namespaced properties, but ewww
<jaawerth>	still a mess, but a manageable mess
<jaawerth>	too tied to PHP-style requests + formdata for the actual request API though
<jaawerth>	(CMIS browser spec, that is)
<jaawerth>	was NOT made with SPAs or node gateways in mind
*	Guest90427 is now known as qbit
<myndzi>	Razerglass: i think you may be confused
<myndzi>	cheerio is not for use on web pages
<Razerglass>	no this is my own index.html
<myndzi>	you might be looking for jquery
<Razerglass>	with express
<Razerglass>	i want do grab a element/ input field from my html
<Razerglass>	and have it inside my global.js, what do i need?
<myndzi>	elaborate
<Razerglass>	document.getElementById("Url").addEventListener("click", function(){
<Razerglass>	  var input = $('#inputUrl').val();
<Razerglass>	});
<myndzi>	right, so
<Razerglass>	that tells me $ is not defined, do i need to include cheerio
<myndzi>	no
<Razerglass>	how do i load my own html :o
<myndzi>	do you want the value of an input box when someone types in it in a browser?
<Razerglass>	yup
<myndzi>	then you want jquery
<myndzi>	cheerio is not for dom manipulation
<Razerglass>	ok so this is actual jquery i need
<myndzi>	rather, it's not for dom manipulation within a browser
<myndzi>	cheerio is for "pretending to kind of be a browser, just enough to get certain things done" when you're not in a browser
<Razerglass>	ok so for my front end i will need to use jquery and cheerio for backend things
<myndzi>	jquery is for "actually interacting with the loaded-in-memory representation of your web page in a browser"
*	nathan7_ is now known as nathan7
<myndzi>	you probably don't need cheerio on the backend either
<joepie91>	Razerglass: in a typical implementation, you don't need cheerio /at all/
<joepie91>	typical project *
<Razerglass>	ok how do i get jquery?
<myndzi>	i imagine anything you would be doing on the backend that you would try to do dom manipulation with, you are doing wrong
<Razerglass>	is it just a <script> in my html
<myndzi>	yep
<myndzi>	you probably can just reference a CDN with jquery
<myndzi>	https://code.jquery.com/
<Razerglass>	ok yeah, and how do i call the jquery in my global.js?
<Razerglass>	will my doller sign magijcally work
<myndzi>	is global.js in the client or in node?
<Razerglass>	its in my node
<Razerglass>	i include it in my html
<myndzi>	you don't include jquery in node
*	danmactough_ is now known as danmactough
<joepie91>	Razerglass: what does global.js contain/do?
<Razerglass>	its where i am setting up my listeners for button clicks, and then the functions those buttons will activate
<joepie91>	Razerglass: that is client-side, not server-side
<Razerglass>	sorry
<joepie91>	Razerglass: also, what kind of thing do the buttons do?
<myndzi>	i think we need to take a step back and explain the difference between server side and client side to razer
<moleWork>	had no idea this existed: https://github.com/Microsoft/node/blob/ch0.12.2/README.md#windows_with_chakra
<myndzi>	and why the line can seem blurred in node since they both involve JS :P
<Razerglass>	well im learning right now, i mean my button is console logging in the client right now, now im trying to console log out from a input field with my button clicked
<Razerglass>	when trying to pull my input field is where i ran into problems
<joepie91>	moleWork: Microsoft/node : forked from joyent/node
<myndzi>	Razerglass: so, there's code you write in node, that runs on your server. some of that code, say, express, sends files to web browsers that ask to view your page
<joepie91>	didn't see that coming
<joepie91>	:P
<moleWork>	no kidding
<myndzi>	those files don't run in node
<myndzi>	and they don't interact with node
<myndzi>	you cannot get the content of an editbox from a browser in code that's running in node
<DarkElement>	Hey guys having trouble receiving input from a websocket, getting ENOTFOUND with this code: http://paste.pound-python.org/show/zBXVbeSSZIsQLMR2xZ4Y/
<DarkElement>	Any ideas
<myndzi>	you can write javascript that runs in the browser, and you can write javascript that runs on your server, but they don't exist in the same conceptual space or talk to each other unless you make them
<joepie91>	DarkElement: stacktrace?
<joepie91>	wait
<myndzi>	so firstly you need to think about what you're trying to do and realize where the separation lies
<myndzi>	the problem you are having probably relates to that
<joepie91>	DarkElement: why are you specifying a remote websockets URL? you're creating a server
<joepie91>	not a client
<DarkElement>	joepie91, I'm trying to connect to and console.log the info from the server
<DarkElement>	Oh
<DarkElement>	Sorry I'm new to nodejs
<Spajk>	Hey, guys, I am kinda new
<joepie91>	DarkElement: this is not specific to node.js :)
<joepie91>	DarkElement: Reddit runs a server, you should create a client to connect to it
<joepie91>	that's generic server/client networking stuff
<DarkElement>	That's what i'm trying to do. I've done it in other ways, just not locally with node.js
<myndzi>	(multiple convos going at once..)
<DarkElement>	Done it on html with nodejs, with python-websocket, and with phantomjs
<DarkElement>	just not this
<Razerglass>	nice guys i included my jquery and poof that $ sign started doing what i needed it to do
<myndzi>	Razerglass: so in short, if some information is present in the browser, and you need to get that information to the server, you're going to have to do something extra
<Spajk>	I am working on a small script and I have a problem. I have a vm which runs some code and it generates an output which gets returned to the main script. Problem is when this vm needs to execute some async code ( mysql query lets say )
<DarkElement>	joepie91, what should I do to connect to that wss you see in my code?
<Razerglass>	myndzi ive used socket.io to send my objects and strings to and from the global.js and server.js before
<myndzi>	you can use ajax (jquery $.get $.post and so on) or socket.io to help with that
<joepie91>	DarkElement: creating a client insde of a server :)
<ljharb>	DarkElement / Spajk / Razerglass: just a heads up, there's not all guys in here - please try to address the channel with genderless terms
<Razerglass>	that part is easy its the jquery im new too
<joepie91>	DarkElement: see the ws docs
<myndzi>	Razerglass: okay, that's a start
<Spajk>	Sorry bout that
<ljharb>	np
<DarkElement>	joepie91, I was looking through the readme of the nodejs-websocket github, however I couldnt find what I was looking for.
<DarkElement>	Which docs
<Razerglass>	already looking into the codeacademy jq, good stuff. thanks for leading me in the right direction
<DarkElement>	ljharb, apologies
<joepie91>	DarkElement: ah. you're using a different module
<joepie91>	DarkElement: https://www.npmjs.com/package/ws
<DarkElement>	Yea i just found what you are referring to
<DarkElement>	This is much better, :D
*	danmactough is now known as danmactough_
<Zlepper>	If a user navigates around on a site that is running node.js is there anyway to have a variable set for that specific user serverside, that is remembered when he navigates around?
<DarkElement>	joepie91, Thanks m8
<joepie91>	yw
<joepie91>	Zlepper: yes, with sessions, but it's not foolproof. are you using express?
<Zlepper>	joepie91: Yes
<joepie91>	Zlepper: express-session does what you want, but keep in mind that sessions rely on client-side cookies
<joepie91>	that means it will not protect you against people pretending to be more than one person, for example
<joepie91>	they can just clear their cookies and remove the association
<Zlepper>	It's for a very simple login system, though i'm considering using passport instead since it can do everything
<joepie91>	sessions are commonly used for logins, yes :)
*	toddself is now known as toddself_zz
<jaawerth>	I don't like using sessions, but cookies are still the sometimes the best way to save a token
<breakingthings>	sessions aren't webscale enough
<breakingthings>	:V
<breakingthings>	gotta get that webscale
<Spajk>	I have a problem related to vm's and async code, I'd appreciate any help I can get. More details here: http://pastebin.com/xV6fX4Dr
<moleWork>	the 'GET' problem exists without using cookies,... to access a password protected url without signing it first requires the use of cookies
<breakingthings>	mangodeebee
<jaawerth>	moleWork: you can still provide a token as a query param
<jaawerth>	it's messy, but it works
<moleWork>	yeah that's what i mean by 'without signing the url'
<jaawerth>	TECHNICALLY you can even send a body with a GET request, it's just kind a no-no
<jaawerth>	but you can totally do it
<moleWork>	and the browser won't 'do it for you if you browse it
<honestemu>	I want to create an application that listens for webhooks and does something with the information in that webhook. What node modules do you recommend?
<Aria>	And some servers hang up on you if you do
<Aria>	As a recent bug in the http agent showed.
<jaawerth>	yeah, you pretty much need an API built for doing that if that's what you want. and you probably need to be using a SPA
<breakingthings>	jaawerth: You can? Is it just that most servers discard/ignore it?
<jaawerth>	breakingthings: yep
<jaawerth>	breakingthings: and I think some frameworks' AJAX utilities may strip the body in some way
<breakingthings>	Interesting. I always kind of thought the browser would be like "literally what are you trying to do, no"
<jaawerth>	nope, I've done it before just to see if I could ;-)
<breakingthings>	TIL
<breakingthings>	thanks for entertaining my curiosity
<jaawerth>	haha no problem
<jaawerth>	that's my kinda curiosity too, or I never would have tried it just for the hell of it in the first place
<joepie91>	jaawerth: putting sessions/tokens in the URL is a really bad idea for anything in a browser
<jaawerth>	joepie91: the query param doesn't get passed as plaintext
<jaawerth>	joepie91: that is, if you're using SSL
<joepie91>	jaawerth: okay? not sure how that's a response to what I said :)
<jaawerth>	joepie91: what i mean is, it's possible to do it securely
<joepie91>	jaawerth: my argument wasn't about encryption...
<jaawerth>	what's your argument?
<jaawerth>	IMO it depends on whether that URL is ever going to be navigated to directly
<joepie91>	jaawerth: 1) possible info disclosure / session/token compromise for users copypasting URLs to third parties, 2) it completely screws up spiders, archiving tools, etc
<joepie91>	for... no gain that I can see
<jaawerth>	I agree even for an API it's probably better not to do it. But it CAN be done without causing issues
<joepie91>	jaawerth: see above - those are issues :)
<joepie91>	inherent to shoving tokens/sessions into the URKL
<joepie91>	URL *
<jaawerth>	well, I don't think the spiders/archiving tools is an issue if you're only doing that for API calls
<moleWork>	the only time i think it's okay is a temporary token to facilitate initiating a download
<jaawerth>	and the info disclosure issue is no worse than any other method if it's always going to be called via AJAX
<ian_mac>	do all browsers allow you to send a body with GET?
<jaawerth>	I'd never advocate doing it unless there was some reason you really really had to. But I myself am stuck workign with an API that does it this way
<joepie91>	jaawerth: right. I did mean stuff that users navigate to :)
<joepie91>	ian_mac: even if they do, don't
<jaawerth>	Oh. I thought I added a caveat that it'd pretty much have to be a SPA/AJAX situation
<joepie91>	if you need to use tokens or whatever, there's HTTP headers for that
<jaawerth>	yeah, http headers are better
<joepie91>	moleWork: "initiating a download"?
<moleWork>	yeah create a token that lasts 5 seconds so you can create the getrequest
<joepie91>	moleWork: why?
*	joepie91 can't stand non-wgettable downloads
<jaawerth>	it's useful for refresh tokens, I think
<moleWork>	well, i'm talking about for session spceific downloads
<moleWork>	i'm not sure how you would do a download in a token based system without a signed url?
<joepie91>	moleWork: I have no idea what kind of download you're even thinking of, tbh
<moleWork>	"download my invoice"
<ian_mac>	joepie91: I wasn't planning on doing so.  I was curious.  I work with an API from a fairly major vendor that has GET with a request BODY in a lot of its docs, but they have a Chrome plugin that uses POST instead claiming that browsers do not support GET requestes with bodies and that it will be sent via POST instead.
<joepie91>	moleWork: aha.
<joepie91>	moleWork: then just generate a token on the page that offers the invoice
<joepie91>	and use that as download URL
<moleWork>	yeah that's what i'm saying
<joepie91>	and expire token after X time
<moleWork>	yeah exactly.
<moleWork>	i think that's what i said
<joepie91>	no, you seemed to be suggesting an AJAX req or somesuch
<moleWork>	heh
<joepie91>	:p
<joepie91>	with the 5 sec expiry
<moleWork>	no no
<jaawerth>	right, there you'd want to use a query param
<joepie91>	expiry for an automatically generated token would look more like 30 mins
<moleWork>	just temporary security credentials to facilitate download
<jaawerth>	because you'd *want* it to be copy/pastable
<rik316>	Are there any rabbitmq / amqp mock libraries that are fully functional and receive regular maintainence?
<joepie91>	moleWork: my main point is that it should always be possible to visit the site without JS, right click download button, and paste into wget
<moleWork>	yeah you have to throw the temp token into redis or whatever
<moleWork>	well not realy
<moleWork>	it can be a two part that includes the expiry as part of the hash
<moleWork>	like a jwt or whatever
<jaawerth>	I still like using redis for that, though
<moleWork>	pain to have any state :(
<moleWork>	but redis does support TTL
*	toddself_zz is now known as toddself
<joepie91>	hey look, it's a community big data storage project: https://git-annex.branchable.com/design/iabackup/
<joepie91>	(sort of)
<Aria>	Heh.
<Aria>	Woo git-annex. But such a weird project
<zodiak>	hola everyone, been away for a bit, but is the best way to debug memory leaks in long running server processes still the usual 'dump heap and inspect' or is there any better way to track down leaks ?
<joepie91>	Aria: well, it's quite literally backing up the internet archive
<joepie91>	which, at 21PB, is not a trivial task :)
<joepie91>	esp taking into account redundancy requirements
<Aria>	I meant git-annex.
<Aria>	It's a bit weird.
<joepie91>	Aria: I believe their statement was quite literally "this kind of INTERNETARCHIVE.BAK project is *exactly* what git-annex exists for!"
<joepie91>	so I'd say it's about as weird as ia.bak :)
<joepie91>	Aria: but yeah, basically, git-annex seems relatively sane to me, compared to some of the other stuff I've worked with or built
<joepie91>	for example, take a script that adaptively bruteforces a search engine with resultcount restrictions
<joepie91>	to discover all items on a site
<Aria>	Yeah. I've used it. It's 6/10 awesome 3/10 strange and 1/10 what the hell language did you make this in again?!
<joepie91>	"adaptively" in the sense that it looks at the alphabetical order of results to determine whether any might be missing
<joepie91>	which is relatively insane
<joepie91>	hehe
<joepie91>	ahhh
<joepie91>	https://github.com/joepie91/webshots/blob/master/search.py
<joepie91>	my adaptive search bruteforcer :)
*	exec_s is now known as exec_off
<joepie91>	(the goal of which was to collect users for archival)
*	SN4T14_ is now known as SN4T14
<Sawbones>	Does anyone know why I'm suddenly getting 304 codes instead of 200 with my express project?
<MI6>	joyent/node: Julien Gilli refs/tags/jenkins-accept-pull-request-temp * ebfd9a7 : repl: make 'Unexpected token' errors recoverable - http://git.io/vUV9K
<MI6>	joyent/node: Julien Gilli refs/tags/jenkins-accept-commit-temp * 5732dab : repl: make 'Unexpected token' errors recoverable - http://git.io/vUV9d
<Sawbones>	It's weird, when I change my jade template it won't change even if I restart the server
<moleWork>	Sawbones, you could be using some caching middleware that's setting cache-control,... typically express by default uses etag caching which does an fs.stat on the file to calculate the etag
<joepie91>	Sawbones: I've noticed it not doing that when the env is production
<moleWork>	Sawbones, open developer tools and click 'disable cache' in chrome on the network tab and see what http headers are there
<joepie91>	in express-generator generated setup anyway
<moleWork>	Sawbones, it is quite possible you are simply modifying the wrong file in the wront path and tricking yourself into think you are modifying the file when youare not (if you aren't using http caching headers other than the default etag caching)
<Sawbones>	I disabled cache and now it's 200
<Sawbones>	weird
<Sawbones>	does 304 just means the response is cached?
<moleWork>	yeah so look at the http headers it returns
<moleWork>	yeah the browser says 304 meaning it didn't bother checking due to caching
<Sawbones>	oh ok, learn something new everyday
<moleWork>	well, maybe sorry, it should say 200 in the browser you would think when it's cached
<moleWork>	but chrome will "crash internally" and due random stuff somettimes
<moleWork>	closing your browser and restarting it should bring back expected behavior
<moleWork>	do
<Sawbones>	the browser returns 200
<Sawbones>	so all is good, thanks everyone
<moleWork>	i'm not sure if it's fixed but lol okay
<liranp>	Does anyone use the async/await functions?
<chiper>	emilyrose: *poke*
<moleWork>	they creepily remind me of c# and automatically miss the simplicity of es5
<moleWork>	make me miss
<Rantanen>	Huh? Is async/await already implemented somewhere?
<Aria>	In babel
<Rantanen>	Aw. Never liked transpiling stuff for Node :<
<Aria>	Nor I!
<Rantanen>	(Was kinda hopeful iojs would have been mad and gone for it already since it came up >.>)
<Sawbones>	It's a huge pain
<moleWork>	it's confusing it's just a wrapper around promises and still doesn't solve the problem of async errors
<Rantanen>	moleWork: Well... "promises are just a wrapper around callbacks" :)
<moleWork>	don't get me started
*	robertmaxrees is now known as robertLunch
<liranp>	Is it advisable to use transpiled code in production environment?
<Aria>	Works fine. Lots of people do it.
<Rantanen>	liranp: Why not?
<Rantanen>	Sure if you're pushing it to browsers ie. jspm, it's probably better to bundle it beforehand for performance reasons, but transpiling itself shouldn't really be an issue for production code.
*	eighty4 is now known as pokk
<liranp>	I don't know, this is why I'm asking... After all, this code might change in the future
<Rantanen>	(Unless you consider transpilation itself an issue for everything.:p)
<moleWork>	as long as the transpiler doesn't generate puke javascript then it's fine
<Sorella>	moleWork: why would you care what kind of code the compiler generates?
<moleWork>	if you are trying to debug a production environment it's nice to have readable javascript code
<Sorella>	moleWork: why? You shouldn't be looking at the generated JS code (unless you're trying to find a bug in the compiler, which should be the rare case)
<Sorella>	Just use source maps (or have your language implement a decent compiler for itself by generating debugging symbols in the JS — which is the approach I'm taking with Mermaid)
<Aria>	And assuming you have source maps that actually function.
<moleWork>	yeah if you always have the sources then you are fine
<liranp>	And how are you debugging the code in case of errors? after all, the actual code is not so clear as the "source" code
<Sorella>	liranp: source maps
<liranp>	Oh, you're right..
<Sorella>	I really dislike the idea of looking at "text" to figure out what's wrong with your program. Text doesn't give you all of the relevant information
<Sorella>	But then, no one has done Smalltalk-like VMs that you can run on Node yet
<Sorella>	(YET because that's one of the goals in Mermaid)
<moleWork>	i'd just hate to have to deal with heavily obfusated javascript in production especially when the stack traces you get will be from the transpiled code and not the sources
<Rantanen>	Huh.. What does mermaid have to do with node runtime?
<moleWork>	but imagine some people don't care
<Sorella>	Rantanen: it's an experiment in interactive programming that runs on top of Node, and you interact with that from a nw.js-based client.
<liranp>	So I guess that no one here was trying to use koajs with the async/await functions, right?
<ovef>	a recent project i've worked on was some 40,000 lines of coffeescript code with some fancy browserify transforms and custom template engine. even with caching enabled it was taking 6-7 secs to create debug code
<Sorella>	So, kind of like a modern-day Pharo that's not restricted to the a single graphical IDE
<Rantanen>	Sorella: Isn't it enough to just parse static text and output the picture?
<ovef>	and chrome devtools doesn't do well with coffeescript sourcemaps
<Sorella>	ovef: 40k lines of CoffeeScript. That must be painful :(
<ovef>	that was hell
<liranp>	lol
<Sorella>	Rantanen: no. When you run a stepping debugger, do you want to see the text, or how the data flows between the parts of your program?
<ovef>	transpilers are ok if you are writing tiny modules and stuff. but for big frontend projects, they really suck
<Sorella>	ovef: compilers are pretty okay for big projects. You just need a decent language with decent tooling
<Rantanen>	Sorella: If I want to generate a diagram, I don't think I could care less how the data flows - unless it breaks and I need to go debugging it. :)
<Sorella>	(And a decent incremental compiler, ofc)
<Sorella>	Rantanen: no one's talking about diagrams here :) (In fact, diagrams are usually not helfpul)
<Rantanen>	https://github.com/knsv/mermaid
<Rantanen>	Then what are YOU talking about? :)
<Rantanen>	If not Mermaid
<Sorella>	Rantanen: right, not the right mermaid :P https://github.com/mermaid-language/mermaid
<joepie91>	mermaids are plentiful
<Rantanen>	Because we need more things with same name in the same ecosystem. :)
<Sorella>	Rantanen: I wasn't aware of knsv/mermaid in 2013 :P
<Rantanen>	Sorella: Sorry beforehand!
<Rantanen>	Sorella: No one was aware of mermaid-language/mermaid in 2014? :)
<Sorella>	Rantanen: that's why naming is hard :)
<Rantanen>	(I'm just annoyed at the name conflicts..)
<Sorella>	There are worse things out there.
<Rantanen>	Node got "npm install vorbis" "npm install ogg" "npm install celt" "npm install wav"
<Rantanen>	But then the Opus codec is "npm install node-opus"
<Rantanen>	Because: https://www.npmjs.com/package/opus
<Sorella>	That's just because npm has a flat namespace
<moleWork>	yeah npm should have done what github and then docker did,... use namespaces for repos
<Sorella>	It's now introducing "scopes" I think?
<ljharb>	introduced.
<ljharb>	you can have scoped packages under your username for free
<Rantanen>	I'm not sure about that. When it works it's REALLY convenient to do just "npm install ogg vorbis" if you need to read ogg/vorbis stuff.
<moleWork>	cool
<ljharb>	if you pay the monthly fee, you can have them be private/access-controlled.
<Sorella>	ljharb: is it on the public repo already?
<Sorella>	public registry*
<ljharb>	it has been for a month i think
<moleWork>	so what you are saying is.... fork away?
<Sorella>	That's neat
<Rantanen>	Instead of having to figure out whose package it is before being able to install it.
<ljharb>	but to publish a public scoped package, you have to do `npm publish --access=public` or something similar
<ljharb>	ie, it's explicit
<moleWork>	still that's really _Awesome_
<moleWork>	now you can fork dead repos
<ljharb>	you could do that anyways.
<Sorella>	Rantanen: you always need to figure out which package you want before you install it.
<Sorella>	Rantanen: and npm doesn't help you with that
<ljharb>	but now you can do it without cluttering the public namespace, so that's nice.
<moleWork>	yeah but it gets confusing like unzip vs unzip2
<Rantanen>	Sorella: Who created mocha? gulp? express? grunt?
<moleWork>	yeah that's very good
<Sorella>	Rantanen: people
<Rantanen>	Sorella: It's easy to remember the package names but I really have no idea who they would be scoped under if everything was scoped by username.
<Sorella>	Rantanen: who says it has to be scoped under *usernames*?
<Rantanen>	So I'd need to look that up every time I install them - especially the ones I don't use for every project.
<ljharb>	that's how scopes work - npm usernames.
<ljharb>	eventually it will be "organizations" too tho. just like github.
<Sorella>	Rantanen: Maven actually got this right, and Leiningen/Clojars makes a better use of that
<ovef>	why not use github then?
<ovef>	as registry
<ljharb>	ovef: github is for dev. not distribution.
<joepie91>	ovef: please, no
<ovef>	component and duo work fine
<Rantanen>	Sorella: So you'd be going for functionality as well? 'codec/theora', 'codec/vorbis', etc?
<joepie91>	we don't need more dependency on a not even feature-complete repo host
<ljharb>	ovef: no, they don't.
<joepie91>	let's not centralize git more, please
<ovef>	how so
<Sorella>	Rantanen: they could be organised in any way people think makes the most sense.
<ljharb>	if you install my stuff with component, and i didn't explicitly make a component.json, you are utterly unsupported.
<ljharb>	component and bower are a glorified curl. they aren't package managers.
<ljharb>	use npm.
<Sorella>	Particularly, the major problem here is still discoverability. And flat namespaces, contrary to popular belief, don't actually help with that.
<ljharb>	not at all
<ovef>	what makes a package manager package manager?
<Aria>	Yeah. Not sure namespacing helps at all.
<ljharb>	whenever npm gets around to adding "collections", that will help with discovery a lot.
<ljharb>	basically manually curated lists of packages
<Sorella>	ljharb: what's "collections"?
<Sorella>	Oh, that's great!
<Rantanen>	ljharb: ... with aliases? *Hides*
<ljharb>	ie, you'll be able to look at raynos' "http framework" list, or my "shim" list, etc
<ljharb>	Rantanen: aliases?
<Rantanen>	Ah, nevermind.
<Aria>	That'd be delightful.
<Rantanen>	Was hoping it'd be somethign accessible through npm cli
<ljharb>	ovef: version management, an explicit registry, publishing, i dunno. bower/component aren't it.
<Sorella>	Rantanen: nothing really technically prevents that
<ljharb>	Rantanen: it very well might be
<ljharb>	this is something they've talked about, but was pushed back a bit due to private/scoped packages
<ljharb>	so, no clue on the timing
<Rantanen>	ljharb: Then aliases, such as: Say there's "codecs" collection, you could do "npm install codec:mp3" and get the mp3-codec package despite it being called 'lame'.
<Rantanen>	Although how that "npm install codec:mp3 --save" would work I've got no idea :)
<Sorella>	Rantanen: that's a search issue.
<ljharb>	Rantanen: yeah, that'd be problematic if i edited the collection.
<Aria>	Yeah.
<Sorella>	You should be able to discover the best mp3 codec regardless of its name
<Rantanen>	ljharb: It'd need to use the collection as an alias lookup and --save the original package.
<ljharb>	so "aliases" like that would only work if items in collections were never removable
<Sorella>	And that's one of the things npm doesn't help you with right now
<ljharb>	otherwise it'd break people if i removed something.
<Rantanen>	ljharb: Nah. Not if the actual thing going to package.json was 'lame'. It only using the collection to look that one up.
<ljharb>	Rantanen: `npm install` takes anything that goes in package.json tho.
<ljharb>	and vice versa.
<ljharb>	and that's not a relationship worth breaking.
<Sorella>	ljharb: did you see this btw? https://github.com/boennemann/semantic-release
<Rantanen>	ljharb: Well, we're talking about changes to npm so "npm install" going for npmjs.com, receiving redirect response and changing the reference to the actual package wouldn't be *that* big of a reach.
<ljharb>	um
<Sorella>	I'd like to see more of these things in the Node ecosystem. Less socially-enforced conventions, more mechanically-enforced conventions
<ljharb>	Rantanen: right but `npm install {anything}` not working with {anything} is in package.json is unreasonable.
<ljharb>	Sorella: how can it possibly know if it's breaking
<Sorella>	ljharb: social conventions :P
<Sorella>	(JS is not good for this)
<ljharb>	Sorella: no i mean, the automated one
<ljharb>	semantic-release
<Sorella>	That in particular uses your git commit data to decide which version it should publish as
<Sorella>	And you have to follow a particular set of conventions in your commit messages
<ljharb>	if it requires manual commit messages, then how is that any better then me doing it? because what if someone doesn't follow it
<Sorella>	ljharb: it breaks :D
<Sorella>	ljharb: but again, it's not as simple to do something like this for JS, as it is to do for e.g.: Elm or PureScript
<ljharb>	right, so it's just moving the failure from "a human didn't notice it at publish time" to "a human didn't notice it at commit time"
<ljharb>	interesting idea, but i'd never rely on that.
<ljharb>	(in JS)
<Sorella>	ljharb: yup. But it does take out some of the weight of choosing which version to publish as
<Sorella>	Which I think is the general idea?
<Carolin>	hey all
<ljharb>	Sorella: not at all - the person who adds the commit has to decide.
<Rantanen>	Sorella: Don't you still need to document that in the commit logs (speaking of JS)
<ljharb>	Sorella: and it's pretty simple for the publisher - "any breaks? major. no, but any additions? minor. else, patch"
<Sorella>	ljharb: they don't decide anything related to the version, just what they did for that particular commit
<Carolin>	Ive been using Numpy (in Python) to do some very quick calculations by keeping all my data stored in RAM (rather than HDD) and basically summing up certain rows/columns
<ljharb>	right, but that's how one decides when publishing. looking at the commits.
<Sorella>	ljharb: yeah, but then you need to look at the history of the project post-fact.
<Sorella>	It's usually not as fresh
<Carolin>	Now i have to make Numpy talk to Node.js to get an interface going - but since i just found out that JS now supports Typed arrays, i might dump Numpy/Python all together and just do all the number crunching - incredibly - in JavaScript
<Sorella>	(the changes)
<ljharb>	right but i shouldn't be publishing that rarely
<ljharb>	and if i don't understand what i'm publishing, i need to go to the commit author and verify
<ljharb>	*i should need to
<Carolin>	Can anyone see any problems with this? Is there any reason why single-threaded Python is going to be faster than a Node.js instance?
<ljharb>	Carolin: no
<Carolin>	ljharb: thats great! :)
<ljharb>	Carolin: also p sure node has had typed arrays for years
<ljharb>	it's just new in the ES6 spec.
<nak>	is there a way i can use fat arrow functions in node repl ?
<Carolin>	Ah, maybe so - but I only just found out about them :P
<GreenJello>	nak, npm i -g babel; and run babel-node instead of node
<Sorella>	Carolin: Numpy is a library of extremely optimised code for doing scientific calculations in Python. You don't have anything like that for Node. That's why Numpy is going to be faster
<Carolin>	ljharb: are there, erm, well known packages for accessing these arrays?
<Carolin>	Sorella: that was my worry
<ljharb>	Carolin: it's just built into the JS engine, you don't need packages
<Carolin>	but im only really doing 1 thing in Numpy, and thats .sum()
<nak>	GreenJello thx that's actually perfect
<moleWork>	Carolin, also javascript doesn't have a native decimal data type
<nak>	GreenJello i've been using babel and i love it
<ljharb>	right, JS only has double floating points
<Carolin>	moleWork: hm, good point good point
<saquibkh_>	Hi All
<Sorella>	TypedArrays are still not that great, and JS only has one numeric type (floating points of double precision), which makes all of these sorts of computations *slow*
<Carolin>	although floats are good enough for me
<nak>	GreenJello isn't there also something like `node --harmony` or somehting ?
<Carolin>	actually uint32 is good enough for me
<saquibkh_>	Any idea how to fix Multi-line strings are not allowed lint error?
<Sorella>	Carolin: you don't have ints in JS
<Carolin>	Oh, its all floats all the time?
<Carolin>	wow, why o_o
<Carolin>	Who would impliment floats before ints :P
<Sorella>	Carolin: yes. So all arithmetic computations have the overhead of dealing with floating points
<ljharb>	!numbers @ Carolin
<ecmabot>	Carolin: The Number type has exactly 2^64 − 2^53 + 3 values, representing the double-precision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 2^53 − 2 distinct “Not-a-Number” values of the IEEE Standard are represented as a single special NaN value. : http://www.2ality.com/2012/04/number-encoding.html
<Havvy>	Unless you `|0` after every computation, yes.
<ljharb>	even then, JS doesn't have ints.
<GreenJello>	nak, node --harmony is very limited and some things are just wrong
<ljharb>	in asm.js, |0 can indicate to the engine that it can optimize and treat it like an int tho.
<ljharb>	nak: don't use --harmony ever.
<Sorella>	Havvy: even so, that's only guaranteed if you're in ASM.js, and you wouldn't be writing that by hand
<ljharb>	nak: use --es-staging if you *must* use unreleased language features
<Sorella>	nak: or use iojs
<Sorella>	Which has a more up-to-date v8
<Carolin>	I think i should look at asm.js - my code isnt complex, but it does need to be quick and RAM-efficient
<Sorella>	Carolin: why do you want to write that in JS?
<GreenJello>	nak, e.g. arrow functions kinda work, but they don't follow the spec in 4 or 5 ways, depending on the v8 version
<Carolin>	So Typed arrays is really just for storing the data, but as soon as you pull it out it becomes a float8?
<Sorella>	Carolin: like, why not use C++ for this?
<GreenJello>	Carolin, double
<Sorella>	float64
<Carolin>	Sorella: because interfaces Python with JS sounds like more work than porting the code over
<Carolin>	Sorella: i cant program in C :(
*	[1]joe is now known as josaph
<Sorella>	Carolin: so, you're writing something in Node, and wants this number crunching thingie? I'd recommend writing it in C++.
<Carolin>	float 8 as in 8 bytes as in 64 bits :)
<Sorella>	Unless it's reasonable to be slow
<Carolin>	Speed is the only important thing, hehe
<ljharb>	Carolin: usually the numbers indicate bits, not bytes.
<Sorella>	Write it in C++ then
<Sorella>	That way you can make a native module, and require it from the JS side.
<Carolin>	Ok, thats probably good advice
<Carolin>	Is that... er.. .painless enough?
<Rantanen>	Carolin: It's not too hard.
<Sorella>	There IS some overhead from calling into C++, so you should put the whole operation there.
<Carolin>	Maybe i post the Python on some coder-for-hire site like elance and someone can port it over
<Carolin>	Sorella: i see
<Carolin>	Does it have to be ++ or will C be ok?
<Carolin>	I heard C is even quicker than C++
<Rantanen>	Sorella: That same overhead would be in JS to Python too.
<Sorella>	Rantanen: no, JS to Python would be more overhead
<saquibkh_>	Any idea how to fix Multi-line strings are not allowed lint error?
<ljharb>	saquibkh_: don't use multiline strings, or, use babel and es6 template strings
<Sorella>	Rantanen: since you need to execute a second VM, serialise data structures, etc
<ljharb>	saquibkh_: JS doesn't have multiline strings before ES6.
<Rantanen>	Sorella: Yes I know. I was about to correct myself, but figured I'd get my point accross. :p
<saquibkh_>	ljharb: how to use them?
<Rantanen>	The point was: The whole operation is in Python now so porting that to C++ the overhead wouldn't really be a problem.
<nak>	ljharb yeah this is just for whipping together quick code examples, not for production or anything
<Sorella>	Carolin: C++ compilers can generate more efficient code than C compilers, for C++ code, in some cases. Some features of C++ might have more overhead.
<saquibkh_>	ljharb: how can i use them? do u have any reference?
<ljharb>	saquibkh_: look into babel
<ljharb>	saquibkh_: but generally you shouldn't have lots of string data in your code.
<nak>	ljharb anyway, that doesn't for `let` or `=>`
<ljharb>	nak: still, avoid --harmony.
<Sorella>	Rantanen: they'd have to test that. If there's too much serialisation, that could make it too slow. But might be worth a try anyway
<ljharb>	nak: that's right. use babel for that.
<nak>	mhm ok
<nak>	GreenJello thx again :)
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Tue May 12 17:13:01 2015

**** BEGIN LOGGING AT Tue May 12 17:20:45 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<moleWork>	like while in a closure i want to inspect the outer scope
<moleWork>	without writing the code to import it into the closure
<Aria>	That's usually there on the right hand side.
<moleWork>	hmm
<moleWork>	in the console i can't access out of the current function scope's variables
<tjscanlon>	This is more of an expressJS question, but is it possible to make the server only visible on localhost?
<moleWork>	yes, app.listen(PORT, '127.0.0.1')
<tjscanlon>	Thank you :)
*	itscassa is now known as itscassa|away
<Carolin>	this site (point 2) says you should always use integers
<Carolin>	https://gamealchemist.wordpress.com/2013/05/01/lets-get-those-javascript-arrays-to-work-fast/
<Carolin>	So that must mean JS somehow understands ints properly for int math, no?
<moleWork>	Carolin, as long as you don't do any math on them :)... it's referring to indexes on arrays as integers vs a sparse array with random keys
<zoinks>	If I have an express rest API backend and a react/flux frontend, how should I actually serve the root path with the react app and assets and stuff?  Should I serve it from same express app as the backend api but at the '/' path or should I create an entirely separate express app just for this?
<moleWork>	Carolin, http://www.html5rocks.com/en/tutorials/speed/v8/ i think this is probably still true, as well as this: https://www.youtube.com/watch?v=hWhMKalEicY&feature=share
<Carolin>	ahhh, ok
<moleWork>	zoinks: it doesn't really matter, express apps are basically just "routers", so you can mount them together like a jigsaw puzzle, but if you mean using something like iis or nginx or iis to serve up the assets in front of the app, that's probably preferable so you don't waste time serving up largerish files
<jaawerth>	Carolin: or ints AND floats) is that they're all represented in double-point floating point 64-bit format, so you can't use absolute values greater than 2^53
<jaawerth>	Carolin: whoops. the beginning of that is "the main problem with JS ints (really, any numbers, including ints AND floats)
<moleWork>	jaawerth, well, if you go down into the internal representation of a number in v8, it probably does optomize them down to an actual integer value in memory
<jaawerth>	yeah, but you can't count on it for calculations without using some sort of BIGINT workaround
<zoinks>	moleWork: got it.  I think I'm going to keep them separate then, just to drive home the point in my own brain that they have nothing to do with each other.  My root dir right now literally has ./front and ./back with totally isolated code
<moleWork>	but to rely on those types of things is probably  a bad thing
<moleWork>	zoinks, sometimes it's easier in devleopment to use express.static to serve up your assets though
<zoinks>	moleWork: omg you just changed my life
<moleWork>	thank node.js not me
<moleWork>	i'd be retired right now if it wasn't for the awesomeness of javascript these days
*	lanceball is now known as lance|afk
*	dseitz_ is now known as dseitz
<pawn>	Hey, ...
<pawn>	I don't know where to start, but I'm getting this weird issue where a space and newline character is being added to my email templates, and it's breaking the HTML code.
<pawn>	I'm using mandrillapp.com to sent emails
<pawn>	I'm using nodemailer to send emails
<pawn>	so I'm using those two things
<joepie91>	pawn: not that I'm likely to be able to answer your question, but what transport are you using?
<joepie91>	for nodemailer
<pawn>	I believe I'm using smtp
<pawn>	https://github.com/andris9/Nodemailer/issues/432
<pawn>	joepie91: that's the issue I created on nodemailer's github
<joepie91>	pawn: not sure what your confusion about the = is, that's just an encoding format for email
<joepie91>	but the space is strange
<joepie91>	that seems like something is getting incorrectly chunked
<pawn>	joepie91: it's really strange how it's just adding a fucking space in a random place. I since updated my stylesheet and changed all "0" values with "0px" values to see if that helps anything, and now it's placing the god forbidden space in the middle of a css padding-right property value...
<joepie91>	pawn: can you compare the two cases and see if it adds the space in the same place
<joepie91>	byte-position-wise
<joepie91>	(either in the payload as a whole, or in the encoded bit)
<pawn>	Hmm. I tried character-position-wise.
<pawn>	How would I be able to find figure out byte-position-wise
<joepie91>	pawn: that's the same here :)
<joepie91>	no multibyte encoding
<joepie91>	well maybe there is
<joepie91>	but doesn't seem like it
<joepie91>	from the content
<joepie91>	and it uses quoted-printable so I think that expands all the multibyte stuff
<moleWork>	i've had git add crlf to my code on deployment when i pushed to a windows box which caused spaces to end up in my output
<pawn>	joepie91: it actually looks like it's doing it after the 999th character
<joepie91>	pawn: that certainly sounds like a chunking issue
<joepie91>	pawn: check your input to see whether it's in there
<joepie91>	if the input going into nodemailer is valid, then it's a bug in nodemailer probably
<pawn>	joepie91: ok I'll report back
<pawn>	joepie91: I'm pretty confident the input is valid. I use the same renderEmail function to get the final HTML for both sending the email and previewing it using Express.
<pawn>	joepie91: I just check it, and it's all one line of output.
<pawn>	joepie91: So, nodemailer is the problem..
<joepie91>	pawn: would recommending adding all of that info to your issue then :)
<joepie91>	and see whether they know the specific problem
<pawn>	joepie91: ok. thanks man
*	exec_off is now known as exec_s
<Garrick>	Hey guys. Is it expected behavior that when a process exits, any data in a write stream that hasn't been drained misses the opportunity to write?
<Garrick>	I'm seeing this in node@0.12.2
<ljharb>	that depends how you exit
<Garrick>	process.exit(0)
<ljharb>	if you do process.exit() then sure, it will cease all operations and exit
<Garrick>	Hrm. That wasn't happening in node@0.10
<ljharb>	it's surprising there's a difference, but i would always expect `process.exit` to be a hard exit.
<joepie91>	Garrick: you're relying on undocumented behaviour, more or less
<joepie91>	Garrick: if you describe why you're trying to use process.exit, we can probably suggest a better solution :)
<Garrick>	Well, I'm not using process.exit directly.
<ljharb>	Garrick: what are you using then
<ljharb>	that's why i said it depends how you exit :-p
<Garrick>	Just that the test runner I'm using is quitting before the writestream finishes writing.
*	edoardo is now known as Guest47023
<Garrick>	So far I haven't figured out how to prevent it from exiting until I've written the results to a reporter.
<ljharb>	what test runner
<Garrick>	Buster.js
<ljharb>	your test runner shouldn't exit til all the async things are done
<ljharb>	and your test shouldn't be complete until all your async actions have finished
<Garrick>	That is true.
<Garrick>	I'll have to look into the documentation some more to see what I'm missing.
<Garrick>	But if the expected behavior is that process.exit just exits without waiting, then that's acceptable/understandable.
*	garthk is now known as garthk_away
<me110>	anyone use webstorm? do you get documentation for methods inside the editor?
<me110>	i get them for javascript but not node
<me110>	for js, it will pull docs from mozilla
*	robertLunch is now known as robertmaxrees
<MI6>	joyent/node: Michael Dawson refs/tags/jenkins-accept-pull-request-temp * 94c5648 : test: fix test-process-active-wraps for IPv4 - http://git.io/vUwpR
<MI6>	joyent/node: Michael Dawson refs/tags/jenkins-accept-commit-temp * 891ac9a : test: fix test-process-active-wraps for IPv4 - http://git.io/vUwpz
<emma>	Say -- how does npm work?  If I am a superuser and I npm install something, will other users be able to use it also?
<emma>	or do I have to install it for each of them
<emma>	and does that mean that there are multiple copies of the same thing in the machine?
<ninjs>	So I have an array of objects that I'd like to write to a json file.  I tried  fs.writeFileSync('/Users/ninjs/desktop/claim_node_dump.json', array) but i just got [object Object] a bunch of times
<joepie91>	emma: dependencies are installed per project
<joepie91>	not per user or per system
<joepie91>	so yes, you may have multiple copies in different projects
<tejasmanohar>	>> var o = {}; o.test = 'testing'; o
<ecmabot>	tejasmanohar: (object) {test: 'testing'}
<lewis__>	hi
<lewis__>	i ran npm install -g protractor --save-dev
<tejasmanohar>	>> o = {}; var test = o.amITesting; typeof o.amITesting
<ecmabot>	tejasmanohar: (string) 'undefined'
<tejasmanohar>	>> o = {amITesting: true}; var test = o.amITesting; typeof o.amITesting
<ecmabot>	tejasmanohar: (string) 'boolean'
<tejasmanohar>	awesome
<lewis__>	how come its not saving it in package.json
<inex>	tejasmanohar what!?
<tejasmanohar>	inex: sorry.
<lewis__>	--save-dev not saving it
<inex>	nonono
<inex>	what does ecmabot do
<joepie91>	run JS
<inex>	>> var test = 'test'; test+'yiss';
<ecmabot>	inex: (string) 'testyiss'
<tejasmanohar>	;)
<inex>	:D
<tejasmanohar>	i didn't mean to run the first one... that was silly (well, both are silly if you know this stuff well lol)
<tejasmanohar>	but yes >> is useful
<joepie91>	>> <<
<ecmabot>	joepie91: SyntaxError: illegal XML character
<joepie91>	... XML character?
<tejasmanohar>	lol
<joepie91>	wha.
<inex>	xml? what lol
<inex>	i have an idea
<tejasmanohar>	is this bot open-source?
<inex>	please tell me it is
<joepie91>	!help
<ecmabot>	joepie91: For help, ask your question. Be patient. Code samples should be pasted in a paste service (see !paste). Tell us 1) what you want to happen, 2) what is actually happening, and 3) any error messages you find (see !describe and !debug).
<inex>	>> for(var j='',i=0;i<256;i++){j+'a';}; j+'a';
<ecmabot>	inex: (string) 'a'
<inex>	god damnit
<tejasmanohar>	i am guilty of overusing ecmabot here... probably annoys others, so tip- if youre in some serious testing, jsut use devtools or node or repl.it
<joepie91>	!about
<ecmabot>	joepie91: I'm written entirely in JavaScript using Node.js. See under my covers at Github: <https://github.com/oftn/oftn-bot>
<joepie91>	ahhh there
<inex>	404 :D
<inex>	oh no wait
<inex>	i copied the >;
<inex>	hey tejasmanohar
<inex>	uh
<inex>	i have a question
<inex>	>> var str = 'something'; for(var i = 0; i<2; i++){ str = str + 'something'; }; str;
<ecmabot>	inex: (string) 'somethingsomethingsomething'
<inex>	>> var str = 'something'; for(var i = 0; i<64; i++){ str = str + 'something'; }; str;
<ecmabot>	inex: (string) 'somethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomethingsomet…
<inex>	oh it trims, nice
<[FreeLay]>	ecmabot (~ecmabot@boshi.inimino.org) has Joined #node.js
*	garthk_away is now known as garthk
<ljharb>	[FreeLay]: ?
<[FreeLay]>	<Ronsor> 12
<MI6>	joyent/node: Julien Gilli refs/tags/jenkins-accept-pull-request-temp * ebfd9a7 : repl: make 'Unexpected token' errors recoverable - http://git.io/vUrlm
<MI6>	joyent/node: Julien Gilli refs/tags/jenkins-accept-commit-temp * 101e103 : repl: make 'Unexpected token' errors recoverable - http://git.io/vUrlY
<joepie91>	ljharb: looks like a relay bot?
*	danecand_ is now known as danecando
<sabrehagen>	looking for some nomenclature assistance. when designing a restful api you have structures like /users/userId/projects/projectId. users and projects are 'collections', what are userId and projectId? instances?
*	szt is now known as Guest41245
*	szt_ is now known as szt
<uberjar>	identifiers
<uberjar>	or "keys"
<sabrehagen>	uberjar: thanks for the input
<MI6>	joyent/node: Julien Gilli v0.12 * 101e103 : repl: make 'Unexpected token' errors recoverable - http://git.io/vUraD
<uberjar>	nobody is anal about it though
<uberjar>	you can call it whatever you want
<uberjar>	"widgets" is good enough
<sabrehagen>	sure, but it's my code and i want to make it as semantically as meaningful as possible
*	H is now known as Guest60111
<pawn_>	Anyone know if nodemailer uses a unix library to send email?
<pawn_>	I just noticed that emails sent from my localhost is different from that of my VPS, even tho they use the same code.
*	pawn_ is now known as pawn
<pawn>	joepie91: Yo, you still around? I figured out some things regarding my issue, and I was wondering if you knew anything about that ^
<joepie91>	pawn: around
<joepie91>	pawn: if you use smtp, it should be native I think?
<joepie91>	sendmail is external
<pawn>	joepie91: native to what the OS or the library (nodemailer)?
<joepie91>	pawn: the lib
<joepie91>	but verify that with the authors :)
<joepie91>	I've only used it a bit
<pawn>	joepie91: Ah. So you're thinking that it does some manual TCP stuff instead of using something like sendmail (which is an unix command, I think, right?)?
<joepie91>	pawn: well, it has an explicit sendmail transport if I'm not mistaken
<joepie91>	so I would presume that the SMTP transport is not sendmail
<joepie91>	:)
<pawn>	I see.
<pawn>	I didn't even realize there is a mandrill transport for nodemailer. I'll give that a shot
<greves>	ugh @ gulp & browserify >.< can never get these things working
<substack>	greves: http://substack.net/task_automation_with_npm_run
<substack>	you just get it working on the command line and then you stick whatever you did in the package.json scripts field
*	danmactough_ is now known as danmactough
<greves>	yeah that may be the way to go, i was reading this yesterday
<greves>	if i were using normal CLI stuff i'd probably prefer to go for webpack than browserify but i can't get it working in windows
<imZEH>	hi
<imZEH>	is there any npm packages that can read the sheetname tabs for excel workbook ?
<joepie91>	greves: I've found webpack to work flawlessly with gulp
<greves>	joepie91, on windows?
<greves>	because i found your gulpfile and tried copying it and can't get it to work on my machine
<greves>	there's always problems with paths
*	iam5o1|work is now known as json
*	json is now known as json|work
*	json|work is now known as json
*	json is now known as JSOn
*	JSOn is now known as JSON
*	exec_s is now known as exec_off
<joepie91>	greves: oh, I have no idea about Windows, I use Linux everywhere :)
<jaawerth>	imZEH: yes - try searching on npm.org and the first hit will probably be the excel parser
<jaawerth>	imZEH: er, npmjs.org
<imZEH>	jaawerth: thanks , i found one and it fits on my project.
<greves>	joepie91, yeah i dont have time for linux :P i always find that i spend too much time on configuring and settings and stuff when i'm on linux. windows just works alright without any config (99% of the time - then there's cases like this. haah)
*	tomku|two is now known as tomku
*	emilyrose coughs *OS X*
<emilyrose>	dguttman: hey :)
<dguttman>	hey emilyrose =)
<jr3>	joepie91: hows the orm coming
<imZEH>	hello . who used iojs here ?
<joepie91>	jr3: working on it! :P
<joepie91>	greves: sounds like you may have used the wrong Linux distro :)
<Sorella>	greves: just pick a Linux distro that isn't Slackware, Gentoo or Linux From Scratch, and you won't really need to spend any time configuring :P
*	joepie91 generally recommends opensuse
<greves>	heh
<greves>	well someone over in #webpack is just informing me about a thing called vagrant
*	joepie91 doesn't like screwing with configs before being able to use something
<greves>	looks pretty cool i am definitely going to give it a try
<joepie91>	(but I *definitely* don't like not being able to fix shit if it breaks)
<Sorella>	greves: in particular, I've been using ElementaryOS because (1) it's pretty; (2) it's the most practical thing I've seen around; It's not awfully stable though
<joepie91>	Sorella: it's the devs that taint it for me :/
<joepie91>	and that make me not recommend it
<joepie91>	greves: vagrant is neat, but has its drawbacks
<Sorella>	greves: we're using Vagrant at work for all new projects. It's ~great~
<joepie91>	with the virtualbox backend anyway
<greves>	oh yeh?
<joepie91>	virtualbox folder sync is not exactly without its bugs
<joepie91>	:)
<greves>	joepie91, i've got vmware
<joepie91>	not sure about vmware
<joepie91>	I heard some vaguely similar complaints about it, but that was 2 years ago
<Sorella>	Reproducible environments? No need for worrying about cross-platform stuff? Yes please.
<joepie91>	so idk
<greves>	would it make any sense to use the same distro/setup as the server i will be deploying on? i.e., heroku?
<greves>	do they offer like a downloadable version of their environment i could use with vagrant or something?
<Sorella>	You should recreate an environment that will be as similar as possible to your production one
<greves>	yeah thats what i was thinking
*	joepie91 suggests dokku might be of use here?
<greves>	ubuntu 14.04 & dokku = heroku dyno?
<uberjar>	yes
<uberjar>	but don't think you're going to be able to scale dokku up with ease the same way you could with heroku
<uberjar>	you can deploy to it with ease though
<greves>	yeah that's what i'd be lookin for
<uberjar>	it's great for a simple page that was only going to use a single dyno to begin with
<greves>	uberjar, and for bigger pages?
<uberjar>	neither spin up a beefier node for your dokku to run on, it design a more sophisctated infrastructure with load balancing
<uberjar>	s/it/or/
<jaawerth>	there's an official heroku docker image https://registry.hub.docker.com/u/heroku/cedar/
<jr3>	joepie91: the docs/examples on riot.js are almost nill :O
<uberjar>	greves: in other words.. dokku is for single webserver deployments.. not good for when you need more than 1 box
<greves>	uberjar, i see, but you're talking about running the actual dokku server as the webserver, not deploying to heroku, i think
<MI6>	joyent/node: Michael Dawson refs/tags/jenkins-accept-pull-request-temp * 94c5648 : test: fix test-process-active-wraps for IPv4 - http://git.io/vUwpR
<jr3>	I really wanna see some project structure examples with riot
<joepie91>	jr3: the docs seemed reasonably complete to me from a quick glance?
<joepie91>	I mean, it's probably not very commonly used
<uberjar>	greves:  yeah.. it'll work great on a single server… you can deploy to it just as if it were heroku
<MI6>	joyent/node: Michael Dawson refs/tags/jenkins-accept-commit-temp * 5cdad84 : test: fix test-process-active-wraps for IPv4 - http://git.io/vUrQm
<joepie91>	so not much third party docs
<joepie91>	but I don't need third party docs anyway :P
<joepie91>	as long as the reference docs are good
<uberjar>	greves: but if you need to use more than 1 webserver… then there's trouble
<greves>	uberjar, oh ok so you do mean about actual deployment
<uberjar>	greves: with dokku you just git push to deploy… same method as heroku
<greves>	ya
<uberjar>	greves:  but with heroku you can have many dyamo… kind of like many servers
<uberjar>	with dokku only 1 server
<uberjar>	so make it count ;)
<greves>	ok i see what u mean haha
<greves>	brb
<greves>	Sorella, vagrant docs are pretty awful heh
<jaawerth>	greves: FWIW, if you use zsh and oh-my-zsh plugin there's a plugin for vagrant that adds all sorts of handy tab-completion options, makes life way easier IMO
<greves>	thanks
<greves>	$79 to use vagrant with vmware?? yeesh.
<jaawerth>	greves: IIRC that's for vmware itself
*	greves__ is now known as greves
<greves>	jaawerth, seems to be for the actual vagrant vmware provider
<jaawerth>	ah yeah, I'm on the page now
<jaawerth>	weird, I could have sworn you could use it for free in some fashion
<greves>	ya, with virtualbox
<jaawerth>	I mean with vmware ;-)
<jaawerth>	then again, I only ever used it witht virtualbox on my own machine
<erste>	Hi, being a full stack dev. after you've planned what to build, the features etc.. where do you start? Front-end side? or back-end side?
<jaawerth>	depends on the app
<jaawerth>	if there's lots of tricksy stuff going on in the backend I might start there
<jaawerth>	and eventually plugin a dumbed down frontend
<erste>	hmm.. I see
*	garthk is now known as garthk_away
*	danmactough is now known as danmactough_
*	danmactough_ is now known as danmactough
<frd>	is my parent app allowed to override node modules depedant node modules? :p
*	danmactough is now known as danmactough_
*	hgl- is now known as hgl
<frd>	i have a node module whom is using an older version of another module, but i don't want to modify that modules package directly to update the dependancy version
*	danmactough_ is now known as danmactough
<jaawerth>	frd: you can install any version you want in your app and it won't interfere with the other dependency even if you run npm dedupe
<jaawerth>	frd: if you dedupe you'll just end up with both versions in your flattened node_modules
<frd>	so there is no way for me to override a dependancies dependancy? ;o
<jaawerth>	well it's a bad idea
<jaawerth>	surely it isn't impossible but you could very easily break a dependency that way
<frd>	for some reason i always had this thought that if my projects package had a depenancy and that dependancy had a dependancy that wasn't strict it would use the parents version
<frd>	yah just this module i use hasn't updated one of their dependancies that has some bug fixes :(
<jaawerth>	#npm would know for sure but I THINK it'll only do that if it's within an allowed version range in your dependency's package.json
<JSON>	sup.
<frd>	well they have it specified with ^
<JSON>	this and ##javascript are not great places to hangout with my nickname.
<frd>	^3.0.1, so i thought if my parent specified the same module it would use my parents
<frd>	but it doesn't appear to be, ill check #npm - didn't know it existed
<p15x>	if you specify a version number like "1.2.3" that means it will only use "1.2.3" right?
<frd>	yes
<frd>	https://docs.npmjs.com/files/package.json#dependencies
*	danmactough is now known as danmactough_
<jaawerth>	frd: did you run "npm dedupe"?
<frd>	no
<p15x>	I prefer "must match version exactly" option
<jaawerth>	frd: if you don't, the default will be to always use individual dependencies I think
<frd>	hmm is using npm dedupe bad tho?
<frd>	that flatterns all the node_modules?
<jaawerth>	why's that bad?
<jaawerth>	that's the behavior you're looking for
<frd>	i will have to consult with all my co-workers if i want to do that i guess
<frd>	never really used npm dedupe
<jaawerth>	if it turns wrong you can always delete node_modules and run npm install again
<jaawerth>	I don't believe it changes anything about the project itself
<jaawerth>	(assuming you have node_modules in your .gitignore, which I am going to go ahead and assume)
<frd>	yah interesting, im going to see if i can override the version after an npm dedupe
<joepie91>	lol JSON
<frd>	after an npm dedupe, it is still using the modules version
<frd>	not mine
<frd>	hrm
<jaawerth>	what are the respective versions?
<frd>	^1.0.0 for the module that is sharing the dependancy
<frd>	and my package is specifying the git directly
<jaawerth>	oh well I don't know how it will play with a git repo. what version are you actually getting from the repo?
<frd>	so one of my modules dependancies: "meddleware": "^1.0.0"
<jaawerth>	because with ^ I'm pretty sure that means "compatible with this verson" and it's possible the two versions just aren't compatible
<frd>	my package: "meddleware": "git+ssh://git@github.com/krakenjs/meddleware.git#v3.0.1",
<jaawerth>	3.0.1 probably has a bunch of breaking changes from 1.0.0
<jaawerth>	surprised your call to npm dedupe didn't mention anything about it not deduping that dep though, I thought it typically did
<frd>	hrm maybe, i should try manually doing it directly in the modules node modules
<frd>	so frustrating it has stuff i want!! lol
<frd>	now i'll have to make my own implementation of the feature, even tho it's not that big
<jaawerth>	try "npm dedupe <targetpackage>"
<frd>	has an unavoidable conflict
<frd>	;o
<jaawerth>	there ya go
<frd>	interesting, ok well thank you
<frd>	i've learned a lot just now
<diegoviola>	I had an interview today at some shop and I've seen some of their developers were using Windows, does node runs fine on Windows? or a unix-based system is generally better?
<diegoviola>	I haven't used Windows in the last 10 years or so, and I'm more comfortable on Linux myself
<frd>	unix-based is definitely better, but i use windows
<frd>	and i've been working on big node projects for the last couple years
<jaawerth>	in theory it works fine
<jaawerth>	in practice you gotta watch out for things like symlinks and make sure they're enabled in windows
<frd>	i use my git bash (from git-scm) and it works well
<diegoviola>	I really don't want to use Windows for development though
<diegoviola>	but they will be the ones to provide my desktop machine
<frd>	it should work fine if you get packages that require compiling
<jaawerth>	I've used it before with Cygwin too but in general I just strongly prefer a linux setup anyway
<frd>	you need to have microsoft visual studio compiled
<frd>	and it took me forever to figure out
<frd>	npm install --msvs_version=2012
<frd>	or w/e version you have :p
<jaawerth>	but.. yeah, it's compatible. Microsoft is on the node.js advisory board; -)
<diegoviola>	I want to use Arch for development
<frd>	yah microsoft has been pumping out a lot of node stuff
<jaawerth>	then use it ;-)
<diegoviola>	windows is f*cking annoying... shutdown, oh no, wait it's downloading updates...
<frd>	https://github.com/Microsoft/node
<jaawerth>	heck, Visual Studio Code is even built with node dev/debugging as one of its main use-cases
<joepie91>	diegoviola: it *not* shutting down unasked because of updates is still less annoying than it *shutting down* unasked because of updates
<joepie91>	lol
<diegoviola>	windows is so last decade
<diegoviola>	don't get me wrong, it runs some games fine, but that's it
<diegoviola>	ok sorry for trolling
<frd>	jaawerth thanks a lot for the help.
<Sorella>	diegoviola: isn't that the only thing you'd use Windows for anyway?
<jaawerth>	frd: sure
<diegoviola>	Sorella: there's Steam for Linux these days, so I wouldn't
<Sorella>	diegoviola: most interesting games don't run on Linux though, like Life is Strange.
*	Sorella ends up buying them and not playing because dual booting is too annoying
<diegoviola>	sadtime
<diegoviola>	Sorella: dual booting is a pain in the ass
<diegoviola>	don't do that
<diegoviola>	Sorella: it runs fine on wine: https://appdb.winehq.org/objectManager.php?sClass=version&iId=31665
<Sorella>	diegoviola: but MY GAYMES :'(
<diegoviola>	I suggest wine-staging
<diegoviola>	http://wine-staging.com/
<diegoviola>	wine-staging has pulseaudio support
<diegoviola>	upstream wine doesn't
<diegoviola>	there's also a bunch of other niceties on -staging
<Sorella>	So, running Steam through wine?
<greves>	how do i get npm -g to install to a user-accessible directory? currently its trying to install to /usr/lib/node_modules which this user doesn't have access to
<diegoviola>	you should in theory be able to compile wine staging on your home dir and just run it from there, and keep it up-to-date there
<diegoviola>	no need to install anything
<diegoviola>	Sorella: yea why not
<diegoviola>	Sorella: or just the game
<derpvid>	Darn, I just lost the game.
<diegoviola>	windows is a fucking PITA
<Sorella>	Dunno how you'd download Windows games in Steam4Linux ahaha
*	Sorella is bad with computers
<diegoviola>	dunno, gnome 3 is frustrating me right now
<joepie91>	that's GNOME3 for ya
<joepie91>	derpvid: damnit, i just lost the game too
<derpvid>	Man, I really like the simplicity of xfce.
<diegoviola>	xfce is what I'm using right now
<diegoviola>	but I want gnome 3 to work for me
<diegoviola>	what's annoying me about gnome3 is the default shortcuts
<derpvid>	ah
<diegoviola>	Ctrl + Alt + Shift + Page Up / Page Down
<diegoviola>	so annoying...
<joepie91>	xfce \o/ (mostly)
<Sorella>	Just... change them?
<joepie91>	wish they'd fix the unicode bugs though
<diegoviola>	Sorella: to what?
<joepie91>	unicode segfaults are not fun
<Sorella>	diegoviola: whatever makes sense for you.
<derpvid>	Are there any other distributions besides Xubuntu that use xfce?
<joepie91>	derpvid: opensuse!
*	garthk_away is now known as garthk
<joepie91>	lets you pick GNOME3/KDE/XFCE/LXDE on setup
<derpvid>	Oh wow, that's cool
<diegoviola>	arch ftw
<joepie91>	derpvid: well, in netinstall and full install DVD, not the live CDs
<joepie91>	but you shouldn't use the live CDs :P
<MI6>	joyent/node: Forrest L Norvell refs/tags/jenkins-accept-pull-request-temp * c6a7be4 : deps: upgrade npm to 2.9.1 - http://git.io/vUrhy
<MI6>	joyent/node: Forrest L Norvell refs/tags/jenkins-accept-commit-temp * 03cfbd6 : deps: upgrade npm to 2.9.1 - http://git.io/vUrhQ
<diegoviola>	I keep trying GNOME and moving away from it
<diegoviola>	never before a DE annoyed me this much on linux
<tar_>	Linux peaked at emacs
*	lizzin is now known as Guest42922
<MI6>	joyent/node: Forrest L Norvell v0.12 * 03cfbd6 : deps: upgrade npm to 2.9.1 - http://git.io/vUoUT
*	exec_off is now known as exec_s
<dodobrain>	joepie91, i've got the rudimentary crud app with postgres kinda working for (the crd, u not done yet). now how do i make sure it is not open to everyone to delete randomly?
<dodobrain>	i don;t mind everyone can read, but they need to be logged-in or authenticated or ... before the c,u,d i hope this is easy enough to do
*	joepie91 just changed around his code review page thingie: http://cryto.net/~joepie91/code-review.html
<joepie91>	dodobrain: right, so, access control basically?
<dodobrain>	yeah.. some kind of rudimentary access control
<joepie91>	dodobrain: well, what do you want to control the access by :)
<dodobrain>	also one where some kind of api-key (or password or similar) doesn't go over the wire in plaintext
<joepie91>	right, just use SSL for that
<dodobrain>	joepie91, having sessions / apikey / something else / etc.
<joepie91>	dodobrain: well yes, but the answer depends on which of those you want
<dodobrain>	yeah, i'll switch to ssl in express cos otherwise it (whatever 'it' ends up being) will be easily viewed
<dodobrain>	joepie91, i'd like to learn about both and implement the easier one ;)
<joepie91>	dodobrain: depends. browser or external client?
<dodobrain>	at present i only expect the browser to be useful in making the R operations, i.e. read stuff.. for everything else some kind of rest client will be used i think
*	whyhankee is now known as Guest18318
<Razerglass>	hhey guys im trying to learn callbacks, i have a little bitty one written here, but for some reason my callback isnt working and console logging me. http://pastebin.com/Ud33A54Y
<joepie91>	dodobrain: sessions are easier for a browser, but if you want a REST client, you should definitely go for API keys
<joepie91>	you can of course always do both
<joepie91>	Razerglass: not sure why you're using a callback there? print isn't asynchronous, and neither is console.log
<Razerglass>	to learn how to write them
<joepie91>	Razerglass: then I'd recommend experimenting with fs.readFile instead :)
<Razerglass>	i got real functions that need async but i gotta learn how a callback works with simple stuff first
<joepie91>	which *does* take a callback
<joepie91>	just fs.readFile("something.js", function(err, contents) { ... })
<Razerglass>	can you see where my function is broken and isnt console logging the 2nd message?
<Razerglass>	ill check out that fs i saw a guide on that too
<joepie91>	Razerglass: it's not broken, it's just not doing what you think it would be doing :)
<Razerglass>	haha go figure :)
<joepie91>	Razerglass: the function is the second argument, it's never being used - it's not even defined in the `print` function signature
<joepie91>	callbacks aren't magically invoked
<joepie91>	they need to be called by whatever function you're passing them to
<Razerglass>	my second arugment is the anonymous function
<Razerglass>	right?
*	a| is now known as Guest24033
<joepie91>	Razerglass: yes, but it's not being used anywhere
<joepie91>	function print(text){
<joepie91>	print('hello', function(){
<joepie91>	you're only using the 'text' argument, which contains 'hello'
<joepie91>	you're completely ignoring the function you passed in
<greves>	jaawerth, if i use vagrant + dokku as a development environment, how do i get my stuff from that virtual machine onto the real heroku?
<dodobrain>	joepie91, right.. i might implement both i suppose. but i want to know how :)
*	mlocher_ is now known as mlocher
*	jacobrou- is now known as jacobroufa
*	hartsock_ is now known as hartsock
*	_nak is now known as nak
*	wookiehangover_ is now known as wookiehangover
*	FMJaggy_ is now known as FMJaggy
*	jacobroufa is now known as Guest94053
<jaawerth>	greves: deployment isn't trivial but I'd start with making it git-based and go from there (but in the real world you'd want to, for example, package your dependencies into a production build rather than install from npm)
<joepie91>	dodobrain: for sessions, express-session is useful
<joepie91>	dodobrain: for API keys, I'd probably end up rolling my own, but there may be better options available - either way, you'd send the API key(s) as HTTP header(s)
<joepie91>	and you just check those in a piece of middleware
<joepie91>	API keys just need to be random strings that are securely generated (so no Math.random, but a cryptographically secure random string generator)
<joepie91>	that is pretty much it
<joepie91>	you *could* use a signing scheme, but that's kind of pointless for SSL
<dodobrain>	joepie91, https://www.npmjs.com/package/express-session <-this one?
<greves>	jaawerth, not trivial eh? that sounds hard. :P
<jaawerth>	lol
<greves>	seems like it would still be possible though to just set up a production build and a development build and only push the production build to heroku
<jaawerth>	greves: I'd start here https://strongloop.com/strongblog/node-js-deploy-production-best-practice/
<jaawerth>	greves: the idea being you can push your builds as either a git branch or an npm package depending on preference
<jaawerth>	but the production releases should be prebuilt, rather than built on the fly (though alpha stuff you can build on the fly, because whatever it's alpha)
<greves>	yeah
<joepie91>	dodobrain: yeah, that one
<greves>	gah strongloop articles are so annoying, they always just push their own stuff
<KrakenSkulls>	hello. DONT go there, but does anyone know the story with nodejs dot com? I accidently went there and it loaded up a fake chinese google page
<dodobrain>	joepie91, thanks
<greves>	like it pretends to be an article describing the general principles, but at the end it just says "oh by the way strongloop is the best way to do it, so just use our stuff"
<joepie91>	jaawerth: any feedback on http://cryto.net/~joepie91/code-review.html?
<greves>	joepie91, nice
<greves>	joepie91, what's your price per ~1000 LOC?
<jaawerth>	joepie91: probably not what you meant but s/a hourly/an hourly ;-)
<RLa>	joepie91, would anyone pay for having their code called shit?
<joepie91>	greves: I don't immediately calc by LOC, I just take it into account - fixed-price is basically just me doing expected hours * hourly rate, and eating / benefiting from any differences :)
<greves>	haha
<greves>	well what's your hourly rate?
<jaawerth>	joepie91: looks good other than that, but you may want to pretty it up a bit to, shall we say, strut your stuff a little on the client side
<joepie91>	RLa: yes :P
<greves>	RLa, i would if my boss paid for it ;)
<joepie91>	jaawerth: whoops, sec
<greves>	(which he should, because my code *is* shit)
<joepie91>	jaawerth: that kind of feedback is also welcome, typos and such, should all be fixed now :P
<joepie91>	well, all instances of that typo anyway
<RLa>	and include skyscraper images, graphs and stuff that bosses like
<jaawerth>	animated GIFS like whoa
<greves>	hahaha
<joepie91>	greves: hourly rate is somewhere between 25-50 euro/hour, depending on how exhausting I expect the work to be (as more exhausting translates to less focus afterwards, ie. getting less done)
<greves>	wow
<jaawerth>	"adjust my teaching style (and language use)" does that mean you'll teach in quechua if asked? ;-)
<joepie91>	jaawerth: elaborate on "pretty it up"?
<joepie91>	jaawerth: heh. I wasn't sure how to say vocabulary without saying vocabulary
<joepie91>	since that word seems to really confuse a lot of people for some reason
<diegoviola>	there's a company that is trying to hire me but they offered me a very crappy salary, would you take the job on these conditions?
<jaawerth>	joepie91: haha yeah just kidding
<joepie91>	jaawerth: no really, that phrase annoys me, I'm just not sure how to fix it :D
<joepie91>	will probably think of it later and then fix it
<greves>	joepie91, take jobs in chinese and let me translate for you - i will get free lessons and you get money :)
<joepie91>	greves: you joke (I assume), but from what I've seen on various forums, there'd probably be a serious market in China for this kind of thing
<jaawerth>	joepie91: well, I mean, mainly just a little CSS love
<greves>	joepie91, i'm serious
<greves>	i'm fluent in chinese, and i was a translator for a few years
<jaawerth>	is that markdown or just html?
<joepie91>	jaawerth: HTML
<joepie91>	greves: huh, really.
<greves>	joepie91, yeah, but i gotta run out for a bit, let me know if u want to discuss later
<greves>	i can translate the page for you for starters hah
*	joepie91 makes mental note
<jaawerth>	even just applying some stylesheets from <insert framework here> to ensure it'll be standard across browsers
<joepie91>	jaawerth: I'm very much not a graphical designer, that's probably my biggest weak point in dev
<jaawerth>	presentation shouldn't matter, but it does
*	danmactough_ is now known as danmactough
<joepie91>	jaawerth: right, but I'm not trying to "maximize CTR" or anything like that, just trying to cover my expenses :)
<joepie91>	bills need paid somehow
<jaawerth>	sure, sure, but this kind of thing is very much shotgun method
<jaawerth>	that's a crazy good rate though
<joepie91>	jaawerth: I have nothing to compare my rate to, tbh, I haven't found anybody doing this stuff in this way
<joepie91>	other than a single blog post that was kind of about tutoring people, and didn't mention any rates
<jaawerth>	minimum rate I think I've payed any kind of contractor was $75/hour (granted that's in the washington DC area)
<joepie91>	I'm pretty much just going for "pays my bills, is affordable"
<jaawerth>	granted, those are contractors with, like, reps and such
<joepie91>	jaawerth: right, I usually see 100eur/hr contractors for dev
<joepie91>	but code review, no idea
<joepie91>	well, "code review" - is there a better name for this?
<jaawerth>	you could call it QA but I'm not sure if that's better or worse
<joepie91>	hm, I think that implies testing and such
<joepie91>	at least that's how I'd expect people to interpret it
<RLa>	btw, no real name/address/phone is not good
<joepie91>	oh, let me sort that
<joepie91>	well, minus the phone, I hate phones
*	greves_ is now known as Guest33961
<jaawerth>	and I didn't just mean dev contractors, I mean consulting and stuff to for things like deployments and security consultation. granted, YMMV and if you get a ton of business at that rate then you can always hike it ;-)
<RLa>	you would first have to sign nda by client and it must be binding
<RLa>	i have never seen any $$$$ in other work that development
<RLa>	than*
<dave2081>	ya
<jaawerth>	well, my company typically will do that through a consulting company that has, like, pools of prople for that thing
<jaawerth>	and they'll bill us hourly
<jaawerth>	so that's a bit different than an independent operator
<joepie91>	RLa: better? :)
<jaawerth>	I don't have much of a baseline for comparison there
<RLa>	yeah, a bit better
<joepie91>	jaawerth: 'proper' security consultation tends to cost a bit more than that, in my experience, from independent contractors anyway
<joepie91>	(with experience and all)
<joepie91>	potentially a LOT more, if you have fancy "transfer of liability" clauses in the contractor agreement
<joepie91>	:)
<jaawerth>	oh yeah, security is way higher
<RLa>	btw, this also means taking responsibility when there is hacking?
<joepie91>	RLa: in relation to what?
<RLa>	if they get hacked after review, you would pay their losses?
<joepie91>	certainly not at this rate :P
<jaawerth>	anyway, re: styles, no need to be a designer, I'd just maybe take a look at some canned CSS and/or markdown templates (and switch the formatting to markdown, which would make sense for that type of content anyway)
<joepie91>	already had to turn down one offer because of a liability clause
<jaawerth>	or if nothing else, apply a baseline so it's consistent across browsers
<diegoviola>	so there's a company that wants to hire me as a senior developer, but the salary looks more like a entry position salary... it's like a bad joke, would you still take the job anyway?
<RLa>	i think it's especially hard when starting and you have no data available on probabilities of node code getting hacked
<joepie91>	diegoviola: doesn't sound like a good idea :)
<jaawerth>	depends on your current job, if you're happy there, if you're making less money where you are, and whether this other job would open up more opportunities
<diegoviola>	joepie91: right
*	danmactough is now known as danmactough_
<joepie91>	diegoviola: if you are offered a senior dev job, then it's not unrealistic there may be senior dev jobs with better pay available for you elsewhere
<jaawerth>	oh and whether this is the first offer you've gotten
<jaawerth>	also, pay will vary from area to area by cost of living
<joepie91>	(and that)
<joepie91>	RLa: Node isn't really particularly... special in terms of security
<diegoviola>	thanks
<jaawerth>	and if you're thinking about walking away anyway, it never hurts to negotiate
<dodobrain>	joepie91, is the example shown in the express-session npmjs.org page the one to follow?
<RLa>	diegoviola, ask rate of former employer * 1.2
<jaawerth>	billing willing to walk away is always a good place to be in a negotiation
*	ljharb has kicked [FreeLay] from #Node.js (please check with ops before putting bots in a channel)
<RLa>	if they are not going to go with that, try next place
<joepie91>	dodobrain: look at the example under "Cookie options", and ideally use the Redis session store
<RLa>	unless you desperately need work
<joepie91>	RLa: aside; a friend of mine does professional security audits at a considerably higher rate and even he refuses to sign anything that makes him liable for compromises
<joepie91>	and from what I've heard, liability transfer is very much not an acceptable thing in that industry
<joepie91>	er
<joepie91>	'acceptable' is not the right word
<joepie91>	'commonly accepted'?
<joepie91>	it's late, my words are not very good right now :P
<jaawerth>	well usually there's at least a cap
<dodobrain>	joepie91, ummm.. ok. but i still don't understand how express-session is to be used for access-control
<dodobrain>	:(
<joepie91>	dodobrain: are you familiar with the concept of sessions in general?
<jaawerth>	anyway, bedtime
<jaawerth>	night!
<joepie91>	night jaawerth, and thanks for the feedback :p
<dodobrain>	i think so. the session cookie(s) determine who the session belongs to.
<dodobrain>	and these are sent along with all requests
<joepie91>	dodobrain: the session ID is, generally
<jaawerth>	joepie91: sure thing. happy tutoring!
<joepie91>	not the actual session data
<joepie91>	the session data is kept on the server, eg. in Redis
<joepie91>	or anywhere else really
<joepie91>	dodobrain: the idea is that the session data contains information about what user somebody is authenticated as
<joepie91>	if any
<dodobrain>	right.. but when a request comes, i need to determine whether to create a session or not, right?
*	ljharb sets ban on *!*@104.255.96.100
*	gli is now known as gli_training
<joepie91>	and that's what you use for access control
*	ljharb has kicked [FreeLay] from #Node.js ([FreeLay])
<joepie91>	ljharb: ?
<joepie91>	oh
<joepie91>	heh
<ljharb>	the relay bot
<joepie91>	dodobrain: express-session does that for you
<ljharb>	it's rude to bring a bot into a channel without checking with the ops ¯\_(ツ)_/¯
<joepie91>	with saveUninitialized
<joepie91>	"if session data was changed, create the actual session object\"
<joepie91>	so basically once you set something on req.session, it creates the session
<dodobrain>	right, and all further requests will present the sessionid as well along with the request
<joepie91>	ljharb: not disagreeing :P
<dodobrain>	but how did i decide to create the session in the first place?
<joepie91>	dodobrain: correct - and the server retrieves the session data for that ID, and makes it available on req.session
<joepie91>	for the route to use
<joepie91>	dodobrain: on a login page, for example
<joepie91>	it depends on your auth mechanisms
<joepie91>	at the point where a user is successfully authenticated - through *any* means - you can simply set req.session.userId = whatever
<joepie91>	and then check for that value to see whether somebody is authentiated or not
<joepie91>	and whether they have access to something or not
*	sbellina_ is now known as sbellina
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Wed May 13 02:08:11 2015

**** BEGIN LOGGING AT Wed May 13 02:09:49 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<dodobrain>	joepie91, right.. so it obviously leads me to the auth issue..
<dodobrain>	maybe i should try to write a simple application first that does nothing but present a login page and only does login and shows a single resource and nothing else. any help with this? :)
<joepie91>	dodobrain: that's a good idea - you can probably use the memory store for that so you won;'t need to set up redis yet
<joepie91>	as it's for testing only anyway
<joepie91>	dodobrain: what specifically do you need help with?
<rostercook>	Hi
<rostercook>	How do. I push all the inputs that comes with req.body into some session
<rostercook>	So that I can use them as they come in sequence on other page
<rostercook>	I have req.body.field0
<rostercook>	Field1 etc
<joepie91>	rostercook: you shouldn't blindly do that, it's extremely dangerous.
<joepie91>	rostercook: what kind of fields are these?
<joepie91>	(and why do they need to be on the session data?)
<mstram_>	Hi,I'm using http.get and getting 'your browser does not support frames' , what do I need to add? http://pastebin.com/CNLRNpt5
<ljharb>	mstram_: that's something the server is doing
<ljharb>	mstram_: what's the entirety of the response?
<mstram_>	 console.log("Got response.statusCode: " + response.statusCode);    gives 200
<ljharb>	mstram_: right but i mean can you gist the entirety of the response text
<joepie91>	ljharb: Sorella: thoughts on Opa (the language)?
<joepie91>	if any
<ljharb>	none
<ljharb>	what is it
<joepie91>	(ref http://opalang.org/ )
<cipher__>	Can anyone suggest a refresher for someone who developed a couple years ago?
<mstram_>	the response text is just a pre-made html page :   http://pastebin.com/XDciR28S
<hipsterslapfight>	joepie91: i have a lot of issues with point 1 there
<hipsterslapfight>	letting it decide about where code should be run? what a nightmare
<ljharb>	mstram_: wow, frames are ancient. ok so basically that means you have to load all the frame src's
<ljharb>	mstram_: in other words, you can't just use http.get to curl the page, what you really need is a browser. but please note that scraping is illegal in many countries, so be careful.
<joepie91>	ljharb: "scraping is illegal in many countries"?
<mstram_>	the <noframes> tag seems to be getting triggered ... I've searched all over what triggers <noframes> haven't found anything
<ljharb>	joepie91: it is in the US.
<joepie91>	afaik only the US and a handful of others have laws that could be construed as criminalizing the act of scraping itself
<ljharb>	the US is a pretty big one.
<joepie91>	well yes, but that's not many countries :)
<mstram_>	forget the scraping .. this is running on localhost
<ljharb>	as far as the internet and extradition goes.
<ljharb>	mstram_: the site that has frames is? in that case you're fine
<joepie91>	eg. in NL, scraping is perfectly legal, publication is a lot trickier
<joepie91>	and iirc many EU countries don't even really have any protections against publication
<joepie91>	(NL has "database rights")
<mstram_>	it's not a "site", it's the hercules 390 emulator's built in http server
<joepie91>	hipsterslapfight: most of the site makes me go "ehhh. what?"
<joepie91>	to be honest
<joepie91>	it all seems very buzzwordy to me
<hipsterslapfight>	oh yeah i didn't get past point 1 :v
<joepie91>	lol
<hipsterslapfight>	iirc we talked about it in here a year or so ago when it was first announced?
<hipsterslapfight>	the general consensus was that it seemed pretty bad
<ljharb>	joepie91: it uses mongo by default?
<ljharb>	and the *language* has mvc built in? O.o
<ljharb>	yeah, i'm not very whelmed
<joepie91>	ljharb: seems so.
<joepie91>	ljharb: it seems to do a ton of stuff (query generation? wtf?) from within the language
<ljharb>	yeah that's pretty kitchen sinky
<joepie91>	and reading through it, I get the impression that it does it poorly
*	exec_s` is now known as exec_off
<TyrfingMjolnir>	Anyone here used: passport-local-express4 ?
<TyrfingMjolnir>	What is all the jade stuff about?
<TyrfingMjolnir>	Somebody reinvented HTML?
<hipsterslapfight>	html isn't a templating language
<hipsterslapfight>	jade is basically nested css selectors plus javascript
<mstram_>	Hi,I'm using http.get and getting 'your browser does not support frames' , what do I need to add? http://pastebin.com/CNLRNpt5
<TyrfingMjolnir>	hipsterslapfight: I intend to use HTML w/NG
<hipsterslapfight>	so you probably don't want to use jade then, don't worry about it
<TyrfingMjolnir>	What is passport-local-express4-pg/bin/www about? https://github.com/mjhea0/passport-local-express4/blob/master/bin/www
<TyrfingMjolnir>	Some kind of launcher with a testing environment?
<mstram_>	what would cause a <noframes> section to be triggered from http.get() ?
<Chilion>	Goodmorning!
<Chilion>	I'm fairly new to Node, and i love it
<Chilion>	But now I run accross a problem that I cant seem to change
<Chilion>	module.js:338
<Chilion>	    throw err;
<Chilion>	          ^
<Chilion>	Error: Cannot find module 'charenc'
<mstram_>	what would cause a <noframes> section to be triggered from http.get() ?
<TyrfingMjolnir>	Is there a web service where I can drop a packages.json file and have description for each?
<TyrfingMjolnir>	for each package, i e
<TyrfingMjolnir>	What is morgan?
<TyrfingMjolnir>	a requestlogger?
<TyrfingMjolnir>	Writing every http request to a file
<TyrfingMjolnir>	?
<ljharb>	mstram_: nothing's triggered. that's just the html that's always returned.
<imZEH>	Hello . console.log is common debugging error . what are other way to handle error ? some says console.log log is not good practices.
<ljharb>	mstram_: the problem is that it requires a *browser* to get to the actual content. http.get isn't a browser.
<ljharb>	Chilion: did you `npm install charenc --save`?
<Chilion>	ljharb: no, i have a packagejson with SHA1 in it
<Chilion>	And sha1 requires it
<Chilion>	For the package
<Chilion>	http://pastebin.com/LQUP914A
*	edoardo is now known as Guest15837
<ljharb>	Chilion: ok, did you `npm install`?
<Chilion>	Yes
<ljharb>	does `npm ls` report any errors?
<Chilion>	ljharb: http://pastebin.com/18nQF4K2
<ljharb>	Chilion: try `rm -rf node_modules && npm install`
<Shyim>	Morning all
<Chilion>	Mister ljharb you saved the morning!
<Chilion>	Shame that you can't give credits on IRC :)
<p15x_>	send some karma points
<Chilion>	How? :D
<Shyim>	#karma ljharb
<p15x_>	give a star to nvm on github
<ljharb>	lol
<hio>	what do i have to do to listen to the request body after I send .writeContinue() during the 'checkContinue' event?
<TyrfingMjolnir>	# npm search morgan
<TyrfingMjolnir>	npm WARN Building the local index for the first time, please be patient
<TyrfingMjolnir>	terminate called after throwing an instance of 'std::bad_alloc'
<TyrfingMjolnir>	  what():  std::bad_alloc
<TyrfingMjolnir>	Abort (core dumped)
<qwebirc80022>	Hi! Can, I ask, how can I run example  (http://matt-harrison.com/using-hapi-js-with-socket-io/) on heroku  ? Or where find simple example with Hapi and Socket.io, that can run on heroku? [10:01] <qwebirc80022> This is my code https://github.com/IDriuk/jsp/blob/master/index.js https://github.com/IDriuk/jsp/blob/master/templates/index.ejs. It work well on localhost, but on heroku nothing happend? What is wrong?
<hipsterslapfight>	iirc there's certain settings to enable to get sockets to work correctly on heroku
<qwebirc80022>	where find that settings?
<qwebirc80022>	hipsterslapfight , where can I get working snippet or instruction?
<hipsterslapfight>	qwebirc80022: heroku docs are a good place to start
*	gli_training is now known as gli
*	efdee_ is now known as efdee
<fakedrake>	hello, is there a way to get the root dierctory of a project being tested with mocha, I need to use some resources packaged with the project
<Shyim>	__dirname?
*	Guest42922 is now known as lizzin
<fakedrake>	Shyim: that is assuming the tests will actually run from the root (I have a habit of cd-ing to the test directory and running individual tests sometimes)
<fakedrake>	aah dirname is not the current directory
<fakedrake>	thnx Shyim
<Shyim>	:D
*	sbellina_ is now known as sbellina
<Nikesh>	I am trying to design a callback and I am struck with.. how do I not send an error in the callback if it's true? I mean, most callbacks have the error as the first parameter
<Nikesh>	if it's true, I mean if there is no error
<Nikesh>	e.g. request(..., function (error, res, body) { ... } ); how does the 'request' module handle passing in the 'res' and 'body' parameters to the callback if there is no error?
<Nikesh>	maybe it just passes callback(false, res, body) ?
<phil22>	hello
<phil22>	don't know if it's the right chan, I have a problem with promises
<phil22>	basically, if I'm inside a then() function, I can return a sync values and everything goes fine
<hipsterslapfight>	well that's a new one ... what's a "EPROTOTYPE" error
*	danmactough_ is now known as danmactough
<phil22>	oh wait
<phil22>	I solved my issue when I was formulating the question :P
<Nikesh>	phil22: :>
*	Guest24033 is now known as orliesaurus
<TyrfingMjolnir>	which tool to use to make a new file with only the code in use?
<vohof>	TyrfingMjolnir: u wot m8?
*	danmactough is now known as danmactough_
<chargen>	wot
<nak>	cool story guys
<nak>	try using more global variables
<TyrfingMjolnir>	vohof: ?
<guy>	I am getting weird behavior that I did not observe in the past
<guy>	"babel-node --stage 0 ./src/bin/mirror-wuaki --help"
<guy>	triggers babel-node --help, as opposed to passing it to mirror-wuaki
<guy>	actually, it triggers iojs --help
<guy>	Never mind then
<Shyim>	Have someone a idea: how can i import a mysql sql file?
<hipsterslapfight>	open it with `fs`, parse it with some sql parser
<Shyim>	I use currently: https://github.com/felixge/node-mysql/. But how can i check is previous query executed?
<RLa>	Shyim, it just queues those queries
<Shyim>	But i must wait for the previous query. I cant insert before the table is created :)
<RLa>	if it's single queue, you do not have to wait
<RLa>	the next query is run internally after previous one completed
<RLa>	it's different when you use a connection pool tho
<RLa>	then you have to worry about it
<RLa>	mysql protocol is dumb and simple and single connection supports only one query at a time
<p15x>	try mongodb
<p15x>	it's a NoSQL database
<RLa>	i have tried it enough
*	itscassa|away is now known as itscassa
<hipsterslapfight>	haha
<hipsterslapfight>	same
*	Spr0cket- is now known as Spr0cket
<erste>	Hi, I'm using Ubuntu 14.04, and I think I "crashed" my NodeJS app, now it doesn't start up anymore, running: node server.js .. will give me Error: listen EADDRINUSE
<erste>	so, how can I check which process is listening to the port 3000? so that I can kill it manually?
<cdunklau>	erste: netstat -nlpt | grep 3000
<cdunklau>	as root
<erste>	12284/node
<erste>	so.. : kill 12284 ?
<cdunklau>	erste: you'll have to decide for yourself
<canthugeverycat>	Hi guys. It's my first time here. So, um, sort of a dumb question, say I know very little (in theory) about relational databases, and I want to use MongoDB. The problem is I can't seem to find a good tutorial that actually covers the databases part and the mongo part
<canthugeverycat>	Could you point me out to the right direction ?
<hipsterslapfight>	why do you want to use mongodb
<erste>	cdunklau, yep, it worked
<erste>	:)
<hipsterslapfight>	is it because it's a name people throw about or because you have non-relational data to store
<canthugeverycat>	It's because I want to use node for backend, and you use javascript syntax for it, that's all.
<canthugeverycat>	(Don't lynch please)
<hipsterslapfight>	canthugeverycat: personally i use postgres, with `knex` to build queries and scaffold, and `bookshelf` if i need an orm
<hipsterslapfight>	using node doesn't mean you have to use mongo
<hipsterslapfight>	(thank god)
<erste>	hipsterslapfight, I'm interested in that also.. from what I've read so far, one of the advantages, is that it allows your .."data" to be more flexible.. since there's no schemas..
<hipsterslapfight>	no, there's schemas, they're just invisible. which only makes them harder to reason about
<hipsterslapfight>	but again, it all depends on the type of data you're storing
<erste>	hipsterslapfight, oh I see
<canthugeverycat>	hipsterslapfight, thanks!
<erste>	I came from the Relational DB side.. another thing.. is that .. mongo DB doesn't have like.. "transactions" right?, you can't rollback
<cdunklau>	postgres has NOSQL stuff too
<RLa>	erste, nope
<RLa>	erste, you just assume you have no issues with disks and network
<hipsterslapfight>	yes with json/jsonb support with 9. .... 4 i think? postgres has very good support for anything you may've wanted mongo for in the past
<hipsterslapfight>	mongo makes a lot of assumptions, see aphyr's three or so posts on it for more information :v
<cdunklau>	we should just use mangodb instead. it's not web scale, it's Universe Scale
<erste>	RLa, hmm.. that's if your operations are in one single documents right?
<hipsterslapfight>	isn't mangodb the one that just throws the data down dev/null?
<cdunklau>	https://github.com/dcramer/mangodb
<cdunklau>	hipsterslapfight: bah!
<hipsterslapfight>	hah
<AppAraat>	hello everyone, what would you say are the best skills to learn if you would do back-end developing in Node?
<cdunklau>	hipsterslapfight: i especially like the DURABLE option https://github.com/dcramer/mangodb/blob/master/server.py#L30-L32
<cdunklau>	hipsterslapfight: nice that you can tell it to flush the buffer and fsync the null device.
<hipsterslapfight>	cdunklau: yes, i know somebody that once gave a talk at a conference about replacing mongodb with mangodb
<hipsterslapfight>	apparently he had three or four people ask him afterwards how to implement it ...
<cdunklau>	hipsterslapfight: oh god tell me it was recorded
<cdunklau>	please
<hipsterslapfight>	haha no unfortunately not
<cdunklau>	nooooooooooo
<cdunklau>	hipsterslapfight: the code is funny, so is the readmy
<cdunklau>	hipsterslapfight: readme*... however the github issues are way, way funnier
<thundder>	quit
<erste>	btw.. one last question... I've heard that MongoDB is really really good with Big Data.. but if I'm developing softwares for small (really small) companies... will ..using MongoDB make my development easier or quicker?
<cdunklau>	erste: i don't understand at all what you mean, there are way too few buzzwords in your question
<p15x>	do you need NoSQL and webscale?
<erste>	not really
<cdunklau>	p15x: aaaah that feels better, thanks
<cdunklau>	erste: dude just use postgres
<erste>	cdunklau, :P
<cdunklau>	it's The Database.
<lennym>	cdunklau speaks the truth
<erste>	yea.. I guess so
<lennym>	If you have relational data, or might ever want to build a feature that might ever want relational data then use postgres.
<erste>	because most of the tutorials I came across with NodeJS.. uses Mongo
<lennym>	(or at least use "not mongo")
<erste>	I see..
<erste>	Thnks people :D
<cdunklau>	lennym: or hey use postgres anyway
<cdunklau>	lennym: because hstore
<erste>	ah right
<erste>	one more thing..
<asteele>	postgres is the new hot shit, mongo is past its prime it would seem
<p15x>	personally I prefer NoSQL
<erste>	is there a "Hibernate" ? for Javascript
<p15x>	But I've never used mongodb
<erste>	is there a framework to help with CRUD operations for Node?
<fredrikslattman>	If you have the dollarz dynamodb could be an alternative as well (if you're on AWS). Don't need to care about sysadm stuff or maintenance for the db
<erste>	just found this: http://bookshelfjs.org/
<erste>	Javascript ORM for Node.js
<hipsterslapfight>	yes i mentioned it earlier
<erste>	;P
*	erste is now known as erste-away
*	erste-away is now known as erste
<TyrfingMjolnir>	express deprecated req.param(name): Use req.params, req.body, or req.query instead
<AppAraat>	I'm sorry if my question was too vague, how can I improve my question?
<TyrfingMjolnir>	I tried renaming the function req.param to req.params
<p15x>	no its not a function
<p15x>	req.params.thing
<TyrfingMjolnir>	Oh
<TyrfingMjolnir>	nice
<TyrfingMjolnir>	AppAraat: What would you like to do?
<TyrfingMjolnir>	What does backend mean for you?
<TyrfingMjolnir>	I'd say doing your own implementation using express, node, and some sort of database would be a reasonable start
<sg555>	Is anyone using bunyan-logstash output their logs to ES and then able to filter on level in kibana?
*	sg555 is now known as simong
<p15x>	all those words make me scared
<txdv>	katana
<greves>	how do i get node installed on ubuntu? if i just install it according to the instructions (https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories) i can't do npm install -g as user, it doesn't set up the directories correctly
<hipsterslapfight>	greves: that is not the recommended way
<greves>	this script is not right? https://deb.nodesource.com/setup_0.12
<hipsterslapfight>	you can use `apt-get install nodejs-legacy` (iirc, that's the right name) or you can use `nvm` or you can install from source
<asteele>	AppAraat you will want to learn the internals of javascript, and then how to use some of the more popular node libs + frameworks that your app will need
<erste>	greves, https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server
<erste>	I've tried the method 1..
<erste>	didn't work well..
<hipsterslapfight>	yes i would not use the first method there
<erste>	then someone suggested me to install it with NVM
<erste>	which is method #3 on the link I gave you
<erste>	in short, from what I understood.. it will get the source-code, compile it, and install it, takes a long time.. lol
<erste>	but then, it allows you to have multiple Node versions..
<greves>	so nvm is good?
*	Wiched is now known as Guest38768
<erste>	yep.. I think :P
<erste>	I'm using Ubuntu 14.04 LTS
<hipsterslapfight>	yes
<txdv>	jeez, so many disconnects
<erste>	lol
<greves>	i'd rather just get the single version i want (12.2) but have it set up the node_modules folders and PATH correctly...
<TyrfingMjolnir>	greves: Got node running?
<AppAraat>	TyrfingMjolnir: I suppose everything which is not an interface which browsers then use? I want to know which essential skills a Node developer has to have, and optionally what skills would be beneficial on top of that.
<hipsterslapfight>	AppAraat: http://nodeschool.io provides a good overview
<hipsterslapfight>	of both essential and optional skills
<Cyberuben>	Anyone's got a suggestion what to do with iwant.pizza?
<TyrfingMjolnir>	greves: http://wethecomputerabusersamongst.blogspot.com/2014/08/install-node.html
<hipsterslapfight>	TyrfingMjolnir: no, that's not what they want to do
<hipsterslapfight>	it'll patch over one of the issues they're having, but in the long term they're still running an old version of node
<AppAraat>	asteele: internals as in the language on an expert level instead of for example up until everything front-facing?
<AppAraat>	hipsterslapfight: thanks, I'll look into it.
<TyrfingMjolnir>	greves: Why use node on ubuntu when there is illumos?
<TyrfingMjolnir>	Or smartos
*	whyhankee is now known as Guest44405
<txdv>	Typo: becausae fuck illumos
<asteele>	AppAraat yeah like a strong understanding of things like prototypes, using async/sync, scoping, hoisting, promises, etc.  a solid understanding of the internals will give you more confidence with everything you write
<Typo>	10-4!
<Cyberuben>	Is there a clever way to detect what linux distro a PC is running?
<Cyberuben>	I'm trying to make an install.sh but I want to make sure it runs on all distros
*	T_Rex_ is now known as T_Rex
<greves>	didn't get node running yet, no
<greves>	well, node is running but i can't do npm install -g
<greves>	that's the only issue
<txdv>	which npm
<greves>	well npm prefix -g shows /usr, which is owned by root
<greves>	and if i change npm to use a different prefix that i've got access to, like ~, then my paths are messed up and i can't call bin files that are installed with npm
<txdv>	so you need to be logged in as root?
<greves>	right but i dont want to `sudo npm install -g` stuff
<greves>	i guess i need to configure it manually? just surprised that it doesn't work that way by default...
<txdv>	use nvm
<txdv>	for user directory based node/npm installations
<greves>	ok that's what hipsterslapfight recommended too so i guess i'll give it a go hah
<txdv>	9hipsterslapfight?
<hipsterslapfight>	me
<txdv>	hipsterslapfight: what the, how did you come up with that nick
<greves>	he/she likes having hipsters fight on his/her lap, what's the big deal?
<greves>	:P
<txdv>	hipster-slap-fight
<txdv>	or hipsters-lap-fight?
<greves>	or hips-tersla-pfight (german for 'hipster-slap-fight')
<txdv>	there is no german word for tersla
<txdv>	and fight in german ämpfen
<greves>	lol
<greves>	i was joking dude
<rominronin>	Hips Ters Lap Fight
<txdv>	im german, we dont understand jokes
<rominronin>	lol, The Austrian’s are very similar
<bberry>	i learned this fun one the other day "backpfeifengesicht"
<rominronin>	gesicht is face right?
<bberry>	yeah
<rominronin>	Pfeifen?
<txdv>	backpfeife means face slap
<bberry>	it means "face that is in need of a slapping"
<rominronin>	lol
<bberry>	something like that, anyawy
<stephen>	Ive forgotten the name of a design pattern
<greves>	txdv, germans do too understand jokes don't give your fellow countrymen such a bad rep :P
<rominronin>	I love how you can string words together like that in German, however, when I try it people stare at me blankly (probably thinking Backpfeifengesicht)
<stephen>	It's the one that adds a before() and after() handler around every function
<bberry>	stephen, http://addyosmani.com/resources/essentialjsdesignpatterns/book/
<AppAraat>	hipsterslapfight & asteele: any recommendation on Node trainers?
<stephen>	See, Facade fits, but that's not it.
<stephen>	This pattern had a 4 letter acronym
<rominronin>	is there a web-dev channel?
<greves>	#web
<rominronin>	thanks @greves
<hipsterslapfight>	txdv: slap-fight, yes. also i didn't come up with it i borrowed it from a friend many years ago
<greves>	wow i must have done `vagrant up` at least 30 times so far and still can't get it just how i want :P
<greves>	hipsterslapfight, i liked it better when it could have been lap-fight
<hipsterslapfight>	it can be whatever you want it to be
*	percY is now known as percY-
<greves>	what if i just want it to be something simple like 'charles'
<WordiestGnome>	Hi, Do questions on NPM packages go to a different channel?
<bberry>	wow... just discovered that "woot" is in the dictionary...
<greves>	hurray nvm & vagrant finally working. i think.
<stephen>	HAH
<stephen>	AOP
<stephen>	That's it
<greves>	WordiestGnome, probably depends on the package...
<WordiestGnome>	wiredep, I've also got an issue with browser-sync but i'll move onto that one later.
*	danmactough_ is now known as danmactough
<greves>	ok why does node installed with nvm not see my environment variables?
*	kyle_ is now known as Guest85206
*	itscassa is now known as itscassa|away
*	danmactough is now known as danmactough_
<AppAraat>	has anyone set up node.js on a raspberry pi? What do you have to say about its performance?
<proshot>	ehm not on a raspberry pi but i did it on an android phone AppAraat
<AppAraat>	did it eh, scale well enough? :p
<GreenJello>	ljharb, you around? I need to use nvm in a bash script, but it's set -e which nvm doesn't seem to like, any tips?
<GreenJello>	should I run it in a bash -c?
<erste>	Hi, Gulp related question.. I have put my question in comments: http://pastebin.com/fKhK4Kq8
<GreenJello>	AppAraat, don't expect it to be fast
<GreenJello>	you should be using lower level languages on very restricted hardware
<hipsterslapfight>	i particularly like the idea of pixie
<hipsterslapfight>	for restricted hardwary
<hipsterslapfight>	it's closure by the way of pypy
<AppAraat>	yeah I don't expect it to be blazing, but I'm kind of limited on hardware to test it. Could I use it to also learn a bit more about optimizing code for speed?
<GreenJello>	not really
*	danmactough_ is now known as danmactough
<AppAraat>	understood, I'll try to just use a VM in that case.
<sim642>	I've set up node on my rpi but I don't remember anymore if I actually used it for anything
*	danmactough is now known as danmactough_
<tarkus>	How to pass data from one route handler to the next down the pipeline?
<lennym>	tarkus - in express?
<tarkus>	ah, sorry, yep in express
<lennym>	tarkus: Just add it to a property on req is the normal approach.
<lennym>	tarkus: For example, a lot of auth libraries will write to req.user
<tarkus>	lennym, but.. this way you risk to overwrite some existing property of req?
<lennym>	tarkus: Potentially, yes
<tarkus>	looks like code smell
<lennym>	Be intelligent about your name(spac)ing
<lennym>	What would your ideal (non-smelly) implementation look like? The req/res are the only persistent things through the request pipeline, so there aren't really any other options.
<lennym>	Without leaking global state anyway, which you *really* don't want to do.
*	edoardo is now known as Guest7815
*	lance|afk is now known as lanceball
<TheAceOfHearts>	I think modifying req object in your app is fine
<TheAceOfHearts>	I modify context in koa to add my models
<sshade>	Hi! Can someone help to deal with stream? I have vinyl file stream and then .pipe() it through function that makes REST request with restler. The thing is: it's too fast and starts making multiple requests at the same time and hits API throttle limit. Is there a way to make stream pause until value is fully processed?
*	itscassa|away is now known as itscassa
*	Guest33961 is now known as greves
*	tackleberry_ is now known as tackleberry
*	dan2k3k4k5 is now known as dan2k3k4
<softinio>	what is peoples opinion of the loopback framework from strongloop? Anyone used it ? http://loopback.io/
<bberry>	why is nginx (or some other application) almost always used in front of a node http server?
<hipsterslapfight>	bberry: because it's good at static files and also good at routing requests through the server to where they need to go
<hipsterslapfight>	whether you have a bunch of apps, or some static sites there too, etc
<bberry>	i see
<Farbdose>	hi every one, i have some trubble setting up nodejs on my windows xamp - for some reason as soon as any file or folder is a symbolic link the node.exe is acting like the file isn't there at all ... any idea?
<Farbdose>	*trouble
<Sharaal>	Farbdose: no idea, but I would not try to run it with windows and especially not with xamp
<myndzi>	symbolic link on windows? are you talking about shortcuts? because they're very much not the same thing
<step1step2>	is there a way to simplify this? http://kopy.io/5TPzh
<Farbdose>	the server is running on linux ... ervery thing is fine there... but for my local test server i have a windows with xammp ... and i wanted to link some files from my git folder into the nodejs folder... i used hardlinks but for some magic reason they started to act like the are copys....
<myndzi>	there is an equivalent of symlinks but iirc hardlinks isn't it either, i forget the difference though
<myndzi>	step1step2: don't really have any idea what you're doing so i wouldn't know
<loosh>	mklink is the command i believe for windows, it's basically a symbolic link
<loosh>	https://technet.microsoft.com/en-us/library/cc753194.aspx
<loosh>	more info..
<loosh>	maybe, /j is what you are looking for.
<loosh>	or /d, even
<loosh>	links are handled different in windows. it's very strange, but anyway - i would just suggest not doing it on windows.
<Farbdose>	yes thats exactly what i tryied.... i used /H to link the files and node was able the see them but for some reason the link now acts like a copy... its not connected to the original anymore
<Farbdose>	ok what would you do to get the files from the github repo into the server`?
<loosh>	try /j, maybe - i'm not too sure of the functionality
<loosh>	lol use the linux git client?
<loosh>	git pull ??
<Farbdose>	._.
<loosh>	i mean unless you have a really really good reason for using windows...which i have a hard time seeing
<Farbdose>	the well ... the directory structur of the repo isn't identical with the node server structure
<loosh>	what do you mean
<Farbdose>	uhm windows is my main os... to lazy to install a linux and reboot everytime for coding
<loosh>	vmware or virtualbox?
<Sharaal>	+ vagrant on top of them
<Farbdose>	well ... when i have to do so much ... its shorter to simply drag and drop the files from the github repo
<Sharaal>	and getting files of another git repo into the server? sounds like you want to use npm?
<Farbdose>	we are developing a custom extension for a specific server.js with a extension interface
<Sharaal>	and?
<loosh>	vagrant is a little overkill if you only need 1 vm to develop on.
<rashkov>	What about writing a script to pull the repo and move the files over for you?
<Farbdose>	well the extension is only a part of our repo so i can't simpy clone the repo into the nodejs folder
<Sharaal>	sounds like a broken architecture together with developing on the wrong os
<loosh>	^
<Farbdose>	rashkov: looks like there is no way around that
<Sorella>	joepie91___: the idea of having a language that unifies the server side and the client side is neat. I'm not sure Opa does that well (I haven't tried it, just glanced over their docs/features). But they have many things that I've been wanting to implement in Purr as well, such as first-class HTML and databases.
<Farbdose>	hmm yae
<Farbdose>	but i have no influence there
<Sharaal>	get some influence to change it
<Farbdose>	ok tanks guys ( i will go with the copy script ._.)
<rashkov>	also
<rashkov>	I think git will let you clone just a folder from a project
<rashkov>	instead of the entire repo
<Sharaal>	no
<Sharaal>	thats not how git work
<aleator_>	I'm new to node.js so I don't know if this is considered a problem, but I get "TypeError: Failed to decode param '%-895844520e' from the express-library, which fails to handle error in decode param. Is this kind of behaviour considered to be a bug in the node-land? (the service doesn't really crash, but..)
<rashkov>	pretty sure you can
<myndzi>	so i just heard in a sprint that apparently there was a problem with users entering text with quotes? curly braces? something or other, and angular
<rashkov>	pretty sure I've done it
<Sorella>	It lets you clone specific branches
<rashkov>	hmm
<Sharaal>	rashkov: pretty sure you can't, git is not svn, in svn it works
<breakingthings>	You can
<breakingthings>	It's not pretty or easy
<cloudbender>	peeple
<breakingthings>	but it's definitely a thing you can do.
<myndzi>	i hate angular so i know very little about it, but i know enough about templating to know that this means something's being done wrong
<breakingthings>	You don't use "clone" for it, though.
<myndzi>	i'm wondering if anyone knows of common reasons/mistakes this kind of thing could be a problem?
<cloudbender>	Anybody using rethinkdb ?
<breakingthings>	You have to init the repository and add remotes manually and then checkout things you want manually
<rashkov>	yeah that was it
<breakingthings>	myndzi: Whatcha mean
<Sharaal>	never saw something like that ^^
<Veejay>	Hello everyone, not sure where I should be asking that question, since this here channel is full of JS programmers, I figured it'd be worth a shot. I am looking for a library to diff two JS object literals (pass two objects, it produces an object describing the diff)? Is there such a thing in the JS ecosystem?
<rashkov>	either way you'd need to issue more than one command so you might as well write a script at that point.. plus yeah it's probably an abomination
<breakingthings>	Sharaal: It's not something you'd generally do, but git is pretty flexible.
<Veejay>	Something that created a consensus on quality and usage amongst the community
<Sorella>	Veejay: yes.
<myndzi>	breakingthings: i haven't looked at the code yet, but it looks like they are mixing data with the interpreted angular markup
<Veejay>	Sorella: Awesome, do you remember the name?
<myndzi>	and are telling me for some reason they can't escape the data
<Sorella>	Veejay: just search for "diff" in the npmjs.org website, there are many packages that do that, and they work differently. Pick the one that solves you problem the best/etc
<breakingthings>	myndzi: "they"?
<myndzi>	they as in the people who worked on this code
<breakingthings>	ah.
<Veejay>	Sorella: Thanks. I was more looking for community guidance on this one. I might find several one of them and not necessarily know which one to pick in the end.
<breakingthings>	I don't know exactly what you're implying by "mixing data with the interpreted angular markup", I can only imagine you're referring to them doing some sort of... awkward/complex expressions in the templates
<Veejay>	But OK, I'll give it a look, thank you
<Veejay>	flitbit/deepdiff seems to be what I'm looking for
<breakingthings>	myndzi: And if by escape you mean like sanitizing html, then yes you can do that.
<myndzi>	breakingthings: i'm a bit vague on what's going on still too
<myndzi>	but say
<myndzi>	you're using php to put data content in an angular template
<myndzi>	anything meaningful to angular in that data content is going to be interpreted when angular does its thing
<breakingthings>	This already sounds terrifying.
<myndzi>	which is why i want to fix it
<myndzi>	it's something like that sort of thing
<Sorella>	Oh god
<myndzi>	and i was hoping to get a read on common mistakes and/or fixes to give me a leg up in fixing it
<honestemu>	I am trying to constructing a JSON object after several asynchronous calls. I am currently chaining promises. Like, each asynchronous call is going to give a piece of this JSON object. Is there a better way to to do this than storing each piece as a variable? Or passing an additional argument to the next async function in the chain?
<Sorella>	That sounds like Cthulhu-driven programming
<breakingthings>	^
<myndzi>	i'm currently engaged in an argument with one of the devs trying to explain why scrubbing the data doesn't make sense
<breakingthings>	myndzi: So what specifically are you trying to fix here?
<myndzi>	the problem :P
<breakingthings>	Well yes
<breakingthings>	but the problem is that php is involved and doing anything at all
<Sorella>	myndzi: I'd just send a JSON with the data, then do all the things that needs to be done with that data in JS
<myndzi>	well yes, but thatw as an example
<myndzi>	i'm not sure that's the actual cause
<myndzi>	Sorella: that's the tack i'm imagining too
<breakingthings>	that would be the correct way to go about it, yes
<greves>	can anyone good with webpack please help? i've been at it all day
<myndzi>	the php thing is *a* way this kind of thing could happen; i was wondering if there are any common ways that angular programmers make this sort of mistake
<greves>	2 days actually
<breakingthings>	I was looking for more like... an example of what they're doing right now so I can offer solutions to it that don't ruin your next month
<breakingthings>	:p
<greves>	https://bpaste.net/show/e4972a4a6c1f
<greves>	my webpack.config: https://bpaste.net/show/6c03d9a6b472
<myndzi>	well if it's the php thing
<myndzi>	presumably we can just render the content into variables in a script tag
<myndzi>	i'm figuring either the data isn't readily available via ajax or nobody wants the extra round trip
<breakingthings>	Eh... kinda.
<breakingthings>	It violates everything angular
<myndzi>	i don't know what "everything angular" is
<myndzi>	if you have data and a template, "everything angular" is "make a bunch of extra ajax calls"?
<breakingthings>	Well, you would never deliver the data with the template.
<myndzi>	that seems wasteful
<breakingthings>	You would always retrieve the data via an ajax request
*	abradley__ is now known as abradley
<breakingthings>	The problem it sounds like is that they are trying to use angular on a standard page-by-page website
<breakingthings>	angular is an SPA framework
<breakingthings>	Normally you'd just deliver an index page that delivers the base of the angular app
<breakingthings>	and from there everything would be ajaxed
<myndzi>	^ this is probably the case
<aleator_>	If a node.js webserver (express) prints exceptions to the console, is that considered to be a problem?
<Sharaal>	why not just json_encode the data into the template?
<phpmiddleman>	im getting npm ERR! Failed at the gulp-ngdocs@0.2.10 install script 'bower install'.  our bower is in node_modules/.bin.  help
<breakingthings>	Well, you can do that sort of thing the problem is getting it "in" to the angular app
<breakingthings>	Angular has the hots for dependency injection and whatnot so just adding global variables, while they work, is considered bad practice
<breakingthings>	Then again you're kind of going to have to prepare for pain when you try to incorporate angular into a traditional existing website
<myndzi>	are there any kinds of angular-interpreted things that ng-non-bindable wouldn't take care of?
<myndzi>	i feel like most of the magic stuff is in element attributes and such
<breakingthings>	I'm fairly certain ng-non-bindable directs angular to completely ignore that element in the DOM
<breakingthings>	so anything inside of that should go completely untouched
<myndzi>	ok
<myndzi>	that appears to be the approach being taken
<breakingthings>	Yeah, if the objective is to escape the bindings to output {{ foo }} directly to the page, then wrapping it in a ng-non-bindable element is the correct approach
<andrc>	Hi. Hopefully a quick question. What would be the best way to keep client specific data (lets say an array)?
<myndzi>	k thanks
<breakingthings>	np, gl with that zalgo
<myndzi>	luckily i don't have to do anything about it
<myndzi>	:P
<breakingthings>	hehe
<breakingthings>	good
<myndzi>	my alarm bells just went off when i heard something that sounded like "manipulate the data so <templating thing> doesn't interpret it"
<derbie>	Hey! app.get('/settings' does a search for all the users and sends the number of users to the view. The view contains a button to delete all users. app.post('/settings' will handle clearing all the users, then render the page again with the number of users and that clear button
<breakingthings>	why is it that php is outputting templating-style-but-not-to-be-templated stuff anyway
<myndzi>	it's as you said, trying to work angular into a non-SPA
<derbie>	Instead of having duplicate code of searching the database for users in POST again, is there a way to tell it to go an run the app.get('/settings......) method from within app.post('/settings....)
<breakingthings>	yeah, but I don't get how that is ever getting to angular
<breakingthings>	shouldn't php be delivering the template with those already replaced
<myndzi>	i don't know what you mean
<breakingthings>	PHP is processing templates to add data and whatnot before delivering them for angular to make use of, right?
<derbie>	Let me rephrase that. Is there a way to call an app.get() from within an app.post callback function ?
<myndzi>	that's my understanding
<myndzi>	the problem was that some user-content included {{ }}
<myndzi>	so angular was interpreting it
<breakingthings>	oh ok
<breakingthings>	thats what I was trying to figure out
<myndzi>	i heard someone talking about scrubbing data
<myndzi>	and i was like wat, no, that's not the solution
<breakingthings>	yeah no you were right
<breakingthings>	they dum
<breakingthings>	tell them lrn2escape on output
<myndzi>	or better, just let the template engine (angular) do its job, and give it data
<symbol>	It's my understanding that Node doesn't need delayed jobs for tasks like sending an e-mail as I would with Ruby?
<breakingthings>	Ruby doesn't "need" them either
<andrc>	derbie: probably not.
<andrc>	derbie: you could however make that searching of the database a function and call it on both?
<Che-Anarc>	Is it a problem to treat  Promise.catch(...)   within try { .. } catch { }  blocks rather than async .catch() ?
<symbol>	breakingthings: Well not need but it'd be blocking
<breakingthings>	Sure.
<symbol>	I suppose I could contrive some closures in ruby :P
<breakingthings>	The point I'm moreso trying to make is that delayed jobs are not just some sort of async solution
<breakingthings>	They can be used in node-land as well
<Sorella>	Che-Anarc: not sure what you mean there
<breakingthings>	But if your question is "node can asynchronously send an email without much extra overhead" then the answer would be yes.
<Sorella>	Che-Anarc: Promise.catch is not similar to try/catch, it just lets you transform the failure and create a new promise with that failure
<symbol>	breakingthings: You are a scholar and interpreted my madness perfectly.
<Sorella>	(Yes, it's an horrible method name, since it doesn't "catch" anything)
<Mia>	Hey all, I'm trying to install "pm2" with the following command "npm install pm2@latest -g"
<Mia>	but I get a response "Evacuation Allocation failed - process out of memory"
<Che-Anarc>	Sorella,   so it has no relation to try / catch in the traditional sense? - is there a way to not use .catch()    to achieve the same end?
<Mia>	what the hell is this
<breakingthings>	Che-Anarc: What is "the same end"
<breakingthings>	Che-Anarc: To handle an exception?
<Sorella>	Che-Anarc: it has no relation to try/catch. `doX().catch(function(e){ return f(x) })` is equivalent to `doX(function(error, data) { if (error) done(f(error)); else done(null, data })`)
<Che-Anarc>	breakingthings,    well to handle the .catch.
<Che-Anarc>	Sorella,   thanks thats what I thought.
*	KenanY_ is now known as KenanY
<derbie>	andrc: thanks :)
<Mia>	My mongo uses a lot of ram and it's expanding, why can it be?
<Mia>	I mean it's for a small application and my mongodb is already using like 250mb ram
<andrc>	caching?
<Mia>	and a month ago it was around 50
<Mia>	andrc - how should I deal with this?
<honestemu>	I am trying to constructing a JSON object after several asynchronous calls. I am currently chaining promises. Like, each asynchronous call is going to give a piece of this JSON object. Is there a better way to to do this than storing each piece as a variable? Or passing an additional argument to the next async function in the chain?
<Mia>	it feels like it's keeping everything in mem
<andrc>	why is that an issue though?
<sambengtson>	Anybody have any experience with pm2 and keymetrics?  Boss is a little paranoid about using 3rd party services so I'm trying to find people who are currently using it
<hipsterslapfight>	pm2 yes, keymterics no
<sambengtson>	Ok.  Seems like a decent monitoring solution just not sure about the reliability and all that
<jfhbrook>	third party services are great
<jfhbrook>	just in general
<fredrikslattman>	pm2 yes here as well
<jfhbrook>	but what does pm2 have to do with 3rd party services?
<sambengtson>	I believe keymetrics was built by the guys who made pm2.  They have build an integration between the two
<sambengtson>	For example, you can type pm2 interact and it will automatically start a monitoring session on keymetrics
<sambengtson>	https://keymetrics.io/2015/02/23/keymetricspm2-launch/
<beaky>	hello
<beaky>	how does node know where to loook when i reuqire stuff
<Aria>	If the require starts with . or /, it looks in that path, resolved relative to the file where the require statement is
<honestemu>	Okay. Did a bit more research.
<Aria>	If it does not, it's looked up in node_modules, starting at the current directory, then each parent directory.
<honestemu>	Looking into bluebird's .props method.
<honestemu>	https://github.com/petkaantonov/bluebird/blob/master/API.md#props---promise
<Aria>	(current being the directory the file is in, not the process cwd)
<Aria>	beaky https://nodejs.org/api/modules.html has all the details
<beaky>	ah thanks
<honestemu>	If anyone is familiar with bluebird, a try starts a chain of promises, right?
<beaky>	btw what directory structure conventions do ppl follow to make requireing stuff painless
<breakingthings>	honestemu: Yes.
<breakingthings>	You can quite literally see it say that in the first line of the doc for try ;P
<breakingthings>	https://github.com/petkaantonov/bluebird/blob/master/API.md#promisetryfunction-fn--arraydynamicdynamic-arguments--dynamic-ctx----promise
<honestemu>	breakingthings: Okay. But the first thing I want to do is a join. So a group of promises that will only continue when all is resolved. How would I go about doing that?
<Aria>	Promise.all(array of promises)
<honestemu>	Aria: But where does the try come in?
<Aria>	That depends. What value is it representing?
<honestemu>	Value?
<honestemu>	Umm...
<honestemu>	Let me explain a bit clearer.
<moleWork_>	there is no try, there is only do
<honestemu>	So have 3 asynchronous calls that return promises. One that gets a name, One that gets a version, One that gets a url. I want to create a JSON object with the values these return. I think the best way to do this is with a join. My confusion is that I think I have to put a try first, even though I want to start with a join.
<honestemu>	lol moleWork_
<ian_mac>	you can really tell that Star Wars is fiction - otherwise Yoda would clearly know that there is such a thing as try in most modern programming languages.  Either that or by the time we get to Stars Wars time the notion of try has been eliminated and they've finally gotten to a point where software never fails.
<moleWork_>	i'm pretty sure that .all function will resolve all your results into an array in which you can build the json object... should be eezepeeezy
<Aria>	Indeed.
<ian_mac>	all.spread
<greves>	how can i know if npm is ever done when it just keeps spinning for a long time?
<Aria>	Promise.all(promiseOfName, promiseOfVersion, promiseOfUrl).then(function makeJSON(bits) { return { url: bits[2], version: bits[1], name: bits[0] } })
<greves>	i've got --verbose turned on and the last line is: npm verb unlock done using /home/vagrant/.npm/_locks/babel-core-d7a4a5f3b327606a.lock for /srv/node_modules/babel-core
<moleWork_>	greves, if it's spinning then it's not done
<Aria>	greves: In theory the spinner means it's actually working at something.
<greves>	been like this for ~10 minutes
<moleWork_>	the npm repo has been moved to the moon
<node-slackers>	hint: maybe it's waiting for credentials
*	node-slackers is now known as node-slackers1
<greves>	credentials?
<Aria>	Oh, a possibility.
<node-slackers1>	try hitting "enter" and see if it fails or not
*	node-slackers1 is now known as node-slackers2
<Aria>	If it asked for a password and that's buried in the logs
<greves>	enter it just keeps spinning
<Aria>	And is this a current npm?
*	ChanServ gives channel operator status to AvianFlu
<greves>	yup
<node-slackers2>	was it compiling anything?
*	node-slackers2 is now known as node-slackers3
<greves>	not sure, a rather long package.json
<node-slackers3>	try removing packages one after the other
*	node-slackers3 is now known as node-slackers4
<greves>	wouldn't that necessitate re-doing the npm install every time?
<node-slackers4>	it's just for troubleshooting purposes, try removing a package, then npm install, then remove another one, etc...
*	node-slackers4 is now known as node-slackers5
<ian_mac>	a bisecting search would be quicker.
<honestemu>	Aria: Yeah, but what about the try? bluebird says it should the first thing! That is how it easily handles rejections. I feel like if I don't put in a try first, I might run into issues with handling rejecting/errors.
<Aria>	honestemu: where does it say that?
<Aria>	Promises fundamentally capture errors thrown within them, and start calling the catch chain.
<honestemu>	https://github.com/petkaantonov/bluebird/blob/master/API.md#promisetryfunction-fn--arraydynamicdynamic-arguments--dynamic-ctx----promise
<honestemu>	Start the chain of promises with Promise.try
<moleWork_>	try simply creates a new promise, it isn't specially i don't think
<moleWork_>	it probably shouldn't even exist
<moleWork_>	special
<hipsterslapfight>	that wording may be a little confusing, but they're not saying that's something you should always do honestemu
<Aria>	Yes, that's describing what try does, not what you should do, honestemu.
<Aria>	That's descriptive, not prescriptive text.
<moleWork_>	what an excellent way to explain it aria
<Aria>	Hehe.
<honestemu>	Aria:  Actually, yeah. That explains it. So I guess I can start with a all/join.
<breakingthings>	Yes; Promise.try is a way to start a chain of promises; but you already have promises, you just need to bring them together. Promise.try is not the way to accomplish that.
<honestemu>	Now, the next question. Which would be better for my case?
<honestemu>	A join or all?
<breakingthings>	If you can create an array of your promises, use all.
<stride>	if you have exactly those three parts you mentioned earlier, use join
<breakingthings>	Thats true, if it's a static amount join is fine.
<honestemu>	stride: Yeah. Okay. That's how I understood it.
<breakingthings>	my bad
<honestemu>	Cool. Thanks, guys.
<Aria>	Not just guys!
<honestemu>	Oops!
<a--m>	Hi here =)
<honestemu>	Thanks, humans!
<breakingthings>	I identify as an alien
<honestemu>	Whenever I say guys, I almost always mean people.
<honestemu>	Never men.
<breakingthings>	canofworms.jpg
*	Guest92083 is now known as zoite
<honestemu>	Maybe that's just me.
<Aria>	Hehe. Yeah, lots of people say 'guys' indending it to be heard as 'folks'.
<Aria>	But a good portion of us don't hear that.
<hipsterslapfight>	somewhere around 51% of the population :v
<moleWork_>	i call my mom dood if that counts for anything
<moleWork_>	the word dood avoid any gender specification and also alleviates us from remembering names.... true life advice
<shama>	Remember, how others feel about words is more important than how you feel about a word.
<Aria>	Heh. If only. That's definitely perceived as very bro.
<Aria>	Even more a guys club word than 'guys'
<moleWork_>	lol
<moleWork_>	"guys club"
<lennym>	Also, you're not talking to your mother. I call my friends a lot of things that would probably be inappropriate if I used them to refer a stranger on the internet.
<Aria>	Anyway. I'm one of those non-guys.
<moleWork_>	touche
<lennym>	Few are complimentary.
<moleWork_>	the best way is to not say anything cause no matter what, you've offended someone somewhere
<a--m>	I'm looking for some guidance to structure a simple/small node app, I know this is quite generic, but could someone give me some pointers?
<Aria>	a--m: not without some detail, other than equally vague advice.
<a--m>	I recently saw locomotive...
<a--m>	I'm used to work with mvc, so that would make sense to me...
<a--m>	but I don't need much boilerplate code since it will be a simple app that will consume github api and render some views
<Aria>	A very small Express app perhaps
<Aria>	?
<hipsterslapfight>	express sounds like a good start yes
<hipsterslapfight>	maybe look for github modules on npm
<hipsterslapfight>	start tying things together
<Aria>	Yup.
<Aria>	I could happily plug express-enrouten to reduce boilerplate of wiring up route handlers to express a little.
<moleWork_>	also this https://github.com/mikedeboer/node-github
<a--m>	i'm using express and modules for everything I can, but I mean structuring the app by itself, separating responsibilities, routes, controllers... make the app modular
<hipsterslapfight>	i quite like breaking sections of routes up into their own sub-apps or sub-routes (as necessary) so i can just mount bits and pieces together to build an app
<a--m>	since this is my fist nodejs app I don't have background to know what's good / bad
<hipsterslapfight>	but ymmv, express-enrouten is a good choice as Aria mentioned
<Aria>	a--m: Express-enrouten is what we use at paypal to make that a bit more uniform and well patterned.
<Aria>	a--m: And you may want http://aredridel.dinhe.net/2015/01/30/why-mvc-does-not-fit-the-web/ to help clarify the router/controller ambiguity.
<Aria>	I'd say our number one organizational fail at PayPal is people who think that 'route handler' and 'controller' are somehow different. And that 'controller' is a particularly meaningful concept.
<a--m>	=) Looking into it express-enrouten
<a--m>	nice
<hipsterslapfight>	yeah i have no controllers anymore, it's all routers all the way down
<moleWork_>	excellent post
<Aria>	Thanks.
<a--m>	thank you!
<breakingthings>	Aria: best blog title 10/10
*	Aria grins.
<lennym>	I tend to distinguish between routers (things that bind controllers onto routes) and controllers (the middleware functions which are bound onto routes)
<Aria>	Yeah. I call those 'routers' and 'route handlers' respectively.
<Aria>	Since as I went into in that post, controller is a concept stolen from a completely unrelated time and place that really doesn't fit with the web.
<moleWork_>	i call them routers and middleware
<moleWork_>	the best is the MVCMVC pattern
<Aria>	I don't call them middleware, particularly, because they're usually the final handler, not in the 'middle' at all.
<myndzi>	i call them paths and functions :V
<myndzi>	(not really)
<lennym>	I have a separate category for middleware (which is not bound onto any particular route, and rarely terminates except in an error state)
<Aria>	Yeah.
<Aria>	That's what I call middleware.
<Aria>	And then we have to keep in mind that a lot of these particular distinctions are Express, not universal concepts.
<lennym>	So a normal folder structure for an app would be /assets, /controllers, /models, /middleware, /routers, /views, ./index.js, ./server.js
<beaky>	yeah why did mvc and routers become so common to frameworks these days
<Aria>	Rails.
<lennym>	Where index.js exports a router/app and server.js actually listens.
<lennym>	So the app can be required and mounted inside another app if you so desire.
<Aria>	And in PayPal, we have /routes, which contains only things that register route handlers on a router; routers are entirely created by express-enrouten.
<lennym>	(assets is static/client-side stuff)
<Aria>	And a root index.js that usually exports the app, again for that mounting on another app.
<lennym>	Yup, this ^
<Aria>	We have no /controllers unless things get very confused.
<lennym>	Lots of routers is a good way to maintain sanity.
<lennym>	(it also helps performance if you're using express default router)
<Aria>	(We may register several handlers in a single file, but all under a single router.)
<Aria>	Yeah.
<myndzi>	i wound up with app/services, app/models, and app/resources
<beaky>	i have one .router.js file for for every unit of my app functionality :D
<myndzi>	models in this case is swagger models, not orm models
<lennym>	That notorious blog post from netflix a while ago complaining about express routing fell foul of this.
<myndzi>	and resources are swagger resources
<myndzi>	of course this is an api app, no templating or anything
<myndzi>	in the ones with templates there's also a /views i guess
<myndzi>	and probably also /routes
<Aria>	Yeah. But that netflix app was doing other wacky things too. Like re-registering stuff over and over and over, so they really did hit pathological cases.
<myndzi>	pathoLOLgical
<Aria>	PayPal puts templates in public/templates (though our public isn't directly served, we have a build step that makes a .build/ that is served)
<ska-fan>	What's the deal with npm 2? Should I use it or should I use the default version 1.4.28?
<lennym>	Oh yeah, there was a lot wrong with it, but it pointed the blame at express' "big list of regex" router, which would have been moot if they'd nested routers.
<myndzi>	you want 2 if you use private packages
<lennym>	ska-fan: I'd upgrade
<Aria>	ska-fan: Always upgrade.
<lennym>	(insofar as I have upgraded)
<Aria>	ska-fan: there are so many nasty race conditions in 1.4.
<myndzi>	and you probably want to upgrade anyway, but i can't think of any reason it's necessary past that(?)
<lennym>	There a re a lot of nice features in recent versions of npm
<Aria>	You will be bitten. And you may never know it until something crashes with a 'that's funny'
<lennym>	improvements to git dependencies, being able to pass arguments to npm scripts.
<Aria>	(npm 1.4 works great on slow systems. On fast ones, the race conditions pile up and boom.)
<Aria>	(the kind of thing where you get a nice big server and suddenly it fails)
<ska-fan>	Why is npm 1.4 the default version then?
<lennym>	Also, knowing that the code you're running is the same as the docs refer to is not to be sniffed at.
<Aria>	ska-fan: it's not anymore. You're also running an old node.
<myndzi>	it isn't, with 0.12
<lennym>	ska-fan: Are you running ubuntu by any chance?
<Aria>	ska-fan: but the node 0.10 releases ship with 1.x, because they went extremely conservative.
<ska-fan>	I see. lennym: I do.
<Aria>	(which I think is sad, because the break is tiny tiny tiny, and the bugs fixed are huge.)
<lennym>	Yeah, apt-get nodejs on ubuntu gives you a *really* old version
<ska-fan>	lennym: Any particular way recommended for ubuntu to get 0.12?
<myndzi>	build from source? :P
<lennym>	google it, there's plenty of resources.
<ska-fan>	Alright, thanks :)
<myndzi>	i got in the habit of building node from source in 0.6ish i think and just do it by default now lol
<myndzi>	wait, i think i mean 0.8, BECAUSE ubuntu had 0.6
<lennym>	(I don't mean to be obstructive, I just don't remember off tht top of my head, so the first thing I would do to help would be to google it myself)
*	dave_ is now known as MrD504
<myndzi>	sometimes i do people a favor and type in what i would query on google, too
<myndzi>	right after http://lmgtfy.com?q= ;)
<lennym>	Yeah, lmgtfy is the kind of dickishness I try to avoid.
<myndzi>	i think i've only done it once in recent memory :P
<lennym>	(unless I want to deliberately be an asshole, that's not all that uncommon)
<myndzi>	i was mostly joking
<myndzi>	but you could equally well be like http://google.com?q=ubuntu+node+0.12
<beaky>	btw is node.js and io.js planing to combine
<myndzi>	i guess it's /search?q=
<lennym>	Yes, I am entirely joking when I lmgtfy, hence I try to leave it out when dealing with strangers.
<myndzi>	i'm not :P if i do it it's usually for good reason
<lennym>	Unless I know that they know that I respect them, and am acting in good faith.
<lennym>	"Even if you're not being an asshole, don't do things that assholes do)
<lennym>	See also "guys"
<myndzi>	tbh i see it as a way to 1) subtly hint at the case you just mentioned: i would have to google it to answer the question for you, and you can equally easily google it while 2) also giving them the answer
<myndzi>	still because "assholes do it" i usually refrain ;)
<lennym>	Of course, in the time we've had this conversation I could easily have googled, read several of the top results and linked the appropriate one...
<myndzi>	if you're gonna waste my time asking me to google something for you and give you the answer, and i do it, well, you can wait through a couple seconds of silliness ;)
<myndzi>	i also have a habit of memorizing url structures though haha
<myndzi>	so i often just type wikipedia or npm links
<myndzi>	when i know the name of the target
<lennym>	https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories#installing-node-js-v0-12
<lennym>	There
<lennym>	Although id advocates `curl | sudo bash`, which irks me
<lennym>	*it
*	myndzi claps
<ska-fan>	Btw, is there a symlink solution to package duplication in node_modules?
<myndzi>	though he's probably in the middle of compilation anyway :V
<lennym>	ska-fan: npm dedupe
<myndzi>	ska-fan: kind of, but you don't want to use it for that purpose
<Aria>	ska-fan: solution in what way?
<myndzi>	you can use npm link in cases where you're like, developing a module and a module that depends on it and so on
<ska-fan>	Disk space
<lennym>	Or file path install descriptors, which are a nice addition in recent npm versions (although are still a minor faff)
<myndzi>	i didn't know about npm dedupe, interesting
<Aria>	ska-fan: are you running out of disk space?
<lennym>	ska-fan: It's a bit of a hack, but if you have something which is required in a lot of your dependencies, then add it as a dependency of your top level project, then all your instances will use that one instead of installing their own.
<myndzi>	i bet it's >= 2.0 huh? :P
<Aria>	no, npm dedupe has been there since 1.x
<myndzi>	damn
<Aria>	But npm 3 will dedupe inherently as part of the install process.
<myndzi>	myndzi y u not no evrything
<lennym>	npm dedupe has been around for a while I think myndzi - it was certainly on my old ubuntu default npm 1.4
<myndzi>	only problem is it seems that you would have to have the packages installed first?
<Aria>	A clean install will always install maximally deduped.
<myndzi>	nice
<Aria>	But an incremental series of installs will not.
<Aria>	(until npm3)
<ska-fan>	Aria: No but I need to get deployment time down to a few seconds at most, and copying 50-100 mb is faster than copying 200-300.
<lennym>	Of course, it's a pain when module authors assume everything is in ./node_modules and so things fail in unexpected ways when your dependency tree shifts (lookingat you node-sass - https://github.com/sass/node-sass/issues/949)
<ian_mac>	used to have to use dedupe otherwise the grunt tar task would run into file name length issues.
<myndzi>	ska-fan: you might be interested in pm2's 0-downtime restart capability
<Aria>	Why such tight requirements, ska-fan?
<Aria>	Heh, what myndzi said.
<Aria>	Yeah, windows path length issues are nasty.
<Aria>	npm3's maximally flat installs should help a ton
<myndzi>	lennym: traceview threw synchronously if there wasn't a package.json in every folder in node_modules for a while
<ska-fan>	It's not a node application.
<myndzi>	this was fantastic in conjunction with a peerDependencies bug that created empty directories in node_modules
<myndzi>	:P
<myndzi>	moral of the story: assume makes a muss out of ... wait, hmmm
<ian_mac>	wasn't windows it was Linux.
<a--m>	@Aria: so you say mvc make little sense since the flow of actions is unidirectional?
<Aria>	a--m: That's part of it, but it's just stealing a GUI paradigm and wedging the names into a request-response cycle.
<Aria>	Goodness, ian_mac.
<lennym>	Yeah, I used to have issues with grunt that were solved with a dedupe, I think it was to do with watch bugging out over a certain number of files.
<lennym>	The solution was to get rid of grunt.
<Aria>	Yeah.
<a--m>	@Aria: make sense, never though much about this since I work on Frontend app, so mcv make my life easier
<Aria>	Yeah. I don't think MVC is quite the right pattern there either, but it's a lot closer.
<a--m>	@Aria: should wait for your next blog post on that?
<lennym>	I feel sometimes like MVC is one of those terms like REST that has come to (be intended to) mean a few different things to the "pure" meaning.
<lennym>	Most "MVC" implementations are not MVC, in much the same way as few REST APIs are actually restful.
<greves>	anybody good with webpack? can't get it working and i've got a fairly simple project to test, its totally broken: https://github.com/anyong/testing-webpack
<a--m>	lennym that happens with a lot of things, even talking about MVC is understood completely different when you compare framework
<lennym>	And it's just come to mean "separating your wiring, your data and your presentation"
<breakingthings>	Well, the difference is REST is a real thing that can be achieved but people don't understand that it means something other than "urls that return json"
<breakingthings>	MVC doesn't really work 1:1 in the concept of a web application
<lennym>	But you can easily take the principles of MVC and apply them to your architecture
<Aria>	Yeah. The really useful bits are "make views derive from models, and make models unaware of the view concerns"
<greves>	wait breakingthings REST is not just URLs that return JSON? i thought REST stood for Return Express jsoN Text ??
<a--m>	breakingthings: Backbone/Marionette has been working great for me ever... it's mvc
<lennym>	a--m: Hmmm... is it though...
<breakingthings>	greves: I will end you
<greves>	no wait: uRls Expressly for jsoN Text
<lennym>	actualol
<greves>	wait i'm missing the S
<greves>	>.<
<greves>	too tired
<breakingthings>	greves: Return Express jSon Text
<breakingthings>	( ͡° ͜ʖ ͡°)
<greves>	uRls Expressly for jSon Text
<greves>	there we go
<breakingthings>	lol
<lennym>	Maybe it comes from the same place as the X in AJAX/XHR?
<myndzi>	haha
<greves>	that's also how the name `express` came to be used for express.js, a node.js webserver for REST APIs
<a--m>	this kind of discussing reminds me a lot emacs vs vim....
<Aria>	Represent Every State Terifically.
<ian_mac>	yes - the term AJAX always annoyed me.
<lennym>	a--m: I think the difference here is we're all actually agreeing with one another.
<greves>	ian_mac what's not to like about Asynchronous Javascript Always eXact ?
<lennym>	Mark this one in the history books.
<a--m>	oh! talking about AJAX
<a--m>	what about PJAX
<a--m>	=D
<greves>	no but seriously if it wasn't called 'ajax' what would you have us say?
<greves>	that's a pretty succint 4 letter, 2 syllable word for a fairly complicated concept
<Aria>	"HTTP Request"
<myndzi>	haha ^
<greves>	but its a particular type of HTTP requrest
<ian_mac>	Async Request
<Aria>	It's not, really.
<myndzi>	it's not, really
<myndzi>	LOL
<Aria>	It's about as general as a browser allows.
<Aria>	(fetch will be slightly more general, but only a little)
<greves>	then people will have us saying "Areqs" which will come to be pronounced "arax" and with a slight chinese accent: "ajax" - seems like we're screwed either way
<ian_mac>	I suppose I'm one for precise communication over catchy buzzwords
<myndzi>	PCOC = peacock :V
<myndzi>	but i don't know what to do with the B
<greves>	ian_mac Well, I can certainly understand and reciprocate the feeling that you are sharing with us.
<greves>	(aka: 'yeah, i hear ya')
<greves>	and also proving my point which is that: 'ajax' as a word is just fine, because acronyms come to mean different things than what they originally stood for anyway
<breakingthings>	I have to horizontally webscalify my ajax rest api to return xml
<myndzi>	no! he said xml! :(
<Aria>	Yeah. AJAX just refers to a half dozen overlapping concepts.
<Aria>	So I too prefer more specific words.
<a--m>	if you thing that json is js (js)on then AJAX works
<lennym>	It's just teh XML bit that annoys me, I think possibly because I spent a lot of time around 2006 hacking xml because I didn't realise it didn't *have to* be xml.
<avens>	Hi guys, does anyone know if async is still being maintained? It looks like a number of PRs have been hanging around for a long time and the last release was Dec 2014
<Aria>	It is.
<Aria>	Mostly in a 'done, stop trying to add features' way as far as I can tell.
<avens>	Yeah. I can appreciate that.
<avens>	Would like to see some minor improvements still, we'll see things go
<evanshortiss>	And now avens returns...hopefully with a correct username
<ska-fan>	Is a node_modules created with node 0.10 and npm 1.4 compatible/the same as one created with node 0.12 and npm 2.7.4?
<lennym>	ska-fan: some things might need to recompile, but mostly, yes
<lennym>	all you'll need to do is npm install and you'll be fine.
<ska-fan>	lennym: I want to rely on npm-cache which just md5s package.json.
<lennym>	ska-fan: You'll be fine for 99% of modules, some will need to recompile
<Aria>	ska-fan: Yes. Just `npm rebuild` for the binaries.
<lennym>	npm rebuild will do this.
<imAsheep>	HI Keanu73
<lennym>	(thanks Aria)
<Keanu73>	hi..
<Aria>	The breaks between the major versions of npm are one thing: "npm run script" and "npm test" now accept arguments that get passed to those scripts.
<Aria>	And it's a subtle, barely possible to trip set of assumptions that that is even breaking.
<lennym>	Given you need to delimit with `--` I can't think of a way this would be a breaking change without someone having done something very odd.
<Aria>	Odd is not the same as impossible.
<lennym>	Certainly.
<tristanp>	A basic question about unit testing a route for a node backend: suppose I want to test my users route well I can require('./users.js') and then like run the GET method found within and make assertions that's great. But how do I mock the User model that the user route itself `require`s?
<Aria>	It's a pretty strictly interpreted semver.
<lennym>	I wasn;t arguing against it being a breaking change, just agreeing that it is the smallest imaginable breaking change.
<tristanp>	I'm used to unit testing in angular where due to injection everything is easily mocked. I don't know how to approach mocking when the includes are done via node's `require`
<Aria>	tristanp: require-inject is one way.
<lennym>	In that it doesn't break anything in remotely normal use.
<Aria>	Yeah. hence my admonishment to "Just upgrade npm. Do it. You have no reason not to."
*	meandi_1 is now known as meandi
<lennym>	tristanp: I make heavy, heavy use of sinon (and sinon-chai) in unit tests
*	Matachin_ is now known as Matachines
<lennym>	(although this falls down a little when modules export functions)
<tristanp>	lennym: I am very familiar with sinon and mocking. What I'm missing is how to get "in the middle" and get my actual mocks in the hands of the module I'm testing
<tristanp>	I think that require-inject Aria mentioned is what i want
<hohl>	Should the new ES6 class `Set` work in Node.JS 0.12 ? Because I can
<hohl>	't get it working. :(
<Aria>	No.
<Aria>	iojs has it, node 0.12 does not
*	exec_off is now known as exec_s
<hohl>	oh, that's a pity
<hohl>	I wonder because there is a "Set" class available. But it doesn't do anything.
<a--m>	@Aria: looking into express-enrouten means that each route will be set inside each controller? so no routes file with the "map"
<Aria>	Each file is required, and called as a function and passed a router.
<Aria>	Inside you can register whatever handlers you want, whether that's 1:1 and just registering /, or a handful of related things.
<Aria>	The directory structure itself becomes most of the map.
<Aria>	Just the leaf edges of the paths are defined inside the files.
<Sorella>	b> var s = new Set([1, 2]); print(s.has(1), s.has(3)); s.add(3); s.add(1); s.delete(1); print(s.has(1), s.has(3)); // @ hohl
<babelbot>	hohl: ReferenceError: print is not defined     at [object Object]:1:25     at _eval (/usr/lib/node_modules/babel/bin/_babel-node:54:13)     at Object.<anonymous> (/usr/lib/node_modules/babel/bin/_babel-node:74:16)     at Module._compile (module.js:456:26)     at Object.Module._extensions..js (module.js:474:10)     at Module.load (module.js:356:32)     at Function.Module._load (m…
<a--m>	@Aria looking into the first example the `router.post('/', function (req, res) {` looked strange
<Sorella>	b> var s = new Set([1, 2]); console.log(s.has(1), s.has(3)); s.add(3); s.add(1); s.delete(1); console.log(s.has(1), s.has(3)); // @ hohl
<babelbot>	hohl: true false false true undefined
<a--m>	but that is a relative path inside /user/create
<Aria>	Yep.
<Aria>	Since each file gets a router scoped to its path.
<a--m>	@Aria: ok, get it, it's nice
<Aria>	Yeah! I thought so. A really well chosen middle ground for organization
<a--m>	@Aria: I like to use file structure to understand the app, so this is the way to go ;)
<hohl>	@Babelbot: didn't notice that, I tried s.toString() (in console just for testing) and wondered that it is always { }
<hohl>	or doing var s = new Set(1,2,3);  and then just s to print it's contain, nothing is there
<hohl>	however, that's fine - looks like it works already
*	greves is now known as greves_afk
<Sorella>	hohl: you want to use iojs, since Node stable ships with an ancient version of v8
<hohl>	not sure about it - don't have any experience with io.js yet and switching to it, just because of some features which make code fancier is not what I'm ready for
<imAsheep>	NSA
<imAsheep>	NSA kick MI6 ass
*	lizzin is now known as Guest12508
*	Aria has kicked imAsheep from #Node.js (Your behavior is not conducive to the desired environment.)
<imAsheep>	riaa
<imAsheep>	mafiaa
*	Aria sets ban on *!5896ca8d@gateway/web/cgi-irc/kiwiirc.com/ip.88.150.202.141
*	Aria has kicked imAsheep from #Node.js (Your behavior is not conducive to the desired environment.)
<JimmyDB>	perhaps someone is willing to help me.  I am brand new to Node.js.  I am interested to start using a callback to kick-off a function and pass data to that function, but I am having severe trouble with any examples.  http://pastebin.com/YiRRSqsC
<Aria>	JimmyDB: indeed. So the 'register' method is what you're calling back from, so that needs another parameter to supply the callback.
<Aria>	JimmyDB: then where you've marked return not working, call it with the answer.
<JimmyDB>	i.e....  function(uri, callback) and then later return callback(body); ?
<Sorella>	hohl: iojs is just Node, same code base, the very same stuff. The only difference is that it uses a more recent version of v8 and has a different release policy
<Sorella>	(It's even done by the same people who work on Node)
<Aria>	JimmyDB: Yep.
<Aria>	JimmyDB: tradition in node is to callback(null, body) -- error first, to make sure people think about handling it.
<Aria>	JimmyDB: so if error, callback(error here); if success, callback(null, body)
<JimmyDB>	I'm getting a TypeError: undefined is not a function, which I thought meant I was just using my callbacks wrong.
<Aria>	That means you didn't pass a callback.
<Aria>	You have to call yourthing.register(input, function callbackExpectingOutput(err, value) { .... })
<JimmyDB>	sorry, so new to this... not used to callbacks at all
<Aria>	Indeed. Takes a while to get used to continuation passing style.
<JimmyDB>	I followed some tutorials for callbacks, and they all work... I could modify them and they would work... just not once I try to do it with this file
<Aria>	Yeah. This is the other half the coin: implementing something that calls a callback.
<JimmyDB>	ok, thanks.  going to try that <fingers crossed>
*	exec_s is now known as exec_off
<JimmyDB>	Am I on the right track?  http://pastebin.com/ZBS9i87w
<Aria>	Yes. Except the last line.
<JimmyDB>	dang, I think I got it...  var newStream = myrequester.register('http://www.google.com', function callback(err, value){
<JimmyDB>	  showMe(value);
<JimmyDB>	});
<Aria>	Exactly.
<Aria>	Once async always async.
<Aria>	There is no 'return' in async.
<Aria>	(or, well, return means "stop here", not "return value")
<JimmyDB>	ok, that makes a lot more sense!  Thanks!  I wish more of the tutorials would stop cpy/pasting that web server example ;)
<rom1504>	there are returns when using promises though
<hipsterslapfight>	only if you return a promise
<hipsterslapfight>	which really is the same as returning a callback
<hipsterslapfight>	stop here, act on this
<Aria>	Indeed.
<JimmyDB>	I'll remember to treat a return more like a break or local exit
<Aria>	Promises are interesting in that they're immediately values you can return, but they're proxy values so not actually useful until later. But that's hidden inside the fact that dereferencing them is async.
<JimmyDB>	Someone had redone my example from the pastebin using promise and promise-request earlier... but in the end, we couldn't get it to function any better than without the promise additions... oh well, working "native" now :)
<jalcine>	or "sync", promises, in a sense, are a native capability.
*	matthewt is now known as nuggut
*	joepie91___ is now known as joepie91
*	sambengtson is now known as smartsam
<Sorella>	JimmyDB: if you're dealing with callbacks, it helps if you treat them like this: `function add(a, b, RETURN){ RETURN(null /* no error */, a + b) }`, since that's all they're about :)
<JimmyDB>	Ok, cool.  Thanks!
<Sorella>	Though "GOTO" and "CONTINUE" make more sense than "RETURN"
<Sorella>	Callbacks, being glorified GOTOs since forever :D
<JimmyDB>	What?  You don't commonly 'return' to places you haven't been before? lol
<Sorella>	Yup
*	ChanServ gives channel operator status to piscisaureus
<Aria>	Hehe.
<jaawerth>	Sorella: hey, can I get your opinion about this? I decided to go ahead and fix that issue I was complaining about the other day about csp.CLOSED in js-csp myself. Was thinking it might make sense to use a Symbol when available, otherwise an empty object. Does this make sense to you? https://github.com/jaawerth/js-csp/commit/1652c4915afc4343981fc679cf7f640d099cdeac
<jaawerth>	Aria: actually you'd probably have good input on this as well
<jaawerth>	just an empty object works, but it strikes me that this particular use-case makes sense with a Symbol
<Perseus0>	:)
<Aria>	Seems reasonable.
<jaawerth>	(the whole "null for closed channel/stream" thing drives me nuuuts. I hate that about native streams too
<alanhoff>	Hello folks, how can I create a request object programaticaly? So I can inject it into some server
<kevireilly>	Perseus0: (continuation from #javascript) try setting it to the default via `npm config set c:\Users\[username]\AppData\Roaming\npm` while replacing [username]
<Perseus0>	yes
<Perseus0>	C:\Program Files (x86)\Git\local is what i get
<Aria>	Though not sure it needs the complexity of any conditional. If it's available everywhere, use it. If not, don't.
<Perseus0>	will do
<Perseus0>	thanks
<jaawerth>	ahh that was my hamfisted attempt to account for any invalid global Symbol objects
<beaky>	what things are you allowed to require() in node
<jaawerth>	Symbols are pretty messy to use unless you're in a full babel/traceur environment or an engine that actually supports them
*	ninjs is now known as firevolt
<Aria>	Yup.
<Aria>	My stance on such things is "that's nice, I'll use it when it's ready."
<beaky>	what are symbols
<kevireilly>	Perseus0: also should be a capital C, sorry about that
<Perseus0>	np :)
<ljharb>	beaky: primitives that have object equality and can be object keys.
<jaawerth>	Yeah - I was thinking that little test would work pretty well for an environment check, which would make the code forward-compatible
<jaawerth>	heck, v0.12 supports them out of the box
<Aria>	Yeah. But have its API change depending .. ick
<jaawerth>	hmmm fair
<Perseus0>	kevireilly: i get no output and the git prefix is still there
<jaawerth>	well maybe I should just make it an empty object and leave the Symbols alone
<ljharb>	jaawerth: wait, what are you using it for
*	sethette1 is now known as sethetter
<ljharb>	if it's not an object key, just comparison, then an empty object is far faster and easier
<kevireilly>	Perseus0: doh. I missed prefix after set.
<Perseus0>	oh
<Perseus0>	thanks
<Perseus0>	:)
<jaawerth>	ljharb: ah I thought you might have some insight. Basically, I was considering doing this https://github.com/jaawerth/js-csp/commit/1652c4915afc4343981fc679cf7f640d099cdeac
<Perseus0>	yep, works :)
<jaawerth>	ljharb: as a fix for this https://github.com/ubolonton/js-csp/issues/60
<kevireilly>	sweet
<ljharb>	jaawerth: i would just always do an empty object.
<Perseus0>	now install again
<Perseus0>	right? :)
<kevireilly>	yah
<Perseus0>	the gulp
<Perseus0>	thank you
<ljharb>	jaawerth: the problem is that if it's sometimes a symbol, then sometimes it will be a working object key and sometimes it will stringify
<ljharb>	jaawerth: tbh why not just make it a string object?
<ljharb>	jaawerth: like Object('foo')
<jaawerth>	well, it's used as a singular thing, always accessed via csp.CLOSED as the "closed channel" token
<jaawerth>	the reason null drives me nuts is that putting a null value in a channel (which very well could be the result of calling some method) will close the channel (I hate that about native streams too)
<ljharb>	any object is good
<jaawerth>	highland uses an empty object as _.nil to get around this, and I like that approach - I was just thinking a Symbol would match this usecase (a unique signal token) pretty well
<ljharb>	a symbol would work, but if you use that, just explicitly drop support for non-symbol envs.
<kevireilly>	Perseus0: glittery success or we still crashing into the mountain?
<ljharb>	and, if you use symbols, you'd want `Symbol.for` so it'd work cross-realm
<Perseus0>	success but still not being read in the project folder :( kevireilly
<jaawerth>	yeah, and I wouldn't want to do that
<kevireilly>	Perseus0: in the project still need to install locally I guess with gulp
<jaawerth>	ljharb: ah, see, I'm not sure it'd need to be cross-realm. It would always be used via the csp object
<Perseus0>	oh
<ljharb>	jaawerth: right but if i require csp in another realm
<Perseus0>	yeah
<ljharb>	jaawerth: using the symbol registry means they'd be compatible with each other.
<jaawerth>	hmm right
<Perseus0>	I thought it just would work without installing it in the folder, thanks :)
<jaawerth>	wait, wouldn't it just give the same cached value, rather than rerunning it?
<jaawerth>	I suppose you can't count on taht
<kevireilly>	Perseus0: no problem. I guess it is a common dealio with gulp (probably grunt too) and kind of makes sense to establish a project’s dependencies without assuming some global command will be available. As in, it is clear in package.json that xyz is required
<jaawerth>	ljharb: but you think it'd be better to either solely support Symbol-friendly environments or use an object, not attempt to be forwards-compatible?
<kevireilly>	Perseus0: so make sure that was with a --save-dev on there
<Perseus0>	kevireilly: i got an warning on package.json when npm install gulp
<Aria>	jaawerth: I'd use the string-object, and strict equality. You could change out the actual value later.
<Perseus0>	ok ok
<kevireilly>	what was the warning?
<Aria>	jaawerth: csp.CLOSED = Object('closed')
<Perseus0>	no repo field kevireilly
<jaawerth>	hmm interesting
<Aria>	It's a good hack, and has the same properties as symbols from the external point of view.
<jaawerth>	what's the rationale there? (for my own education)? cheaper cmparison?
<Aria>	Except you can't use them as object keys.
<Aria>	Inspectability.
<kevireilly>	Perseus0: ah that is ok, guessing it wasn’t gulp but some other dependency? just means they didn’t declare a `repository` in their package.json (I think, but am not sure)
<jaawerth>	ahh
<ljharb>	jaawerth: because it won't be backwards-compatible if you do both.
<ljharb>	jaawerth: backwards-compatible is just as important as forwards-compatible
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Wed May 13 14:56:43 2015

**** BEGIN LOGGING AT Wed May 13 15:01:02 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<jaawerth>	I suppose Object('CLOSED') == 'CLOSED' being true would be a feature, not a bug
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Wed May 13 15:03:14 2015

**** BEGIN LOGGING AT Wed May 13 15:14:46 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	lanceball is now known as lance|afk
<ASEV>	>> 1 + 2 + 3
<ecmabot>	ASEV: (number) 6
<ASEV>	\0/
<ljharb>	>> var obj = {}; obj[Object('foo']] = 3; obj.foo === 3 @ jaawerth
<ecmabot>	jaawerth: SyntaxError: missing ) after argument list
<ljharb>	>> var obj = {}; obj[Object('foo')] = 3; obj.foo === 3 @ jaawerth
<ecmabot>	jaawerth: (boolean) true
<jaawerth>	huh
<jaawerth>	yeah, I didn't think about that
<jaawerth>	not sure if that's good bad or irrelevant here
<Aria>	Irrelevant for this case.
<jaawerth>	thought as much
<ljharb>	i think it's good
<jaawerth>	potential key conflict after it's cast but I can't imagine many cases where someone would want to use it as an object key
<Aria>	Yep.
<ljharb>	means people can make an object map of sentinel to something else
<ljharb>	like, an error message. or a function to dispatch to.
<jaawerth>	right, without actually a Map.
<jaawerth>	huh, neat
<ljharb>	i can't imagine many use cases where you *wouldn't* want to use it as an object key
<jaawerth>	yeah I can see the potential applications
<jaawerth>	hm, maybe I'll use a less generic string then
<jaawerth>	'csp::CLOSED'
<ljharb>	for that i like using strings that are invalid identifiers (like with spaces)
<ljharb>	keeps it out of tab-complete on dot access
<Aria>	Yeah.
<ljharb>	sure, that works
<jaawerth>	my perl roots are showing >_>
<ljharb>	php for me
<ljharb>	UNEXPECTED T_PAAMAYIM_NEKUDOTAYIM
<steeze>	favorite templating engines? anything with better support for blocks and layouts than ejs, but without the weird nested syntax of jade?
<jaawerth>	ha!
<ljharb>	steeze: what's lacking in ejs?
<ljharb>	steeze: partials usually work fine
<steeze>	ljharb, maybe im using it wrong
<breakingthings>	>without the weird nested syntax
<Drama>	Angular with a restful API (not really what you asked.. sorry)
<steeze>	breakingthings, not weird, but it gets ugly pretty quickly if you have a lot of nested tags
<breakingthings>	gee wait until you see coffeescript
<breakingthings>	and python
<breakingthings>	:p
<steeze>	its not the whitespace, its the tabbing
<jaawerth>	no I agree, jade is weird
<jaawerth>	doesn't make sense to me for markup ;-)
<steeze>	for python it's usually fine, but for ul>li*3>a>etc etc it gets messy looking
<STRML>	I agree, Jade is not my favorite but it can be nice sometimes.
<breakingthings>	Jade is weird for reasons other than whitespace
<STRML>	It's slow for complex templates
<STRML>	I'm a big fan of EJS... no surprises
<steeze>	i dont *hate* ejs, but i came from jinja2 and maybe im just using a weird pattern for my layouts
<breakingthings>	steeze: as opposed to what, <ul><li><a href="#">linktext</a></li>...</ul>?
<breakingthings>	(onelining)
<giuseppesolinas>	hello
<steeze>	well with jade every nested tag goes on its own line
<breakingthings>	right
<GreenJello>	the opening and closing tags give something for my eyes to hang on top
<steeze>	i was just showing the dom structure with emmet like syntax
<steeze>	ohh youre saying the one lining is messy as well
<breakingthings>	I know, but what is your alternative to indentation
<breakingthings>	quite
<steeze>	gotcha
<breakingthings>	you can inline stuff in jade too though it's not any less weird
<breakingthings>	in fact it's more weird
<steeze>	well, i return and tab for most nests, but like li and a on one line.
<steeze>	haha i would imagine that would be more weird. i didnt know you could do that
<breakingthings>	yeah... it's something like uhh
<breakingthings>	li #[a(href="#") link text]
<ljharb>	jade is gross.
<steeze>	okay okay ill quit griping about templating languages. seems that theres no perfect one
<steeze>	like i said, i dont hate ejs. i think i just need to see more good examples of its usage
<deltab>	"To save space, jade provides an inline syntax for nested tags.  a: img"
<breakingthings>	well don't let me deter you from griping just saying to be cross with jade for the more appropriate reasons like the fact that its syntax is really dumb
<breakingthings>	ah, I hadn't seen the colon syntax before
<breakingthings>	might be new
<breakingthings>	idk
<steeze>	oh well. theyre all similar enough to get working. just looking at ways to further improve readability and things
<breakingthings>	if jade was just haml for node we might be having a different discussion but jade is whack
<breakingthings>	:p
<ljharb>	not much, haml's gross too
<breakingthings>	shhhhh don't spread lies ejs heathen
<steeze>	what do you like ljharb?
<ljharb>	html
*	breakingthings covers ears and shouts "la la la"
<ljharb>	and things close to it.
<deltab>	looks like jade with extra % prefixes
<ljharb>	ejs is just html, with some server-side-include-like directives.
<breakingthings>	More like jade looks like haml
<breakingthings>	except without an actually decent syntax
<ljharb>	like erb. or php templates.
<breakingthings>	heyooo
<steeze>	one thing i like about php templating is the if-endif, for-endfor, etc syntax
<steeze>	with ejs, doing something like <% } %> just seems messge and not as clear what's going on. i mean, ive gotten the hang of it, just curious why that's not there
<steeze>	messy*
<deltab>	awkward to type too
<joepie91>	steeze: sounds like you just need a different templating language in JS :)
<ljharb>	it's JS syntax ¯\_(ツ)_/¯
<steeze>	yeah for sure
<ljharb>	also in php, the if/for/etc syntax is horrible
<joepie91>	(also that)
<ljharb>	and i've never seen any self-respecting php codebase allow it :-)
<joepie91>	steeze: https://mozilla.github.io/nunjucks/
<steeze>	i know its js syntax, and i can read and understand it. i just like the look of if, endif
<ljharb>	(cue comments about no php codebase possibly having self-respect)
<joepie91>	steeze: that might be more your cup of tea
*	lance|afk is now known as lanceball
<deltab>	ljharb: which syntax?
<breakingthings>	both <% endif; %> and <% } %> suck imo
<breakingthings>	but of the two
<steeze>	joepie91, oh thank you. looks jjus tlike jinja2, which i like a lot
<breakingthings>	if I see endif I might stab someone
<ljharb>	deltab: http://php.net/manual/en/control-structures.alternative-syntax.php
<joepie91>	ljharb: I've had people tell me that "PHP is already a templater!" for years, unfortunately
<steeze>	breakingthings, haha oh no
<Aria>	Heh.
<joepie91>	steeze: there's also Jade, for something completely different: http://jade-lang.com/
<joepie91>	:)
<steeze>	oh we've been there
<steeze>	i know jade
<ljharb>	yeah this started by us crapping on jade
<joepie91>	ahhh
<joepie91>	was missing context
<joepie91>	:)
<steeze>	ive used a lot of these, and can get them working fine, just wondering if im missing something amazing out there
<breakingthings>	the context is always jade sucks
<steeze>	haha
<breakingthings>	nah not really they all suck
*	joepie91 likes Jade
<breakingthings>	:^)
<joepie91>	well
<joepie91>	insofar one can "like" a templater
<steeze>	breakingthings, okay ill just accept that and get on with actually writing code haha
<joepie91>	I hate Jade less than the others
<breakingthings>	sounds good to me
<joepie91>	:p
<breakingthings>	joepie91: I hate jade because it's not haml ;_;
<joepie91>	.. why do I have this bookmarked? http://hamlet.coffee/
<deltab>	was just about to paste that
<breakingthings>	lol idk
<jaawerth>	handlebars wooooo
<jaawerth>	(I'll show myself out)
<ljharb>	jade is one of the worst
<joepie91>	handlebars looked really obnoxious to me
<steeze>	that begs another question... why so many mustaches
<jaawerth>	because hipsters
<steeze>	handlebars, mustache, yeoman
<GreenJello>	I recommend handlebars... it's so simple
<steeze>	ahh makes sense
<ljharb>	joepie91: please do note that you also like coffeescript, so you should expect your aesthetics to not be widely appreciated
<joepie91>	:)
<jaawerth>	anyway, I like the double curly brackets
<ljharb>	steeze: because { looks like a mustache on its side
<breakingthings>	:{
<steeze>	DOH
<steeze>	ive thought about that question so much. that makes so much sense
<jaawerth>	for yeoman it's hipsters though
<GreenJello>	:{D
<steeze>	hahah yes yes
<jaawerth>	for hipsters, see also: bacon.js
<ljharb>	hogan is a fork of mustache, handlebars is a reimagining of mustache
<ljharb>	(hogan like hulk hogan)
<ljharb>	etc
<jaawerth>	hahaha
<jaawerth>	I wish I had an excuse to use batman.js, because batman. but it's all railsy
*	GreenJello goes back to working on muttinchops
<joepie91>	who needs templaters anyway
<breakingthings>	Well it probably doesn't help that it is abandoned now, jaawerth
<steeze>	is  bacon the reactive library?
<joepie91>	might as well string-concat your HTML
<joepie91>	:D
<jaawerth>	that also doesn't help
<jaawerth>	no
<joepie91>	PHP style
<breakingthings>	gross pls stop
<breakingthings>	this is my ptsd
<jaawerth>	but as you can see, it doesn't make much difference for me seeing as how I didn't even notice
<joepie91>	breakingthings: or maybe I should use Cheerio to build a DOM on the server side?
<joepie91>	:P
<breakingthings>	haha thats a joke right haha that doesn't exist you're so funny joepie91
<steeze>	joepie91, now we're cookin
<joepie91>	I think I may have broken breakingthings
<joepie91>	lol
<steeze>	i wrote a web scraper in node the other day for shiz and giggles. cheerio was fun
<Havvy>	!npm cheerio
<npmbot>	Havvy: cheerio (0.19.0) - Tiny, fast, and elegant implementation of core jQuery designed specifically for the server -> https://npmjs.org/package/cheerio
*	breakingthings clears scrollback
<breakingthings>	haha everything is ok
<breakingthings>	nothing terrible at all
<joepie91>	cheerio is amazing, just don't use it to *build* DOMs
<steeze>	cheerio mate, how are you doing
<joepie91>	:p
<breakingthings>	lol
<steeze>	anyone used swig?
<Havvy>	Why isn't cheerio at 1.0.0 yet?
<joepie91>	good q
<breakingthings>	not enough heart healthy vitamins or whatever
<breakingthings>	that campaign is
<joepie91>	?
<breakingthings>	...cheerios.
<breakingthings>	cereal things.
<breakingthings>	bad joke.
<steeze>	the breakfast cereal joepie91 ?
<steeze>	are cheerios world wide?
<breakingthings>	...I have never thought of this fact once in my life
*	breakingthings has existential meltdown
<steeze>	youve been broken a lot today
<breakingthings>	yeah
<breakingthings>	that happens
<steeze>	now im curious if the creator of cheerio is american and why he chose that name
*	danielfilho_ is now known as danielfilho
<steeze>	yeah he's from CA
<joepie91>	steeze: pretty sure cheerios aren't sold here
<breakingthings>	well that explains everything
<joepie91>	:P
<steeze>	haha
<breakingthings>	I wonder if kelloggs is international
<steeze>	cheerio is general mills
<jaawerth>	ljharb: anyway, thanks https://github.com/ubolonton/js-csp/pull/61
<breakingthings>	yea i know
<steeze>	ohh
<steeze>	i didnt know kellogs owned general mills
<joepie91>	breakingthings: we have kelloggs here
<breakingthings>	ok
<joepie91>	general mills just reminds me of Neopets
<joepie91>	with their US-only things :(
<breakingthings>	Hey guys this is #node.js not #cerealbrands
<breakingthings>	shhh
<joepie91>	who remembers Neopets?
<steeze>	ha sorry, carry on
<ovef>	is it possible to give a name to a function that i generated with "new Function"?
<ljharb>	joepie91: lol i still have an account
<breakingthings>	ljharb: your pets are staaaarving
<ljharb>	they are
<ljharb>	ovef: no
<ljharb>	ovef: also don't do that, that's eval.
<joepie91>	ljharb: ha.
<joepie91>	but yeah, pets are always starving :P
<ovef>	eval?
<ljharb>	ovef: turning strings into code. that's bad news bears.
<ljharb>	ovef: why do you think you want to make a function with "new Function"?
<ovef>	i'm writing a template engine
<ovef>	which generates a render function
<ovef>	now i'm pushing it through an object stream, and don't want to explicitly add an option like "asString"
<Aria>	It really is the right way to do it.
<ovef>	because users can do "String(fn)"
<ovef>	but with String(fn) function's name is always "anonymous"
<ljharb>	ovef: except that strings of functions aren't in the spec. so it's not reliable.
<ljharb>	or rather, it could vary widely across engines or versions.
<ljharb>	but you can put a .toString on any function, including a hardcoded one.
<ovef>	looks like there is a way but experimental https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
<ljharb>	in ES6, functions' names are configurable
<ovef>	yea
<ljharb>	but that's not shipped anywhere yet iirc.
<ljharb>	ovef: and instead of using `new Function`, why not a hardcoded function and use a closure?
<ljharb>	ovef: like `return function () { return render(str); }`
<ovef>	i don't want to ship a runtime along
<ljharb>	what do you mean ship a runtime
<ovef>	something like minstache it is https://github.com/visionmedia/minstache/blob/master/index.js
<ovef>	see L79
<ovef>	i mean minstache just throws a function for you, so you can use it anywhere
<ljharb>	there's absolutely not reason you have to do that.
<Aria>	eval is how this is done in most engines.
<ovef>	with hogan.js you also need hogan runtime to render compiled functions
<ljharb>	a closure can be used anywhere too
<Aria>	dust uses eval for the same reason.
<ljharb>	ovef: you need your runtime to generate the function too
<ovef>	but only in compile time
<ljharb>	what do you mean compile time
<ljharb>	are you shipping the function code over the wire?
<ovef>	i mean the time you compile render function
<ljharb>	right but that's the exact same environment as when you use it
<ovef>	you parse a template
<ovef>	you compile a function out of it
<ovef>	which renders html
<ljharb>	right, that's not to avoid the runtime, that's to optimize rendering.
<ljharb>	the runtime still remains in memory.
<ovef>	for example hogan.js/Template class
<ljharb>	unless you're compiling on the server, say, and shipping that result as actual code to the browser
<ovef>	is always needed to render compiled Hogan.js functions
<ovef>	so it is a runtime
<ovef>	runtime dependency i mean
*	SN4T14_ is now known as SN4T14
<ljharb>	literally nothing in https://github.com/twitter/hogan.js/blob/master/lib/template.js uses Function
<ljharb>	right
<ljharb>	but *the code that generates the Function* is a runtime dependency for you too.
<ovef>	but the compiled function is indeed an instance of Template
<ljharb>	so what's the difference
<ovef>	the code that generates the function doesn't need to be shipped to client
<Aria>	In dust, that is split: the compiler is used offline, and the templates are eval'ed as javascript.
<Aria>	(in the context of the dust runtime)
<ovef>	that's how minstache does it too
<ovef>	generated function includes all the necessary stuff already
<ovef>	guy also inlines them from the same file actually: https://github.com/visionmedia/minstache/blob/master/index.js#L75
<ljharb>	ovef: ok so you're shipping it over the wire
<ljharb>	also i wouldn't necessarily use "that lib does it" as a justification :-)
<ljharb>	for any lib, any pattern
<ljharb>	¯\_(ツ)_/¯ good luck
<ovef>	it wasn't any justification lol
<ovef>	it was an example
<ovef>	and i wouldn't necessarly use "don't do that" for any technique
<ovef>	eval has no harm if you know what u're doing
<breakingthings>	LOL
<Aria>	Quite. It's the right tool for the job.
<breakingthings>	whoopsie wrong channel
<joepie91>	ovef: the problem is that it's very easy to believe you know what you're doing with 'eval', when you're really not
<joepie91>	which is where the blanket recommendation against it comes from
<ovef>	it is all about the context actually
<Sorella>	!g racket on eval in dynamic languages @ joepie91
<ecmabot>	joepie91: The Racket Blog: On eval in dynamic languages generally and in ... <http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html>
<Sorella>	Is usually my stance on eval anywhere.
<Aria>	Delightful.
<joepie91>	Sorella: bookmarked for reading later, thanks
*	cipher__ is now known as qwop2
<iocopener>	Hey, I installed express and express-generator with npm install -g. I'm a bit confused, while I can create instances of express in apps, I can't seem to be able to use the CLI. express -V does nothing. express test doesn't generate any framework.
<Aria>	"does nothing" or gives an error?
<iocopener>	Aria, nothing
<iocopener>	No ouput
<iocopener>	*output
<Aria>	Interesting. try `which express` and make sure you're running the right thing.
<iocopener>	I installed with @4.2.0
<iocopener>	okay, thanks
*	blazedd is now known as Blazedd[AFK]
<iocopener>	Aria, the path seems right: /usr/local/bin/express -- also npm uninstall express does remove that binary
<Aria>	Alright. Which version of node are you using?
<iocopener>	0.10.25
<Aria>	Is there a reason you're using old everything?
<iocopener>	Aria, to follow along with a tutorial
<Aria>	Aaah.
<Aria>	I strongly suggest latest express 4, and latest node 0.10 at least.
<Aria>	express 4 keeps API working, no backward-incompatible changes.
<Aria>	And node 0.10 has been pretty conservative too.
<iocopener>	Okay, thanks. I'll go ahead and upgrade and see if that resolves it.
<iocopener>	Aria, my node version was apparently unsupported by express. Much appreciated.
<Aria>	You're welcome.
<Aria>	Version schemes that separate bugfix/compat changes from incompat ones are a win.
<Aria>	You're generally -- not always, but generally -- safe to upgrade within a major in node projects.
<Aria>	(things are dicier with major 0)
<jfhbrook>	safe as in development, not safe as in roll-to-prod-without-at-least-smoke-testing
<jfhbrook>	-heh-
<Aria>	Always.
<Aria>	Bugs /can/ be introduced.
<Aria>	And breaks should generally be treated as "oops, our bad. We'll revert and bump major"
<godzirra>	so I'm connecting to a node database, and in the examples, it suggests making a connection then in the callback for the connection, perform your queries.  Making a connection each time someone hits an endpoint seems bad.  What is a better way to do this?  Example here: https://gist.github.com/slooker/a92834ae0711f96635a6
<godzirra>	(mongoose database, not node database)
<Aria>	Pooling.
<Aria>	Same interface, but keeps connections already-connected to hand out.
<nodeLover>	Is it possible to use httpKeepalive with the request library?
<godzirra>	Aria: Should I just google "mongodb pooling and node" and read up?
<Aria>	Probably.
<nodeLover>	I see agentkeepalive works with the built in node http library, but nothing about request.
<Aria>	(I don't use mongo, but that's the general pattern for all DBs)
<godzirra>	Alrighty.  Thanks.
*	orionstein is now known as orionstein_away
<joepie91>	nodeLover: I wrote https://www.npmjs.com/package/bhttp, and it passes on any options it doesn't recognize to http/https directly
<joepie91>	so if it's an option for http/https, keepalive should work with it
*	whyhankee is now known as Guest49127
<nodeLover>	joepie91: that looks pretty cool
<joepie91>	nodeLover: as an aside, it disables the agent for requests where 'stream' is true (to keep it from blocking sockets), so keep that in mind if you're streaming responses
<joepie91>	(by default, they're not streamed)
<nodeLover>	joepie91: I'm just POSTing a lot to 6 different servers and need to keepAlive, it is pretty simple honestly. Do you recommend bhttp for that?
<nodeLover>	just a list of id's essentially
*	orionstein_away is now known as orionstein
*	Guest91910 is now known as Eskorbuto
<joepie91>	nodeLover: I haven't explicitly tested bhttp with keep-alive
<joepie91>	nodeLover: so I'd say try it and report back :)
<nodeLover>	haha
<nodeLover>	joepie91: honestly the more I look the more I think the node http library will work fine
<nodeLover>	joepie91: but I'm not sure what is meant by 'streaming requests'
<joepie91>	nodeLover: by default the response is a stream
<joepie91>	so you can deal with the body in a streaming manner
<joepie91>	(in node http)
<joepie91>	bhttp automatically collects that stream into a single buffer on res.body, unless you specify stream:true in the options, in which case it leaves it as a stream and doesn't touch it
<joepie91>	because in most cases you just want the response as a string (or well, buffer)
<nodeLover>	joepie91: so if it is a stream, that means that on the server every time res() is called it sends it out?
<nodeLover>	as in, the body on the client is constantly being updated like a buffer?
<joepie91>	nodeLover: not sure what you're describing, but probably not
<joepie91>	it's a Node.js stream
*	Falstaff__ is now known as Falstaff_
<joepie91>	nodeLover: https://nodejs.org/api/stream.html
<nodeLover>	hmm, so using the request library like in their first example (https://github.com/request/request) none of that is a stream?
<nodeLover>	joepie91: ^ meant to mention you
<joepie91>	nodeLover: no, but request is a little weird
*	Zak is now known as Guest3834
<joepie91>	nodeLover: if you use it with a callback, it reads the stream until it has a buffer, and then gives you a buffer
<joepie91>	if you use it as an event emitter, it won't touch you the stream, and just give you the stream
<joepie91>	(though that's buggy)
<joepie91>	if you use .pipe, it'll pretend to *be* the stream
<nodeLover>	joepie91: okay, is that functionality in bhttp?
<joepie91>	nodeLover: no, because it's a terrible idea :)
<nodeLover>	haha
<nodeLover>	well, it is convenient I think
<joepie91>	nodeLover: bhttp gives you a buffer by default, regardless of whether you use promises or nodebacks
<joepie91>	unless you specify stream: true, and then it gives you a stream
<Anoniem4l>	i know this is not the place to ask but i can find no other to ask my question, I tried googling about it but everything is quite the opposite of what i want: how can I make an image clickable without it redirecting somewhere else
<joepie91>	nodeLover: it's not, not how request does it, it's extremely unpredictable and hard to understand
<joepie91>	having a 'stream' option is the correct approach
<joepie91>	Anoniem4l: a click event?
*	rho_ is now known as rho
<Anoniem4l>	joepie91: I tried onclick="my_function()" but nothing happens
*	lanceball is now known as lance|afk
<ljharb>	!inline @ Anoniem4l
<ecmabot>	Anoniem4l: Using inline event handlers is bad practice and results in poorly factored, hard-to-manage code. Consider attaching your events with Javascript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener
<ljharb>	don't use onclick, ever.
<ljharb>	Anoniem4l: also that's more a ##javascript than a node question.
<ljharb>	ask there ^
<nodeLover>	Anoniem4l: that is what you want, you must have something wrong in your definition or maybe placement of the function
<Anoniem4l>	alright guys, thank you.
*	JSON is now known as master5o1|work
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Wed May 13 17:45:36 2015

**** BEGIN LOGGING AT Wed May 13 20:25:59 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Wed May 13 20:26:23 2015

**** BEGIN LOGGING AT Wed May 13 20:26:51 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<chapel>	deltab: no, if you look at the stack trace, they are all node internal modules
<chapel>	_stream_writable and _stream_readable and net.js
<chapel>	oh and events.js
<derbie>	Okay sorry
<derbie>	But i am curious
<derbie>	Why ljharb ?
<ljharb>	derbie: a number of reasons. you shouldn't ever assume someone's gender, so unless they've explicitly told you what it is, you should use genderless words.
<ljharb>	derbie: and addressing the channel as "guys" excludes people that aren't male (which aren't just women, because there's more than 2 genders)
<ljharb>	derbie: and, we insist on being inclusive here.
<derbie>	Wow.
<konobi>	as long as you're english first language *rimshot*
<ljharb>	nobody's kicked out for making a mistake, or for not knowing things :-)
<ljharb>	if i'm speaking a language that wasn't my first, and i muddle the idioms and social morés, i'd expect to be corrected too. and i'd happily comply.
<derbie>	What if it was my signature, every time i address to someone i say guys, even if it's just one person
<ljharb>	what do you mean, your signature?
<ljharb>	if it's a specific person, and you have a relationship with them, then it might be fine - but, you'd still need to be cognizant of who's in earshot.
<derbie>	or being sarcastic in the sense that the are so many more males working in the industry than females or extraterrestrials
<ljharb>	i call my friends plenty of things in private that i'd never say in front of other people.
<derbie>	nevermind me i'm too baked
<ljharb>	derbie: being sarcastic for the sole cause of irony actually causes more harm than good.
<deltab>	chapel: I don't think the stack trace is going to be of much use, then: the problem seems to be in the order things happened (write after end), which isn't captured in the stack trace
<deltab>	chapel: really you want to know where the 'end' call happened
<konobi>	ljharb: tbh, imho... it should be a PM... but maybe that's just me
<joepie91>	sigh. "today there was a 'national cholesterol test' event in <city>. people could have their cholesterol tested there for free."  -- our local broadcasting service thingie
<joepie91>	don't they think they should maybe announce that BEFORE it happens?
<deltab>	chapel: I suggest adding more logging
<tejasmanohar>	node is joining io.js :)
<tejasmanohar>	io.js is joning node foundation i mean
<tejasmanohar>	https://github.com/iojs/io.js/issues/1664#issuecomment-101828384
<deltab>	joepie91: to be followed by "organisers say they were disappointed at the lack of turnout, and have cancelled a follow-up."
<joepie91>	deltab: that would be my guess, yes
<joepie91>	heh
<joepie91>	they have a habit of doing this, I don't get it
<deltab>	though, maybe the passers-by were enough for them to handle, and extra people arriving from all over the city would've been too much
<joepie91>	deltab: idk. they do it for all kinds of events
<joepie91>	when there was an occupy camp here a few years ago, they did the same thing
<joepie91>	we announced it beforehand, absolute radio silence
<joepie91>	took them half a day to show up
<joepie91>	after the camp had started
<joepie91>	deltab: that's the only experience I've had with organizing an event that they reported on, so that's all I can draw from really :P
<joepie91>	but it leads me to believe this is not an isolated incident...
<joepie91>	anyway, nobody have any feedback to my new blog post? :P
<ljharb>	konobi: true, fair point. i usually try to set a public example but at some point it's probably better to take it to PM
<d4rklit3>	hrmm
<d4rklit3>	hi
<aracodex12>	Hello Everyone, just wanted to check, I'm building a widget, in my script file, I'm referencing a localhost:3000/js/main.js file, and if I try to access my site via local area network, it fails because localhost:3000 doesn't exist for them, I'm not sure if there's a work around for this
<d4rklit3>	anyone know how to use &nbsp; in jade
<jfhbrook>	use a static file server aracodex12 ?
<joepie91>	d4rklit3: that's a good question actually
<aracodex12>	jfhbrook: what's a static file server?
<d4rklit3>	i dont think there is a way
<d4rklit3>	:P
<joepie91>	d4rklit3: it escapes it I presume?
<jfhbrook>	unless you're conflating node.js code and browser code aracodex12 which HAS BEEN KNOWN TO HAPPEN
<jfhbrook>	aracodex12: it's the thing that serves files over an http thinger
<jfhbrook>	aracodex12: for instance, https://github.com/jfhbrook/node-ecstatic
<joepie91>	d4rklit3: if so, try !{'&nbsp;'}
<joepie91>	in your string
<joepie91>	it's ugly, but should work
<jfhbrook>	aracodex12: or, nginx, apache, etc etc
<d4rklit3>	o yeah
<konobi>	ljharb: one-on-one or one-on-group is okay... a speaker at a conference suddenly stopping to correct someone in the middle of a full crowd is a little isolating =0)
<d4rklit3>	joepie91 nice
<aracodex12>	jfhbrook: when you say conflating node and browser code, u are saying in my html, I reference nodejs which is known not to work?
<jfhbrook>	yes, that will absolutely not work
<deltab>	joepie91: does it complain if not given a promise?
<deltab>	d4rklit3: why not put it in directly?
<d4rklit3>	joepie91, that works but i realize a space is too much :P
<joepie91>	deltab: scroll down :)
<joepie91>	(it answers that question)
<deltab>	joepie91: I see "Make sure you're actually returning the chain of promises from your route or middleware. It can't handle promises that you don't give to it!"
<deltab>	why doesn't it check for that?
<joepie91>	deltab: how would it?
<deltab>	"forgetting to do this thing? do this instead! (only works when you remember to do it)"
*	emilyrose sets ban on *!*2eef620b@*.46.239.98.11
*	emilyrose has kicked derbie from #Node.js (derbie)
<deltab>	by complaining when it doesn't get a promise
<joepie91>	deltab: a return is something you do for promises anyway
<joepie91>	deltab: that would break routes without promises
<joepie91>	emilyrose: ?
<emilyrose>	joepie91: what's up?
<joepie91>	why the ban?
<emilyrose>	don't worry about it :)
<joepie91>	ljharb already addressed it
<emilyrose>	joepie91: don't. worry. about it.
<joepie91>	...
<konobi>	joepie91: don't worry about it
<emilyrose>	like I've said before
<emilyrose>	if you have a concern about moderator action
<emilyrose>	PM a mod
<emilyrose>	don't make an issue about it in the channel
<emilyrose>	I know what I'm doing
<emilyrose>	kthnx :)
<konobi>	+1
*	emilyrose removes ban on *!*2eef620b@*.46.239.98.11
*	orionstein is now known as orionstein_away
<owoep>	Shims are a common pattern for client-side javascript (e.g. es5-shim). Does this sort of pattern ever get used for server-side? For example, if I import a module and then overwrite some stuff in its namespace prior to using it.
*	Guest46031 is now known as greves
*	szt is now known as Guest35548
*	szt_ is now known as szt
<joepie91>	owoep: it can be used, yes, but it's pretty risky
<tejasmanohar>	anyone here used heroku as a low-cost host for SOAs?
<tejasmanohar>	i feel like that's a pretty good idea especially with the new pricing model, https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta
<deltab>	owoep: you have more control over the server, so that tends to be less necessary
<tejasmanohar>	make a bunch of mini "apps" in your SOA and host them all on Heroku
<joepie91>	tejasmanohar: SOA?
<tejasmanohar>	joepie91: Service Oriented Architecture
<owoep>	joepie91: deltab: yes i agree. I’m thinking specifically of running Backbone both server-side and client-side, and I’d like a shim which changes some functionality server-side. I suppose it would probably be best to explicitly create a backbone-shimmed package which depends on a specific version of backbone.
<greves>	joepie91, i finally figured out what was wrong with my webpack yesterday
<tejasmanohar>	sounds like a really cheap platform for hosting SOAs... workers are free from this summer onwards (or now, if youre on beta)
<greves>	well, someone else figured it out :P
<tejasmanohar>	(workers + web proc)
<joepie91>	owoep: make sure to use a bundled dependency
<joepie91>	tejasmanohar: "free" makes me wary.
<joepie91>	greves: oh?
<greves>	joepie91, extensions: ['.js', '.jsx'] needs to be ['', '.js', '.jsx'] to recognize node_modules modules >.<
<tejasmanohar>	joepie91: why? i love heroku
<tejasmanohar>	web proc have always been free, they just made workers free too.... well at 1x dyno
<joepie91>	tejasmanohar: because Heroku is a business, not a charity
<tejasmanohar>	1x is 512mb ram and 1 cpu share
<greves>	tejasmanohar, i have been reading horror stories of heroku all day yesterday :P
<tejasmanohar>	greves: like what?
<joepie91>	tejasmanohar: if they're giving something away for free, it's because they expect to make more money from it than they're giving away
<greves>	just google around
<tejasmanohar>	ive used heroku very much, i  like it
<tejasmanohar>	joepie91: yeah they do
<greves>	tejasmanohar, yeah i think its great for like hobby projects
<joepie91>	tejasmanohar: which means there's a catch /somewhere/
<tejasmanohar>	joepie91: and they do make money of it... but the free is free forever
<greves>	but not for mission critical stuff
<joepie91>	and you're going to want to make very sure that you're not in it
<tejasmanohar>	joepie91: yeah... if you exceed 1 dyno
<tejasmanohar>	it starts costing money then
<joepie91>	tejasmanohar: yeah, and by then you're locked into the platform
<joepie91>	which I suspect is why they give you one for free ;)
*	rainbow is now known as rainboware
<tejasmanohar>	if you have a bunch of small apps to do one thing on heroku it can be much less costly than on AWS et
<joepie91>	greves: oh, right, derp (re: webpack)
<tejasmanohar>	E2
<tejasmanohar>	EC2
<joepie91>	tejasmanohar: AWS is not a good baseline
<joepie91>	it's very expensive
<greves>	joepie91, what do you recommend in terms of hosting that can compete with AWS?
<tejasmanohar>	ok true
<joepie91>	greves: define "compete with" - what are you looking for?
<greves>	joepie91, security & scalability
<joepie91>	the *exact* architectural model that AWS uses is only offered by a few, so it's pretty much an oligopoly -> higher prices by default
<joepie91>	greves: you'll have to define your expectations from both more precisely :)
<rainboware>	hi all :)
<tejasmanohar>	greves: you dont need scalability until you need scalability ;)
<owoep>	joepie91: TIL about bundled dependencies. Might be useful, but also doesn’t hurt for me to store my shimmed module in its own repository and treat it as a normal dependency so I can reuse it for other projects.
<tejasmanohar>	im still hooked on this heroku soa idea
<greves>	tejasmanohar, no, you need to *plan for* scalability before you need it
<greves>	tejasmanohar, by definition you need "scalability" before you actually need to "scale"
<joepie91>	owoep: sure, but still configure it as being bundled :)
<greves>	otherwise you won't be able to do the "scale" part
<tejasmanohar>	sure... but you can migrate if needed. what other hosts have you looked at?
<joepie91>	greves: see, the problem is, if your only requirement is "scalability" without anything more specific, the answer is "it's just a VPS, of course you can scale"
<konobi>	i just use a small joyent smartos container currently =0)
<tejasmanohar>	the thing abotu AWS is it has so much stuff... its a suite, not comparable to many others
<joepie91>	but if you're asking specifically about scalability, that's probably not what you expect
<joepie91>	(and really, scalability isn't defined by the platform you host on, generally - rather by the architecture of your application)
<greves>	joepie91, yeah, keeping state out of the server and whatnot
<joepie91>	greves: right, that has nothing to do with what you host it on :)
<greves>	joepie91, but at the same time, you do need a host who can respond quickly when the time comes
<joepie91>	owoep: I should note that one thing bundled dependencies protect you against is deduplication
<owoep>	joepie91: i guess i’m missing something, why bundled? Is that just to prevent it from being registered with npm? Would private: true be equivalent?
<joepie91>	greves: "respond quickly" how? let you order an additional server? respond to support tickets? ..?
<owoep>	joepie91: ah
<joepie91>	owoep: if it's deduped, two modules might be modifying the same dep, and conflict
<joepie91>	bundled deps prevent that
<greves>	joepie91, i mean being able to do it instantly vs. needing to wait an hour i guess that's not a huge deal, but the instant-on stuff is pretty cool
<joepie91>	(npm deduped by default)
<owoep>	ic
<joepie91>	greves: almost every VPS provider on the market today has instant setup
<greves>	joepie91, i'd like to have docker server nodes that i can just run more of whenever i need
<joepie91>	(and has had so for the past 2-3 years)
<greves>	joepie91, i like the fact that on amazon all of the services are separate, but integrated into a single account/dashboard
<greves>	including server, proxy, database, permissions, and even like collecting client payments, etc.
<joepie91>	greves: find any KVM provider, have a bash script that installs and sets up docker, just get a new VPS when needed and run that script on it
<joepie91>	done
<joepie91>	greves: that also means a single point of failure :)
<joepie91>	it's all a tradeoff
<greves>	joepie91, yeah you dont need to convince me that its possible to do on other hosts, i already know that - that's why i was asking for recommendations :P
<joepie91>	fancy buttons in exchange for a considerably higher price, more lock-in and dependency
<joepie91>	greves: right, but you asked specifically about scalability and security, so that's what I wanted to get straight first
<joepie91>	:)
<greves>	ok haha
<joepie91>	greves: can you elaborate on 'security' a bit more? or rather, what you expect from it
<greves>	well for security i basically want to be able to set up my account and get a secure key that i can write down on a piece of paper and stuff in a bank vault and forget about it, but know that i can use it if i ever need to (hacked or something)
<joepie91>	greves: to get into what? your server?
<greves>	well, the 'master' account or whatever, i think different platforms will have different ideas about this
<joepie91>	greves: as in, hosting provider control panel, then?
<joepie91>	greves: the typical VPS provider just has a username/password combo for the panel
<joepie91>	which lets you VNC / SSH in
<joepie91>	(for KVM, it'd just be VNC or web-based console in some cases)
<greves>	joepie91, i just mean that i don't physically have the servers, and i have to trust that the provider is not going to physically go in to the server racks and mess with my stuff, but if someone can get into my control panel then they can mess with my stuff from the outside
<joepie91>	of course that still requires you to have a root password
<joepie91>	greves: right. unfortunately most control panel software is terrible (including that of Amazon and Digital Ocean, I'd wager, but no way to check), so there's always a risk there
<greves>	username/password is not very strong, i would prefer something that had like an option to require two-factor authentication for all users above a certain privilege level
<greves>	and ssl certs instead of passwords
<joepie91>	for the panel, there's (almost) nobody who offers that
<joepie91>	yet :p
<greves>	amazon offers that...
<joepie91>	hence almost
<greves>	heh
<joepie91>	greves: I was working on an (open-source) VPS panel for a while, but couldn't get enough donations to cover expenses... that kind of stuff was one of the things planned
<joepie91>	unfortunately I don't think the major VPS panels have any plans of doing this
<konobi>	?
<greves>	ok well for the closest i can get to that kind of security, docker + instant or relatively fast scalability, and a separately hosted & provider-hardened database service (postgres), what do you recommend?
<joepie91>	greves: https://ramnode.com/, for example
<konobi>	triton?
<joepie91>	(VPS setup is instant)
<greves>	are they based out of NL?
<joepie91>	company, no
<joepie91>	servers, some
<joepie91>	(Alblasserdam, actually, some 30 minutes cycling from where I live :P)
<joepie91>	company is US
<greves>	wow pretty cheap
<greves>	$80/mo for 8gb quad-core with 6000 GB of bandwidth
<joepie91>	greves: you'll want KVM, probably
<joepie91>	"real" virtualization
<greves>	oh i c
<joepie91>	OpenVZ is paravirtualization, running docker in it is a pain
<joepie91>	and/or not performant
<dodobrain>	joepie91, my routes/index.js is getting quite big and i want to split it up now. how would you recommend i do this? i see in the default express generated app, it creates a routes/users.js as well to handle /users, but it it setup in a funny way
<greves>	yeah that makes sense i suppose
<joepie91>	dodobrain: what's 'funny' about it to you?
<konobi>	joepie91: how about joyent's triton stuff? (ie: docker as containers on metal)
<joepie91>	(that sounded more sarcastic than I meant it :P)
<greves>	dodobrain, just pull off any of the code you want to put in another file and then apply it basically like middleware either in routes/index.js or in your app.js
<joepie91>	konobi: never heard of it
<dodobrain>	in app.js it has ... var routes = require('./routes/index'); var users = require('./routes/users'); app.use('/', routes); app.use('/users', users);
<joepie91>	dodobrain: first arg to .use is the 'prefix'
<konobi>	joepie91: https://www.joyent.com/developers/triton-faq#what
<joepie91>	second arg is the middleware
<joepie91>	the module just exports an express.Router() object
<dodobrain>	and inside routes/users.js it has router.get('/', function(req,...
<joepie91>	which is just middleware
<joepie91>	konobi: two sentences in, sounds very $$$ :)
<dodobrain>	so depending on which file i'm editing, i'll need to remember that it is mounted on a different path
<konobi>	joepie91: nope
<joepie91>	dodobrain: ideally the filename is the same as the prefix
<joepie91>	 /users = users.js
<joepie91>	 /users/thing = users-thing.js
<joepie91>	etc
<joepie91>	makes it easier to keep track
<joepie91>	but generally you should split by concern
<joepie91>	you *can* mount more than one router on the same prefix
<dodobrain>	ok. so is it preferable to do the mounting in app.js and have the actual route itself just use router.get('/', func... ?
<joepie91>	dodobrain: yes, that's the idea
<konobi>	joepie91: (and open source)
<joepie91>	dodobrain: the app.js is just what 'brings together' your middleware
<joepie91>	(and routers, which are also just middleware)
<joepie91>	best is to not have *any* routes in your app.js
<joepie91>	konobi: yeah, but that's not useful if for example it requires a lot of hardware to set up, or there's no documentation, etc
<greves>	dodobrain, example: https://bpaste.net/show/af49859f9a3c
<joepie91>	konobi: it is not uncommon for something to be "open-source" but undocumented, so that you pay for support
<joepie91>	to just give an example
<joepie91>	greves: btw, ramnode lets you purchase additional traffic
<joepie91>	greves: the listed amount is just what's included
<greves>	dodobrain, just think of each router as its own mini-app, and it's getting mounted somewhere else in your main app but that could be anywhere since the router itself doesn't care
<konobi>	joepie91: it's all documented and on github
<joepie91>	konobi: link to github? :)
<konobi>	github.com
<joepie91>	</har-har-har>
<joepie91>	:P
*	konobi heads to sleep... 3am
<dodobrain>	greves, yes, i understand that. i'm merely asking what the consensus is on where to put stuff :)
<greves>	joyent bleh :P
<joepie91>	dodobrain: routes go into routers :P
<greves>	dodobrain, ah, i just do like one folder per router level so it matches up and easier to remember
<dodobrain>	ideally when i'm editing a route file within the routes dir, i would want to see its full path
<greves>	dodobrain, but then your route would be hard-coded into that particular router, instead of just the bits that the router needs
<greves>	dodobrain, just write a comment at the top of the file with the route in it
<greves>	or, in my case since the folders match up i always know what route i'm on just by looking at the breadcrumbs :P
<dodobrain>	greves, what do you mean hardcoded?
<dodobrain>	greves, you mean by looking at the current working dir (or basically path of the current file)?
<greves>	dodobrain, if you've got a router that does .get('/my/long/route/to/here', function (req, res) {...}); then the whole route is stuck in that router
<greves>	if you changed /long/ to /short/ you'd have to change it in every file that used that path
<dodobrain>	no no.. i'm not asking about multi level deep routes
<dodobrain>	i'm still, as you can see, a noobie :)
<greves>	dodobrain, principle remains the same though, the router should only know what it needs to
<greves>	if it doesn't need to know anything, just put the route at the top level and the router can just get '/'
<joepie91>	dodobrain: let's say you have a profile page
<joepie91>	at /users/:userID
<greves>	joepie91, what is the standard open source alternative to AWS ELB?
<joepie91>	but now you want to change that to /members/:userID
<dodobrain>	will be kinda weird though to see router.get('/', func.... in my routes/datasets.js and remember that this is actually /datasets (cos thats the route i will setup in app.js)
<joepie91>	for whatever reason
<joepie91>	if your paths are hardcoded in your router file, you need to change it everywhere you use /users
<joepie91>	but if you just mount your router at /users, then your router file *itself* just has a path for /:userID
<greves>	dodobrain, like i said just look at the cwd or write a comment at the top of the file. /** this route starts at /path/to/here */ problem solved
<joepie91>	so if you have /users/create, it becomes /members/create because the route itself is just /create
<joepie91>	greves: what's ELB do again?
<dodobrain>	yes, this way only the mountpoint will change
<greves>	joepie91, i believe it does what nginx does
<greves>	ok stupid question
<konobi>	greves: oh... you have some experience to share of the joyent public cloud? would be interesting to hear
<greves>	how do i set up nginx for something scalable on my own?
<joepie91>	greves: oh wait, is that their load balancer?
<joepie91>	if so, look at haproxy
<joepie91>	"HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world's most visited ones."
<joepie91>	greves: oh, here: http://www.haproxy.org/they-use-it.html
<dodobrain>	anyway, thanks for that greves, joepie91 . now i am a bit intrigued about multi level paths.  if i mount routes/foo.js (with router.get('/',...) as /foo   what to do if i want another mount /foo/bar ?
<greves>	dodobrain, you can just mount it in the same one as '/' under '/bar', another nested router, which itself will mount to '/'
<greves>	dodobrain, look at my example up above, i've got that in there already
<joepie91>	dodobrain: again, I want to emphasize, if necessary, you *can* mount more than one router to the same prefix/path
<dodobrain>	do i just create routes/bar.js and mount it in app.js as /foo/bar  or do i somehow edit foo.js itself?
<konobi>	greves: mmm?
<greves>	joepie91, i think i'm lacking in understanding about the physical/actual setup of a proxy with a bunch of servers
<joepie91>	greves: "As described in this highscalability article (slides here), YouPorn stacks HAProxy, Varnish and Nginx to achieve 300000 requests per second and 100 Gbps of traffic, all of this producing 15 GB of logs per hour."
<greves>	konobi, nope, sorry. just don't have any respect for companies that take OSS and blow off the community
<joepie91>	so :)
<dodobrain>	joepie91, i understand completely.. and my method above will make /foo/bar respond with the code in /routes/bar.js  . i just wanted to know if this was the usual way
<greves>	joepie91, holy hell wow
<konobi>	greves: i don't see the connection
<joepie91>	greves: well, first of all, when you say scalability, what kind of numbers are you thinking of
<dodobrain>	or maybe creating a file routes/bar/index.js and using that or ...
<joepie91>	greves: in both bandwidth rate and conns/sec / reqs/sec
<konobi>	greves: oh... you're a FUD-er... kk
<greves>	what?
<greves>	FUD-er?
<joepie91>	konobi: you have to understand that Joyent's behaviour with regards to Node.js was not exactly very well-received by the community, hence also the io.js fork
<joepie91>	konobi: that is not FUD, that is Joyent leaving a bitter taste in people's mouths
<greves>	joepie91, don't really know i guess until we launch, but we would hope for 10^5 users and we'll be streaming audio to them pretty much continuously while they're logged in
<joepie91>	greves: okay, so mostly just high-bandwidth - what kind of audio? teamspeak-level, internet-radio-level, ...?
<konobi>	joepie91: they moved node.js into a foundation. that's considered bad?
<joepie91>	mostly quality-wise
<joepie91>	konobi: are you unaware of the events around Joyent for the past few months / years?
<greves>	joepie91, 'studio quality voice recordings'
<konobi>	joepie91: been around a long time
<dodobrain>	well, they are called Joyent and not Miseryent !
*	dodobrain hides
<joepie91>	konobi: because I'm not sure whether you're just missing part of the story, or just defending Joyent for no good reason
<greves>	konobi, they moved it to a foundation after a huge rift in the community that brought out all of the top node devs and they realized they would lose money if they didn't do something about it
<joepie91>	as what you just said is VERY misleading
<joepie91>	right, what greves said
<konobi>	that's misleading too
<konobi>	define "huge" and "
<konobi>	"community"
<joepie91>	konobi: I think the io.js issue threads and hacker news threads do a pretty good job of defining that.
<konobi>	anyways... doesn't make their product offering any less awesome
<greves>	konobi, just go read some of the threads on io.js and node.js githubs
<dodobrain>	go have this conversation in #node.js-offtopic or something! people need help with node.js itself here (like me) :D
<joepie91>	dodobrain: does that exist?
<dodobrain>	you are free to create it!
<joepie91>	heh, nah :)
<dodobrain>	there, i created it
<greves>	konobi, well there are certainly people who feel that way about money, but there are others who at least try to take a more principled stance
<joepie91>	dodobrain: oh, I missed your question actually
<joepie91>	dodobrain: the usual way is splitting it up into routers mounted at a certain path, yes
<konobi>	greves: still think that's based on fud... but *shrug*
<joepie91>	konobi: FUD does not mean what you seem to think it means.
<konobi>	joepie91: it does
<greves>	yeah i am trying to figure out if he's using a different acronym or something
<greves>	because i don't get what FUD has to do with it
<greves>	even like 'hipster' i could understand, but FUD?
<joepie91>	konobi: then please do explain how this is "FUD"
<joepie91>	greves: re: your question, let me run some numbers, hold on
<greves>	joepie91, our audio will hopefully be served as .opus for clients that support it, or 64kbit mp3 for others
<joepie91>	greves: .. that was what I was just about to ask
<joepie91>	hah
<joepie91>	you sure 64 is sufficient?
<joepie91>	for MP3
<dodobrain>	joepie91, right and i suppose if i were going with the idea of greves where filepath was indicative of the mountpoint, i would have foo=require('./routes/foo'); app.use('/foo', foo); bar=require('./routes/foo/bar'); app.use('/foo/bar', bar);  with routes/foo/index.js and routes/foo/bar.js  right?
<joepie91>	64kbps AAC I can see working, but for MP3 it seems a bit... low
<greves>	joepie91, also, we will be serving text from the database on a pretty continual basis too, along with the audio
<greves>	joepie91, probably 1 database request per client per second, on average
<joepie91>	okay
<greves>	joepie91, 64 is fine for voice
<joepie91>	greves: have you tested that? :P because while it is enough for voice, I'd still expect there to be some quality loss
<dodobrain>	greves, voice of soprano or voice of donkey?
<joepie91>	which may not be what you want for "studio quality
<joepie91>	"
<greves>	joepie91, we are currently using it, its fine
<joepie91>	alright
<konobi>	meh... /me gets back to unbundling packets
<joepie91>	I'll assume 64kbps then
<greves>	yeah and opus is much lower, so even if we server higher quality mp3s it'll average out to 64
<joepie91>	greves: so, assuming 50k clients, that'd be a bit over 3gbps, correct?
<dodobrain>	joepie91, i had a question up there as well.. you are free to come back to it when you get a break from greves .. just informing, othrwise you'll have to scroll/search too much or i'll have to repeat ;)
<joepie91>	dodobrain: mental note made :P
<greves>	joepie91, yep, 3gb and 50,000 database hits per second
<joepie91>	greves: are you able to do load-balancing on a software level? ie. implement some logic to pick a particular server
<greves>	dodobrain, i dont think it will make a huge difference either way for the subroute whether you mount it in the app.js as '/foo/bar', or foo.js as '/bar', just depends on how big you want your app.js to be ;)
<greves>	also, if /bar is only logically related to /foo, then do it the second way (mount '/bar' in foo.js)
<dodobrain>	greves, i didn't mention mounting it in foo.js :)
<greves>	joepie91, i will need to learn that
<dodobrain>	there is no foo.js it is routes/foo/index.js and routes/foo/bar.js :D
<joepie91>	greves: right, but it's possible from a technical POV? ie. you have control over what the client is
<greves>	dodobrain, ah ok, yeah what you said its fine
<greves>	dodobrain, it will work, anyway
<greves>	joepie91, what do you mean control over what the client is?
<joepie91>	greves: well, something's going to receive the data
<joepie91>	play the audi
<joepie91>	audio *
<joepie91>	is that a third-party client, or something you develop?
<greves>	the actual audio files you mean?
<joepie91>	no, whatever the thing is that displays the audio
<joepie91>	:P
<joepie91>	and makes the DB requests
<greves>	oh, i'm developing that so yeah, should be possible
<joepie91>	alright
<joepie91>	greves: so, what worries me more is your bandwidth cost
<greves>	i'm doing full stack here so anything is possible! :P
<joepie91>	http://www.wolframalpha.com/input/?i=3125+gbps+in+petabytes+per+month
<joepie91>	er
<joepie91>	http://www.wolframalpha.com/input/?i=3125+mbps+in+petabytes+per+month
<greves>	joepie91, ah no this is not continual
<greves>	our clients aren't going to have it on 24 hours a day
<joepie91>	ah
<greves>	we are figuring that the average client will be streaming from us for ~30 min per day
<joepie91>	oh, that makes it a lot more feasible :P
<greves>	but i'm just saying that we need to account for the case where a lot of them are on at the same time
<greves>	so we might have 50,000 users and 20,000 of them on the east coast are all streaming from us on their lunch breaks, or something
<joepie91>	http://www.wolframalpha.com/input/?i=%283125+%2F+48%29+mbps+in+terabytes+per+month
<joepie91>	lot more feasible
<joepie91>	okay, so... hold on :P
<greves>	heh
<dodobrain>	greves, and what if they end up keeping the stream alive for a much larger duration than your expected average of 30 mins?
<dodobrain>	you will handle this situation, right?
<greves>	dodobrain, well, that's why the system needs to be scalable now, isn't it? :)
<dodobrain>	well, its not just about scalability now is it?
<dodobrain>	you'll have to manage the b/w costs
<greves>	sure it is
<greves>	that's part of scalability
<greves>	the provider needs to be able to fire up another server and push out more bandwidth on demand
<joepie91>	greves: okay, so this is potentially *very* network-heavy, which makes me wonder how big RamNode's total network capacity is, as they are relatively small (compared to eg. AWS)
<greves>	joepie91, heh, i have no doubt AWS could handle us just fine ;)
<joepie91>	don't really expect it to be an issue, though
<joepie91>	not at that rate anyway
<dodobrain>	but but i'm asking about the costs.. not just whether you're able to instantiate on the fly and load balance
<joepie91>	greves: so what you can do is just have 3 or 4 VPSes as audio servers (each VPS can do 1gbps max), potentially in multiple locations, with one central VPS that coordinates the streaming to those 'frontend servers' (no clients connect to it directly)
<greves>	dodobrain, well its a paid service so presumably we would pick a price point that could cover those costs :)
<joepie91>	greves: aside from that, 50k reqs/sec shouldn't be an issue for haproxy, so you should be good with a single load balancing box for that
<joepie91>	can always make that more if necessary and make the client pick one at random, for example
<joepie91>	and distribute over multiple database servers
<joepie91>	seems pretty feasible to me
<joepie91>	greves: I'm assuming that DB usage is read-heavy, not write-heavy?
<greves>	correct
<joepie91>	yeah, then you'll be fine
<joepie91>	single master, potentially multiple slaves if the performance of a single DB server doesn't cut it with cacheing
<joepie91>	if it's heavily cacheable, a single box with Redis for cacheing should definitely be sufficient
<joepie91>	seems all perfectly possible here :P
<greves>	joepie91, how much do you want to come in on this project? :P
<joepie91>	ahh
<joepie91>	greves: "We own all of our US network and server hardware, as well as our multiple 10G uplinks and IP addresses. "
<joepie91>	so that answers my question about network
<joepie91>	greves: hmm? :P
<dodobrain>	joepie91, i think he is offering you some money to work/consult on this! unless i'm unable to read, thats what he means
<greves>	dodobrain, well, not offering, just asking about a price :P
<dmarr>	thats interesting does nock auto-intercept? https://gist.github.com/anonymous/c441aee05ba280f5d3e2
<dmarr>	also sad that npm ls babel-* doesn't list my babel-core and babel-loader dependencies
<jaawerth>	dmamills: npm ls foo-* actually does things for you other than throw an error and return empty?
<dmarr>	it just shows me (empty)
<dmarr>	is there any way to wildcard with ls?
<GreenJello>	dmarr, try quoting 'foo-*'
<dmarr>	indeedy nock overrides ClientRequest as soon as its required
<dmarr>	https://gist.github.com/anonymous/134e3e0cc2ae5e6c89cc
<dmarr>	GreenJello: doens't work for me
*	braincrash is now known as braincras
<jaawerth>	nock is too finicky, I can't stand it
<jaawerth>	I just use sinon to either spy or stub http.request
<jaawerth>	you can use sinon.stub to stub request with your own interceptor function, and then add logic to the interceptor on what paths to ignore and what paths to mock a response for
<jaawerth>	(or what URLS to error for, etc..)
<sabrehagen1>	hey guys, i have an object 'app = express()' for my server. i have attached some objects to this app object so they can be accessed in my routes. i want to create another router, but i want all of these objects attached to it too. is there a way to use another router to as a prototype and create this other router from it?
<sabrehagen1>	*use my original app object as a prototype
<joepie91>	[04:10] <dodobrain> joepie91, right and i suppose if i were going with the idea of greves where filepath was indicative of the mountpoint, i would have foo=require('./routes/foo'); app.use('/foo', foo); bar=require('./routes/foo/bar'); app.use('/foo/bar', bar);  with routes/foo/index.js and routes/foo/bar.js  right?
<joepie91>	yes
<joepie91>	(I know, late :P)
<dodobrain>	joepie91, better late than never! thanks :)
<greves>	how in the world is there an invisible breakpoint in my node debug session?
<greves>	there's no breakpoints set in my IDE (intellij) and yet when i run node debug, it stops as if it hit a breakpoint
<joepie91>	greves: debugger statement?
<greves>	no output, it just stops running
<greves>	but if i hit 'continue' it keeps running, just as a normal breakpoint
<joepie91>	"stops running"? does it actually break, or just exit the process?
<joepie91>	ah
<greves>	it breaks at file `unknown` line 153, if that helps ;)
<joepie91>	greves: I think node-debug automatically breaks upon run?
<joepie91>	or that was a flag
<joepie91>	not sure
<joepie91>	check flags to see whether there's one to disable it
<greves>	ah ok
<greves>	maybe makes sense
<joepie91>	greves: also make sure you're on latest
<joepie91>	that is, latest everything
<joepie91>	node-inspector and such have been breaking a bit in 0.12
<joepie91>	but that should've been fixed now
*	therebelrobot is now known as therebelrobot[aw
*	therebelrobot[aw is now known as therebelrobot
<TyrfingMjolnir>	npm ERR! Tell the author that this fails on your system:
<TyrfingMjolnir>	npm ERR!     node-gyp rebuild
<joepie91>	TyrfingMjolnir: linux?
<TyrfingMjolnir>	smartos
<joepie91>	errr....
<TyrfingMjolnir>	npm ERR! SunOS 5.11
<sabrehagen1>	when using clustering, should each forked thread connect to mongodb, or should the parent thread in the cluster connect to mongodb?
<sabrehagen1>	(and each child thread use that connection)
<joepie91>	... SunOS?!
<TyrfingMjolnir>	www.joyent.com
<joepie91>	TyrfingMjolnir: well, anyway, you need the development headers probably
<sabrehagen1>	is there any resilliance in having each thread make it's own connection?
<joepie91>	sabrehagen1: forked thread
<TyrfingMjolnir>	joepie91: How to install the development headers?
<TyrfingMjolnir>	npm search node-gyp
*	sabrehagen1 is now known as sabrehagen
<joepie91>	well, forked process
<joepie91>	sabrehagen1: minimize responsibilities of the main process
<joepie91>	TyrfingMjolnir: not a clue, but not with npm :)
<sabrehagen>	joepie91: it has very little responsibility
<joepie91>	on Linux, it's the node-dev or node-devel package
<sabrehagen>	other than forking the threads
<sabrehagen>	joepie91: any other justification for forked threads?
<aracodex12>	hey guys, what would be a good package for touch?
<dodobrain>	what is the consensus on having plural or singular or both for resource names in a rest api ?
<dodobrain>	i have /organisations and /datasets, but i want /datasets/:org_name to return datasets that belong to a particular specified organisation. as such i'm using those routes plus /dataset/:dataset_name, /organisation/:org_name
<dodobrain>	is this a 'bad' scheme?
<kvda>	Why does my node program fail on use of the 'new' keyword? same code works in the browser
<dodobrain>	kvda, paste your code example on a paste site
<kvda>	thanks dodobrain i'll have to mock it up
<kvda>	i think it's the lib that im using
<kvda>	incompatible versions
<joepie91>	dodobrain: plural, generally
<joepie91>	for "return datasets that belong to a particular organisation", /datasets/:org is incorrect if your API is supposed to be RESTful
<joepie91>	and it should be /organisation/:org/datasets
<dodobrain>	joepie91, thats what i read as well.. but i want to allow /datasets/:org_name
<dodobrain>	ah, cool
<joepie91>	that would be a bad idea :)
<dodobrain>	no, i typed that before seeing your answer
<joepie91>	ah, heh
<dodobrain>	how do you decide what urls should be provided?
<joepie91>	dodobrain: how do you mean?
<dodobrain>	well, /organisations/:org/datasets makes a lot of sense but only *after* i have seen you mention it!
<dodobrain>	is that something that one learns by experience? the type of urls to provide in an api?
<joepie91>	dodobrain: it's just a consistent rule :)
<joepie91>	 /resourceType/resourceId
<joepie91>	tack on additional ones as appropriate
<joepie91>	 /resourceType/resourceId/subResourceType/subResourceId
<joepie91>	etc
<joepie91>	think of it in a hierarchical manner
<joepie91>	and keep it as short as you can manage without ambiguity
<dodobrain>	right, now that makes it a bit more clear to me
<joepie91>	the last "ID" can be left out
<joepie91>	so eg
<joepie91>	GET /resourceType/resourceId/subResourceType == list all subResources of this resource
<joepie91>	POST /resourceType/resourceId/subResourceType == add a new subResource to this resource
<joepie91>	PUT /resourceType/resourceId/subResourceType/subResourceId == create a new subResource with the given ID for this resource
<joepie91>	that's basically the idea
<joepie91>	dodobrain: that clarify it any?
<dodobrain>	yes! i was originally planning to have /attributes/:dataset_name and such.. but now it makes more sense to have /organisations, /organisations/:org_name, /organisations/:org_name/datasets  now ideally next should be /organisations/:org_name/datasets/:dataset_name but i'll pull out the datasets cos they will be used a *lot*
<dodobrain>	so continuing, /datasets, /datasets/:dataset_name, /datasets/:dataset_name/attributes, /dataset/:dataset_name/attributes/:attribute_name
<dodobrain>	yay
<dodobrain>	also i'll have /datasets/:dataset_name?expanded  which will return a json which includes all the attributes of that dataset
<joepie91>	dodobrain: I'd go for ?expanded=true or ?expanded=1
<Nikesh>	If all I am doing is commiting changes to my README.md, what is the best way to version my npm module?
<joepie91>	makes it easier to change defaults later and such
<joepie91>	and some clients choke on value-less params
<joepie91>	:p
<Nikesh>	I can't seem to be able to update the README.md without increasing the version number
<joepie91>	(as do some servers)
<Nikesh>	Or, all I know to do is `npm publish`
<joepie91>	dodobrain: but yeah, looks like you got the gist of it :)
<joepie91>	Nikesh: I do a patch release
<joepie91>	or if it's an unimportant change, roll it in with the next release
<dodobrain>	joepie91, that was a great help!
<Nikesh>	joepie91: Can you give a quick example? Do you mean like 0.1.0 -> 0.1.1 ?
<joepie91>	Nikesh: yep
<joepie91>	dodobrain: awesome :)
<Nikesh>	joepie91: OK, looks like I've been doing well then aside from starting at 0.0.1 which I just discovered isn't the best practice
<Nikesh>	According to sitepoint... :P
<dodobrain>	so now i get to change the code a bit to setup the endpoints properly..
<joepie91>	Nikesh: opinions vary on that :)
<joepie91>	but generally, start with 1 unless you have a reason not to, would be my adice
<joepie91>	advice *
<joepie91>	I personally use 0.x to indicate "you should think twice before using this in production, it's experimental still"
<joepie91>	(and add a warning)
<jaawerth>	I start at 0.1 until I actually want to publish
<jaawerth>	then I figure out what the version should be
<jaawerth>	er, rather 0.0.1
<Nikesh>	jaawerth, joepie91 Do you mean 0.0.1 or 0.1.0?
<Nikesh>	Ah
<jaawerth>	so I can increment all I want until I'm ready to publish
<Nikesh>	jaawerth: Yeah, that's what I was feeling.. my module isn't quite ready for production use
<ljharb>	eh, i don't publish til it's ready
<ljharb>	and i start at 1.0.0
<ljharb>	and if i get to 37.0.0 that's ok, because numbers are free
<Nikesh>	ljharb: :)
<Nikesh>	ljharb: Cool, that makes sense, good style
<Havvy>	jaawerth:  But then you get things like...
<Havvy>	!npm dirty
<npmbot>	Havvy: dirty (0.9.9) - A tiny & fast key value store with append-only disk log. Ideal for apps with < 1 million records. -> https://npmjs.org/package/dirty
<Havvy>	!npm cheerio
<npmbot>	Havvy: cheerio (0.19.0) - Tiny, fast, and elegant implementation of core jQuery designed specifically for the server -> https://npmjs.org/package/cheerio
<Havvy>	And more.
<ljharb>	i still do maintain some modules that unfortunately aren't at 1.0 yet, but i'm a bad person, and i'm moving those to 1.0 asap
<Havvy>	ljharb:  Which packages are those?
<ljharb>	nvm and es6-shim are the big ones.
<Havvy>	!npm nvm
<npmbot>	Havvy: nvm (0.0.3) - Install and managing different versions of node and installing local versions into repos. -> https://npmjs.org/package/nvm
<ljharb>	es6-shim i'm rationalizing by saying the spec isn't published yet
<ljharb>	nope, that's not the right nvm
<Havvy>	Oh? What's the right one?
<jaawerth>	Havvy: well I mean I do all the tiny increments before it hits npm
<ljharb>	nvm is on 0.24.1 - http://nvm.sh
<jaawerth>	mostly for my own use
<Havvy>	Ah, so it's not on npm then.
<ljharb>	but once i get nvm to self-update, it'll hit 1.0, and i'll finally publish to and take over npm's nvm
<jaawerth>	I'm starting to move toward actually just getting stuff onto npm early but I'm not there yet
<jaawerth>	I've been tinkering with a private registry too
<ljharb>	Havvy: nope, not yet. but i was given npm's one to take over
<jaawerth>	everyone's always throwing repos at you
<ljharb>	lol
*	\mSg_mini is now known as \mSg
<ljharb>	i have trouble saying no
<jaawerth>	right, and you probably find them valuable enough taht you don't want them abandoned
<jaawerth>	which is good
<jaawerth>	but hopefully you have help for that
<ljharb>	yes, true
<ljharb>	some help, sometimes
*	therebelrobot is now known as therebelrobot[aw
<ljharb>	there's not a shortage of people submitting feature requests, but very few send PRs, and fewer still good PRs with tests that aren't overly complex :-/
<jaawerth>	some of those really key utilities should really be maintained by a code group
*	joepie91 is still working on a project to make that kind of thing easier..
<jaawerth>	not that I think you'll abandon them, I just don't like a single point of failure even if that point of failure is super dedicated
<jaawerth>	one group that IMO does really well with this is angular-ui
<ljharb>	i agree
<jaawerth>	which has a ton of modules (some of which aren't as updated as others but the key ones are kept in good shape)
<jaawerth>	and they're all sorta under the angular-ui "stamp"
<ljharb>	the problem is that it takes multiple people who are obsessive about maintaining semver, and updating deps, and saying no to things, and keeping up to date with new node/iojs/browser versions, etc
<jaawerth>	yeah
<jaawerth>	it's a lot of work no matter how you shake it
<erste>	Hi, I would like to use JSHint in my sublime text, I'm using Ubuntu 14.04, and used nvm to install NodeJS... where is the location of the installed node??
<jaawerth>	erste: you can find out by running "nvm which current". Typically it's ~/home/you/.nvm/versions/node/vX.Y.Z/bin/node
<erste>	jaawerth, thanks
<jaawerth>	(or you can just do "which node", aka the standard linux way, to get the current path)
<jaawerth>	as you juggle versions you can set a default by doing "nvm alias default vX.Y.Z"
<jaawerth>	and then do "nvm use default" if you've switched and want to switch back
<jaawerth>	but every time you start a new shell, that shell will be set to your default node version
<erste>	yep, set that alias thing
<s2013>	sup
<greves>	so for server side react rendering with webpack, how do i incorporate sass?
<greves>	i'll need to like pack the .scss files into a .css, but also stringify them to serve on initial load?
<dodobrain>	joepie91, https://gist.github.com/freakabcd/49b2c8f6b2600525e8dd  if you have comments and you can add to the gist comments, i would greatly appreciate it. i'll try to come online later, but i still don't have inernet at home :( (recently moved)
*	edoardo is now known as Guest22289
<greves>	does it make sense to check the environment in the .ejs template and either include the style directly (node) or just link to the stylesheet (browser) ?
<joepie91>	greves: why?
<greves>	read up
<joepie91>	yes, but why? :P
<joepie91>	what's the advantage to be gotten from that?
<greves>	joepie91, (that was 4 tabs and a comma, by the way >.<) well if i serve the server-rendered react app right away with no CSS, it'll show up unstyled and i'll get the FOUT
<joepie91>	greves: right, maybe I don't know enough about React to understand the significance of this question, heh
<joepie91>	(I don't like it personally, and don't use it)
<greves>	ah
<jaawerth>	I like lots of things about it but I don't like the sum of its parts
<jaawerth>	I feel liike it's there to pave the way for something better
<joepie91>	it seems overly verbose to me, with no clear separation of the markup and the logic
<joepie91>	makes me feel like I'm back in the onclick= era
<greves>	that doesn't work anyway
<greves>	ah, i will need to manually remove the style tag from the header in the client version of the app
<jaawerth>	joepie91: I feel like the separation has been pretty much a myth since the advent of jquery anyway
<jaawerth>	joepie91: when not using webcomponents, you typically see people littering their code with pointless classes and IDs for use with element selectors
<jaawerth>	which is sorta just an obtuse way of mixing functionality with markup
<jaawerth>	at least the components approach is explicit ;-)
<joepie91>	jaawerth: not when used correctly :P
<jaawerth>	also when done right, the components approach is really just a high-level "target" for encapsulated logic
<jaawerth>	target/wrapper/whatever
<greves>	i am very happy with the component approach
<greves>	encapsulated logic + markup = easy to use and reuse
<jaawerth>	angular is similar. there are all kinds of messy things like ng-click that when abused really do feel like the onclick era, but you typically see heavy use of those really granular ones among people who haven't gotten the hang at writing custom directives
<jaawerth>	but yeah, what greves said
<greves>	dont like angular as much
<jaawerth>	it's all about being DRY. writing components is basically building your own personal library of reusable widgets
<jaawerth>	I like them both, but I feel like both have simply paved the way for something better (React I think has really pushed the envelope with some great techniques like dom diffing, angular 1.x paved the way for.. well, react and other powerful client frameworks but at this point is really showing its age)
<jaawerth>	that said, the big thing about angular is all my angular code fits together
<jaawerth>	I can just drop in a service, component, directive, etc, add it as a dependenc and get going
<jaawerth>	react mostly concerns itself with the view so the resti s more a la carte. this can be a benefit but it can make it harder to make everything play nice together
<jaawerth>	but hey, you can always say "screw download size" and do angular + Rx + react haha
<jaawerth>	(I'm pretty excited about angular 2 though, they incorporated a LOT of react's advancements and improved on their own)
<jaawerth>	(and they're incorporating reactive stuff right now)
<jaawerth>	by which I mean Observables
<greves>	by the way this works and its not that much of a hassle- i just inject the stylesheet manually in the .ejs template, then remove it when the app actually mounts on the client
<greves>	server-rendered css without nasty css injection into components and whatnot that i can't understand :P
<joepie91>	jaawerth: is Angular 2 actually easier to use or?
<joepie91>	that is, not a million edge cases
<joepie91>	that you need to dedicate half a career to getting acquainted with
<jaawerth>	I've only toyed with it at this point but I really like the concepts
<jaawerth>	it's also not fully released yet
<jaawerth>	but it's 1) pretty ES6-heavy, and 2) much more choose-your-own adventure than 1.x when it comes to FP vs OOP
<joepie91>	in the good way or the bad way?
<jaawerth>	(uh, except for its DI, which by default is pretty strongly class-based, but that isn't mandatory iirc)
<jaawerth>	potentially either
<greves>	jaawerth, i'll definitely be taking a look once its released, but i'm not convinced i'll want to switch
<jaawerth>	I've seen and tried enough to be optimistic though
<joepie91>	still DI? that's a no from me then
<joepie91>	:)
<jaawerth>	the new DI is pretty neat though
<greves>	jaawerth what kinds of things in react do you think need improvement?
<jaawerth>	and it's built with ES6 module loader in mind
<joepie91>	well, I don't really like what the ES6 module loader looks like, so..
<joepie91>	from what I've seen anyway
<fruitsNveggies>	does anyone know a linux media player that displays miliseconds?
<greves>	is that the import {Foo} from Bar business?
<joepie91>	fruitsNveggies: one sec
<joepie91>	not MPlayer
<joepie91>	it broke my sound settings, though
<joepie91>	lol
<greves>	joepie91, well that narrows it down from 400 options to 399, good work ;)
<joepie91>	well, not VLC either, so 398
<joepie91>	:p
<jaawerth>	greves: mainly CSS and the way changes propagate to children/leaf nodes
<jaawerth>	the latter is too verbose
<jaawerth>	and I think CSS should be more tightly coupled with the components
<joepie91>	not Totem either, 397
<greves>	jaawerth, what about context?
<jaawerth>	but I also honestly haevn't used it enough to have a fully fleshed out opinion
<fruitsNveggies>	joepie91, :|
<jaawerth>	too much backend for me lately
<greves>	jaawerth, i'm undecided on the css coupling
<jaawerth>	I still think react is *good*
<jaawerth>	I just don't think it's always going to be the "killer framework"
<greves>	on the one hand, i get the principle, but on the other hand, css really *is* quite a lot different from the semantic/logic that goes into a component
<jaawerth>	but the stuff it introduced with dom diffing is magical
<jaawerth>	and is now being adopted elsewhere
<greves>	ya
<joepie91>	not Bino either...
<fruitsNveggies>	joepie91, HELP
<joepie91>	fruitsNveggies: no idea, unfortunately - you could probably coerce mplayer into showing it on the terminal though
<joepie91>	with some obscure flag that nobody has ever used
<joepie91>	fruitsNveggies: what do you need it for?
<fruitsNveggies>	It will help me log the timestamps between bars of songs for my app.
<fruitsNveggies>	joepie91, or else I'll eventually write my own utility that I don't want to do now.
<joepie91>	fruitsNveggies: oh! Mixxx
<joepie91>	should be able to show you milliseconds
<fruitsNveggies>	YESSSSSSSSSSSSSSSSSSSSSS
<joepie91>	in some skins
<fruitsNveggies>	joepie91, U F^**IUN SURE???
<joepie91>	I recall it doing so at some point :P
<fruitsNveggies>	joepie91, can think of any others?
<joepie91>	fruitsNveggies: meh, my Mixxx is broken, can't test
<joepie91>	fruitsNveggies: can't think of any others, no
<joepie91>	mixxx should really get less temperamental with audio APIs
<joepie91>	fruitsNveggies: http://i.imgur.com/tlCQmme.png
<joepie91>	close
<TyrfingMjolnir>	How do I read a file async?
<TyrfingMjolnir>	Do I use createReadStream?
*	edoardo is now known as Guest23327
<zuz>	how about fs.readFile()?
<greves>	what does this bit of code do?
<greves>	https://github.com/jlongster/backend-with-webpack/blob/master/gulpfile.js#L56-L63
<p15>	anyone ever log a stream to AWS Cloudwatch Logs?
*	orionstein_away is now known as orionstein
<joepie91>	greves: that's written very strangely.
<greves>	oh nevermind i get it
<greves>	i think the .filter ['.bin'] was throwing me
<greves>	its just an exclude
<joepie91>	"for each directory in node_modules that is not named .bin, add it to nodeModules with the directory name as key and 'commonjs ' + directory name as value"
<greves>	ya got it
<joepie91>	a pretty weird exclude
<ljharb>	webpack is silly. use browserify.
<joepie91>	:p
<joepie91>	webpack is nice.
<greves>	naw i wanna get webpack up and working, seems good for my needs
<ljharb>	browserify is simpler.
*	joepie91 has not found that to be the case...
<aracodex12>	anyone can recommend me a JSON form builder? There's quite a number of them out there, but really, which one's good?
<ljharb>	aracodex12: npmjs.com/forms ?
<_rgn>	are there any great alternatives to travis for open source node projects?
<aracodex12>	ljharb: https://www.npmjs.com/package/forms this one?
<ljharb>	yep
<ljharb>	_rgn: why would you need one?
<_rgn>	ljharb: i don't specifically need, just curious
<_rgn>	think i'll try wercker
<aracodex12>	ljharb: what about alpaca forms?
<ljharb>	never heard of it
*	orionstein is now known as orionstein_away
<greves>	wow this is so interesting. how is this path resolving? i don't get it. it works, though.
<greves>	https://bpaste.net/show/e54cb5c9d7c3
<greves>	are the path names resolved from /project because that's where i run `node ./build/server/server.js` from
<greves>	?
<devster31>	hi, I recently started exploring node and I'm quite overwhelmed by the sheer amount of options there are, for example I'm still trying to waddle through the ocean of express.js, ember.js, meteor.js, backbone.js and the likes, is there any starter guide I can reference to?
<greves>	devster31, i wish there was but this seems to be the way of the node ecosystem
<greves>	after just going through all of that for the last few months myself, my advice is: think about what exactly you want to be able to do, and then ask for recommendations for tools that do that specific thing
<greves>	and then you'll learn what other tools you need to incorporate later on as you progress
<devster31>	oh, ok, I'll refine my idea then and get back here asking for advice, thanks
<greves>	do you know generally what you want to do?
<p15>	go for express.js
<greves>	devster31, that kind of advice is exactly why i was so confused for a long time :P in the end i did go for express but there are a lot of options that may be better depending on your particular use case
<devster31>	yes, I'd like to build a simple app to read cbr/cbz files and show the jpegs inside, and keep bookmarks, very basic, nothing fancy, just for personal use
<p15>	I built my own framework first then I went to express because everything is made for express
<devster31>	the setting would be a self-hosted installation
<p15>	also my own framework was dumb
<Raging_Hog>	are there any test runners that work with es6 without separate transpiling?
<greves>	devster31, ajaxy single page app or all server-side stuff?
<devster31>	I think single page app is enough, but I don't know for sure
<greves>	devster31, do you know what front-end framework, if any, you want to work with?
<greves>	i.e., angular or react or something lighter like jquery?
<devster31>	I don't really know, as I told you I'm very new to node, I know jquery and it's definitely what I'd use for this now
<greves>	devster31, well node is a pretty complicated beast. you want to use it as a server, yes?
<GreenJello>	Raging_Hog, I think all of them have plugins, but I'm sure mocha does
<GreenJello>	I usually use tape via babel-tape-runner
<devster31>	yep
<greves>	if your page is just a single page app and your server just needs to load that app (like, no database, not a huge project, etc.), you can do that with just a simple express server
<GreenJello>	Raging_Hog, https://babeljs.io/docs/using-babel/
<jaawerth>	Raging_Hog: define "separate transpiling"
*	itscassa|away is now known as itscassa
<jaawerth>	it's pretty easy to set mocha up to use babel's require hook
<mbwe>	devster31: you could try out sails.js it seems it gets a lot of attention lately
<jaawerth>	granted if you want to use ES6 in the tests themselves and not just run tests on required modules written in ES6, it's a bit more work
<Raging_Hog>	jaawerth: I don't want a separate directory which contains transpiled es5 files. Would be nice if I only had es6 dir and all tools would use that
<jaawerth>	oh well
<jaawerth>	you don't need that
<jaawerth>	it'll transpile on the fly
<jaawerth>	the require hook does exactly that
<mbwe>	devster31: sails is mainly used for the back end api stuff, and then you could decide if you want to render on the server or on the client, with those front end side frameworks
<jaawerth>	to preserve speed, it'll just ignore your node modules, so if any modules rely on ES6 you'll have to explicitly tell it not to ignore them
<ska-fan>	How would I rebuild all global packages (after an upgrade from 0.10 to 0.12)? Is that possible without much shell programming? Alternatively - how do I uninstall all global packages?
<jaawerth>	that is, npm modules
<jaawerth>	dependencies
<jaawerth>	ska-fan: in nvm it's very easy to migrate them. without it.. well I've never tried, heh
<Raging_Hog>	GreenJello, jaawerth, thanks. I'll use these new powers only for good
<ljharb>	ska-fan: do you have that many binary modules globally installed??
<jaawerth>	hey, it's a legit usecase. frustrating as hell when you change versions and hten forget to manually migrate something
<ska-fan>	ljharb: No it's just a few, but I don't want to hardcode them.
<ljharb>	what do you mean hardcode them. you just upgrade, then reinstall a few things, and you're done
<ljharb>	but i'm curious, which ones?
<ska-fan>	ljharb: I need that repeatable because I have to do that on a lot of servers and there are different packages installed globally on every server.
<ljharb>	wow, you're manually managing prod server configs?
<ljharb>	that's what chef/puppet are for
<ljharb>	but, if you use nvm, it'd be `nvm install 0.12 --reinstall-packages-from=0.10` ¯\_(ツ)_/¯
<ska-fan>	Yeah, I don't :)
<greves>	alright this is pretty cool, gulp + webpack ;) trying to get webpack hot reload working though like in this blog post: http://jlongster.com/Backend-Apps-with-Webpack--Part-III
<jaawerth>	ska-fan: if you're in linux, you can do npm list --global --parseable|xargs npm -g uninstall to uninstall all the globals (I think - try at your own risk)
<ljharb>	jaawerth: don't forget to filter out npm itself.
<ljharb>	or you'll break everything.
<jaawerth>	hahaha indeed
<jaawerth>	hence the at your own risk ;-)
<jaawerth>	is there a "trial run" flag for npm stuff?
<jaawerth>	I imagine not
<jaawerth>	ska-fan: see ljharb's warning
<jaawerth>	ska-fan: in other words don't run that command I just gave you verbatim
<ska-fan>	jaawerth: thx
<jaawerth>	also that wouldn't quite work since npm list --global --parseable will output the full paths
<jaawerth>	also --depth 1 will help (keeps it to top-level deps)
<jaawerth>	ahh slowly getting there. not --depth 1, but --depth 0
<jaawerth>	ska-fan, ljharb: haha that was fun. okay, so this command will (maybe reliably, maybe not) list all global packages NOT counting npm itself: npm list --depth 0 --global --parseable|egrep -v 'lib$'|grep -v npm|egrep -o "([^/]+$)"
<jaawerth>	ska-fan, ljharb: so, you can pipe that into "xargs npm -g uninstall" and it should theoretically do it (but still at your own risk, could be side effects I dunno etc)
<jaawerth>	in theory you could pipe it into an install command for another version but that depends on how you're juggling versions
<jaawerth>	with a little extra console trickery you could pipe it first to uninstall and then to install sequentially
<GreenJello>	jaawerth, can't you just do `ls $(npm root) | grep -v npm  | xargs npm -g uninstall`
<GreenJello>	npm root -g*
<greves>	ah i'm very close to the perfect workflow
<greves>	just one or two more webpack bugs to work out...
<GreenJello>	greves, don't worry, it'll be considered terrible in 6 months :-)
<greves>	GreenJello, i'll be quite happy if it lasts 6 months
<GreenJello>	:-)
<jaawerth>	GreenJello: never used npm root before!
<jaawerth>	huh, npm root lies when using nvm
<jaawerth>	interesting
<GreenJello>	huh that is interesting
<greves>	GreenJello, server & client separate builds from shared source, client with multiple separate entry points + common modules separated into own file, all with webpack hot reload for live updates on every edit both server & client-side
<greves>	anything i'm missing? :D
<tarkus>	Q: What's the best way to serialize JSON? e.g. res.send('var initialData = ' + JSON.stringify(data))
<GreenJello>	greves, sounds good
<GreenJello>	tarkus, close, but you need to handle </script>
<GreenJello>	>> '<'.charCodeAt(0).toString(16)
<ecmabot>	GreenJello: (string) '3c'
<GreenJello>	>> '\x3c'
<ecmabot>	GreenJello: (string) '<'
<GreenJello>	so JSON.stringify(data).replace(/</g, '\\x3c') would do it
<jaawerth>	GreenJello: anyway, xargs is one of those things that took me years to realize was there, heh
<jaawerth>	and then I stumbled across it and felt the fool
<jaawerth>	I mean, I found it like last year and I've been linuxing for 10 years
<tarkus>	QL Is it OK to use JSON.stringify(obj) if I need to send serialized json back to a client? Or it's better to use JSON5, or maybe something else?
<jaawerth>	derp derp derp
<greves>	darn, really close to gettin this working, but webpack hot reload is hard to configure
<TyrfingMjolnir>	What counts for/against having express run on the same node as the database?
<TyrfingMjolnir>	What counts for/against having web service run on the same node as the database?
<p15>	for would probably be latency
<TyrfingMjolnir>	low latency?
<TyrfingMjolnir>	Not too crowded in the lift aka localhost?
<p15>	yeah
<TyrfingMjolnir>	and against?
<TyrfingMjolnir>	latency again
<TyrfingMjolnir>	against is also load balancing
<j0rd__>	im looking to profile a nodejs app
<j0rd__>	been trying a bunch of things today
<j0rd__>	nothing seems to get the job done
<j0rd__>	any tips on good packages to use to profile nodejs functions
<j0rd__>	looking for something like Facebooks XHProf for PHP
<a--m>	j0rd__ newrelic?
<j0rd__>	nothing local
<j0rd__>	I'd like to get down to the function level, not just request level?
<j0rd__>	i'll take a look at newrelic
<a--m>	it's not local...
<a--m>	local you may want to try: https://github.com/node-inspector/node-inspector https://github.com/c4milo/node-webkit-agent https://github.com/bnoordhuis/node-heapdump http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html https://github.com/baryshev/look
<a--m>	I would start with http://c4milo.github.io/node-webkit-agent/
*	Narig0 is now known as Narigo
<konobi>	j0rd__: under load?
<akfp>	what tool correctly parses v8.out for nodejs 0.10.35?
*	Tew[D] is now known as Tew
*	orionstein_away is now known as orionstein
*	edoardo is now known as Guest26364
<MadHatter42>	i'm having troubles with async.each
<MadHatter42>	it callbackes before everything is finished
<MadHatter42>	its quite annoying
<MadHatter42>	i've got this snippnet of code
<MadHatter42>	async.each(servers1,
<MadHatter42>		function(task,callback) {
<MadHatter42>			check_dns(task, function(){
<MadHatter42>				callback();
<MadHatter42>			});
<MadHatter42>		},
<MadHatter42>		function(err){
<MadHatter42>			console.log("mbarun me ti");
<MadHatter42>		}
<MadHatter42>	);
<asteele>	MadHatter42 you will want to use a pastebin
<MadHatter42>	asteele, yeah, my bad
<MadHatter42>	asteele, but anyway, the code prints the exit mesage before all calls are finished
<GreenJello_>	good time to switch to promises
<GreenJello_>	but most likely the problem is in check_dns
<konobi>	you need to pass the err to the callback
<MadHatter42>	konobi, ?
<MadHatter42>	GreenJello_, ?
<MadHatter42>	care to elaborate e bit
<MadHatter42>	?
<Sophos1>	Xello everyone
*	Sophos1 is now known as Sophos
*	Sophos is now known as Soph0s
*	T_Rex_ is now known as T_Rex
<c0b>	has anyone seen an npm install --dev that never stops installing packages? I keep getting warnings about dependencies being both in dev and in regular dependencies, it seemed to recurse infinitely
<Soph0s>	lo
<Soph0s>	l
*	nullrouted_ is now known as nullrouted
<Soph0s>	maybe it just tries to install every package out there
<c0b>	i was able to quickly fix the installation by moving the dev dependencies into regular dependencies, so i could run the tests
<c0b>	but ... very weird
<c0b>	Soph0s: no, it was going over the same packages, it seemed like anyway, i couldn't keep track of it, could go back... but don't wanna waste my time
<Soph0s>	isnt is --save-dev
<GreenJello_>	anyone have a tail -f as a webapp thing I can use?
<jaawerth>	GreenJello_: no, but ask me in 24 hours and I probably will (seriously)
<jaawerth>	I'm gonna need to write one today/tomorrow
<erste>	anyone uses stormpath ?? what are your thoughts? having your user data stored in their servers?
<jaawerth>	GreenJello_: oooh https://www.npmjs.com/package/pm2-gui
<Nahojj>	Can anyone explain how to send any request with Express Angular?
<Nahojj>	Can anyone explain how to send any request with Express to Angular?
<jaawerth>	GreenJello_: also-ooooh https://github.com/NarrativeScience/Log.io
<GreenJello_>	so complicated o_O
<GreenJello_>	I just wanted: thingy PORT FILE
<jaawerth>	GreenJello_: I just installed and configured log.io. It's.. almost exactly what you're looking for I think. Configuration is super quick
*	lance|afk is now known as lanceball
<jaawerth>	GreenJello_: only downside I'm seeing at the moment is there doesn't appear to be a way to add additional log files to track from the UI, you have to actually tell it what paths to watch in the conf file
<GreenJello_>	are there example config files somewhere?
<GreenJello_>	I'm looking at the readme and it just tells you where the config file is
<jaawerth>	GreenJello_: I just opened the file and saw what to do by the format of it - I mean maybe there are more advanced options for globbing or whatever, but at the very least pointing it at specific log files for various services becomes readily apparent once you see the file
<GreenJello_>	oh okay
<GreenJello_>	I'll give it a try, thanks
<jaawerth>	GreenJello_: sure thing. basically it's just an object of logStreams, the keys being an overall category, the values being an array of files to track
<jaawerth>	it's all JSON
<jaawerth>	oh, and you can leave the server defaults alone
<jaawerth>	only other thing you might need to do is configure the admin creds in the server conf file
<jaawerth>	GreenJello_: it's tail only though, I was kinda hoping for parsing capabilities too
<jaawerth>	I'm actually toying the idea of logging stuff to couchdb via winston and then plugging a browser right into that so I can query and use different views and stuff to manipulate it while also subscribing to changes for "tail"
<GreenJello_>	that's a cool idea
<GreenJello_>	I just need something simple for now
<Soph0s>	Anyone need help with node?
<ian_mac>	jaawerth: so you're going to built ELK except with CouchDB instead of Elasticsearch?
<ian_mac>	s/built/build/
<jaawerth>	ian_mac: poor man's elk ;-)
<ian_mac>	hehe
<jaawerth>	okay, pm2-gui is pretty slick though
<jaawerth>	'course, for that to be useful for logs you have to have pm2 handling the logs
<bendem>	Do I really need to wrap my node code inside of self called function? This yields "SyntaxError: Unexpected strict mode reserved word"
<bendem>	$ echo "'use strict'; let a = 'a'; console.log(a);" | node
<bendem>	actually, let doesn't work even inside a self called function
<jecran>	Hi people. Kind of a broad question, but is it possible to get the currently active/focused application? I want the webpage to display the name of the current application being used by the local computer, IE firefox, or command prompt etc
<bendem>	so how do I activate strict mode?
<jecran>	'use strict'   first line of code :D
<bendem>	doesn't work
<bendem>	$ echo "'use strict'; let a = 'a'; console.log(a);" | node
<bendem>	says an error message about not being in strict mode
<jecran>	 node --use_strict    try that
<bendem>	ok, so I guess it's a node bug
<jecran>	echo "let a = 'a'; console.log(a);" | node --use_strict       Is that what you tried?
<TyrfingMjolnir>	In linux how do i set what #!/usbin/env node points to?
<bendem>	jecran, I tried that and the same with 'use strict';
<bradleymeck>	bendem: never use the repl/pipe to ever test how behavior works
<bradleymeck>	repl/pipe take an entirely different route from modules to run the js
<bendem>	I used that because it was easy for everyone to test and see the problem
<bendem>	My actual problem is that "node --use_strict index.js" still yields that error
<jecran>	Active processes?? Is it possible to return the currently active, focused window from the server? I want to display on the webpage what application is being used on the desktop. any ideas would be awesome, I can get a process list but not narrow down a focused window
<lbn>	TyrfingMjolnir: put the path to your node bin directory first in your PATH
<bendem>	$ echo "'use strict'; let a = 'a'; console.log(a);" > a.js && node a.js
<bendem>	bradleymeck, ^ same problem
<bradleymeck>	bendem: that runs fine, its even valid strict mode code
<bendem>	hmm
<bradleymeck>	echo "'use strict'; a = 'a'; console.log(a);" > a.js && node a.js
<bradleymeck>	remove the let and you see a strict mode error
<bendem>	I know it won't work without the let, I just can't figure out why it doesn't with it
<lbn>	echo "'use strict'; let a = 'a'; console.log(a);" > a.js && node --harmony a.js
<lbn>	this worked
<bendem>	I guess my node version is outdated
<bendem>	damn fedora, update your repos
<jecran>	<<<<=== has had bad luck trying to use ecma6 too
<ian_mac>	some of the ECMA 6 stuff was added in 0.12 wasn't it?
<bradleymeck>	bendem: what version?
<bendem>	0.10.36
<bradleymeck>	ian_mac: some, io is way ahead still
<bradleymeck>	bendem: that has strict mode in it
<ian_mac>	bradleymeck: it's less the strict mode and more the let
<jecran>	Maybe certain keywords, but not sure if 'let' is one of them
<bendem>	bradleymeck, not fully it seems
<bradleymeck>	bendem: it does not have let, so id be curious how that works out
<bendem>	damn
<bradleymeck>	also --harmony means the features have bugs
<sonthonax>	Hello. I’m trying to use superagent in jest-cli, I’ve set it to not being mocked, however I can’t seem to get the request working.
<sonthonax>	If anyone has ever made a XHR request in jest-cli.
<sonthonax>	I’d really really appreciate if they took a look at the this stack overflow question where I go into more detail.
<sonthonax>	http://stackoverflow.com/questions/30239827/how-do-use-superagent-when-testing-in-jest-cli
<symbol>	Anyone know of a module for pretty urls/slugs? I found one but it's only for node/mongo. I'm between rewriting the url or just saving a sluf to the db and using that for links.
<symbol>	Still trying to find out if one is more SEO friendly.
<adv_>	so node.js is something like php but in js ?
<ian_mac>	there are similarities between node.js and PHP.  There are also many differences.
<breakingthings>	It can play a similar role as PHP, but can also do other things..
<sonthonax>	Has anyone here used jest-cli?
<sonthonax>	I sincerely need help with something involving either jest-cli, or general knowledge of testing.
<sonthonax>	I’ll give you the rest of the BTCs in my wallet if you’d like.
<sonthonax>	I’m trying to do something incredibly simple.
<Aria>	adv_: Like PHP if you use ejs; but node replaces not just PHP, but the whole web server. And you can write completely not-web things with it.
<sonthonax>	But javascript and testing is making me pull my bloody hair out.
<adv_>	ejs?
<Aria>	ejs is JS embedded in text.
<Aria>	Like PHP is embedded, with <?php ?> delimters
<adv_>	Aria: what do you mean by replace the whole web server
<Sorella>	adv_: Node also replaces e.g.: Apache/NGinx
<adv_>	so it runs on the client or the server?
<cr0mulent>	Hello, I am getting the following error when I try to run a node project:          response.writeHead(200, {"Content-Type": "text/html"}); TypeError: Cannot call method 'writeHead' of undefined
<Aria>	node for web stuff usually is used as a persistent daemon that speaks http; you integrate it with other things by proxying to it. It can actually replace nginx and apache.
<cr0mulent>	Why is response undefined?
<Aria>	node when acting as a server runs the server.
<Sorella>	adv_: it's a programming platform that runs JS. Much like the standard Python distribution and the JVM
<Aria>	(node can also act as a client, but I don't think you're asking about that)
<adv_>	Sorella: but you need a web server which runs the nodejs daemon right?
<Sorella>	adv_: no. You write your own server in Node.
<Sorella>	adv_: just like you would write your own server in Java or Python
<adv_>	Sorella: ok but you still host it somewhere and it's executed server side
*	ChanServ gives channel operator status to AvianFlu
<adv_>	so like instead of django i can have node.js , right?
<Aria>	Yeah. It has to run on an actual computer.
<Sorella>	adv_: if you want to write a web application, you need to run it somewhere. The easiest way is to use something like Heroku, or a VPS (like Digital Ocean).
<sonthonax>	Talking of using node as a client, how do I use node as a client when tesitng it?
<ian_mac>	adv_: Typically ,when you build an app in PHP, you have Apache listening on a port, and loading PHP to process the request.  With a typical NodeJS app, NodeJS listens on the port and executes some code and sends the response itself.
<sonthonax>	I can’t for the life of me get requests to work in jasmine
<adv_>	well i come from php in server side and using js on client side. what is a good reason to use node.js?
<ian_mac>	sonthonax: perhaps paste some code showing what you've tried and what you are trying to do.  If somebody has suggestions they will offer them
<sonthonax>	http://stackoverflow.com/questions/30239827/how-do-use-superagent-when-testing-in-jest-cli
<sonthonax>	ian_mac: it’s all in the question.
<Aria>	adv_: Better language than PHP, much richer module culture, persistent processes, faster networking, streaming support for lots of things.
<sonthonax>	For the sake of detail, and future reference.
<Sorella>	adv_: you want to use some library that exists on the Node.js ecosystem that solves a problem you're trying to solve. Your whole team is familiar with JS, and you want to use it on the server as well. You want to share some code between the server and the client. Possibly others
<adv_>	faster networking?
<adv_>	also what are persistent processes?
<Aria>	Yeah. Node's really got socket communication tweaked.
<RLa>	damn ejs has broken custom delimiters
<Aria>	Yknow how in PHP, there's nothing running after the request? And starting each is a blank slate?
<Sorella>	Oh, yeah, if you're comparing to PHP, it's all around better. But there's less frameworks for things like blogs/etc.
<Aria>	You don't have to do that in node.
<sonthonax>	I’m trying to make a request in jasmine.
<adv_>	i'm more comfortable with php than with js, should i stay with php then ?
<Drama>	MongoDB question, if im planning on running mongo locally on my web server (hosted in the cloud, same server) are there any security precautions i need to take? Does mongo point to any external ports that would open it up to a security breach?
<Aria>	sonthonax: "in jasmine" ?
<Aria>	adv_: How much do you like learning?
<sonthonax>	Aria: jasmine test framework.
<adv_>	a lot but i have time constraints so it won't be for the sake of learning it
<adv_>	just*
<Sorella>	If you're only familiar with PHP & procedural programming, Node's going to have a huge learning step.
<Aria>	sonthonax: Yeah. What's that got to do with making a request?
<adv_>	node is not procedural?
<Aria>	Node has no synchronous IO.
<Sorella>	adv_: you can write procedural code in JS, but that's a bad idea in Node.
<goabonga>	adv_: trolling day ?
<Sorella>	Because it leads to programs that are impossible to reason about
<Aria>	So "ask for this thing, then do this thing" is a couple functions chained together.
<sonthonax>	Aria: because making requests is fine. The module is running within jasmine.
<adv_>	performance wise on the server , do they have differences?
<Aria>	sonthonax: So what's the problem?
<Aria>	adv_: The v8 javascript engine in node is really kinda scarily fast.
<Sorella>	adv_: Node has better raw performance, but it depends on how you write your applications
<sonthonax>	Aria: superagent wont work when tested.
<sonthonax>	It wont make a request.
<sonthonax>	It wont do anything.
<Drama>	@adv_ i went from 100% php developer in an enterprise setting to 100% node.js within a matter of months.  I already had a solid base of JS from the front end so i imagined that helped, however the switch was well worth it
<GreenJello_>	adv_, it depends on what you're doing, but node is equal to significantly better depending on the task and hardware
<Sorella>	You can just as easily make Node pretty slow
<Aria>	What does it do instead?
<sonthonax>	Aria:
<adv_>	is there a tutorial for node.js for people coming from php ?
<sonthonax>	Aria: it does nothing. http://stackoverflow.com/questions/30239827/how-do-use-superagent-when-testing-in-jest-cli
<konobi>	adv_: it's just javascript... just treat any IO like you were doing it with Ajax
<Aria>	Goodness. And what is a reflux?
<Sorella>	For example, using synchronous operations in Node is going to prevent Node from responding to any request in a server, thus making it slow.
<adv_>	does it make sense to use both php and node.js ?
<adv_>	in some apps
<GreenJello_>	adv_, you kinda have to forget about php, and just learn node; comparing it to php is hard because it doesn't line up well
<Aria>	Yes. Especially while porting or integrating functions into an already done app.
<GreenJello_>	you can, sure
<adv_>	GreenJello_: what do you mean by line up
<adv_>	?
<Aria>	Often via proxies. Put node or nginx in front of the PHP, send some URLs to node.
<adv_>	Drama: how did you make that transition?
<GreenJello_>	adv_, there's no equivilent mysql_fetch_row, for example
<Aria>	Pass websocket traffic or other realtime parts to node, keep your existing PHP
<GreenJello_>	adv_, and you don't use echo or similar
<adv_>	GreenJello_: what do you use for mysql connections ?
<Aria>	There's a mysql module for node.
<adv_>	GreenJello_: you use console.log ?
<Aria>	But it works somewhat differently.
<GreenJello_>	adv_, npmjs.org/package/mysql is the basic mysql binding
<GreenJello_>	there's things built on top of it
<GreenJello_>	adv_, console.log prints to stdout like echo, but stdout is just for logging, it doesn't go to the browser
<lucidz>	hm
<GreenJello_>	this is what I mean; there's far more differences than similarities
<Aria>	adv_: one thing to get used to in node is that 'console.log' writes to the server's output -- usually logging. Each request handler gets a req and res object you can read from and write to. And the server can be handling several of these at once, switching between them as soon as they send or receive ,having to wait on the network.
<adv_>	i see
<Drama>	adv_: i had a product tracking system i developed for a friends business (all in php, mysql). Simple data and data logic, i had about a month free to play around and decided to rebuild the entire system using node and his existing mysql db.
<adv_>	Drama: what resources did you use to learn it?
<GreenJello_>	adv_, for resources, if you're not comfortable with JS, see eloquentjavascript which also covers some node.js stuff, and then look at expressjs which is the base for most web servers in node
*	node-slackers5 is now known as ross
<ross>	wish my coworkers knew about that, we have an entire framework dedicated to caching the req/res objects by a uuid, and that gets stored on the user record
<adv_>	GreenJello_: i know some js
<Drama>	lots of stack overflow and youtube, you would be suprised how many people have made the switch. You can litteraly google how would i do X in node like i do in PHP and 90% of the time get a response. The hardest part for me was getting into the async mindset!
*	ross is now known as Guest85130
<Aria>	Indeed. That's gonna be the biggest hurdle.
<adv_>	is rails more like nodejs ?
<Aria>	Yes in some ways no in others. Kinda. Not really.
<rashkov>	closures are pretty weird too probably
<Aria>	Rails does run as a persistent process.
<breakingthings>	node is a little closer to ruby
<Aria>	But it's a huge, sprawling, complex framework.
<adv_>	django ?
<breakingthings>	the thing beneath rails
<Aria>	node is ... node itself, there's not much to.
<Aria>	node is lots like python + twisted.
<IvailoStoianov>	django is framework
<Aria>	node is a lot like ruby + eventmachine
<adv_>	ah so async
<breakingthings>	yes
<Aria>	Yes.
<Aria>	ONLY async.
<breakingthings>	very async, many asyncs.
<adv_>	hm weird
<breakingthings>	all the asyncs.
<loosh>	its harder to do sync than async in node
<Aria>	Yeah. It just doesn't have sync network IO
<Aria>	And other sync IO is shunned.
<Drama>	get a basic understanding with some simple node/express tutorials on youtube. Then try to build a real world example. Tutorials will always get you familiar but in my opinon you wont get a full grasp of how to use node untill your building a real world app.
<Aria>	(and it's being talked about to make it yell at you if you use it after startup)
<goabonga>	:) does any one have a solution to run headless tests on chrome with selenium standalone container on travis ?
<adv_>	why use expressjs?
<goabonga>	adv_: use expressjs it's like to use Silex when you start to write php app
<Drama>	I will say node is beautiful once you have a grasp, being able to talk the same language across all area of development, and front end. cant get much better than that! Recently started exploring mongoDB, havent been this excited about programing since i first started learning 5 years ago!
<adv_>	didn't know about silex, i don't use frameworks in php
<Aria>	Yeah. Node doesn't even have the concept of "different things happen for different URLs" built in.
<rashkov>	Has anything as good as Rails' activerecord caught on in Node? Or are most people going straight sql/nosql?
<Aria>	rashkov: knex and bookshelf are popular. Though the goodness of ActiveRecord is disputable ;-)
<rashkov>	well, let's say sheer speed of development then
<rashkov>	but good to know, i'll check thsoe out
<adv_>	aria: how do you mean the different urls thing?
<adv_>	what do you mean by*
<Aria>	Using node, without express or any other tools, just gets all requests sent to the handler function
<Aria>	And it's up to you to separate them out, so that a user going to /view is different than a user going to /junk
<Aria>	Node is Very Small. But the ecosystem of stuff to use it with is huge.
<Aria>	It has very little built in. The opposite of PHP.
<Aria>	Mysql is an addon. Postgresql is an addon. Graphicsmagic integrations (such as they are) are an addon.
<Aria>	http handling is built in, but only the most spartan basis. You'd plunk hapi or express on top to use it better.
<Drama>	adv_: you will want to use a framework with Node, you could get away with using node at its most basic with out a framework, but it would make life 100x harder for you.
<Drama>	i would venture to say learning Express,Sails, etc.. is almost just as important as learning Node itself
<Aria>	Indeed. We have a very strong "doing everything without any addons is silly" culture.
<adv_>	i see
<adv_>	what is the most popular framework ?
<Aria>	express.
<Aria>	Though popularity is a terrible sole metric to decide on.
<adv_>	for maturity
<Aria>	I happen to like Express, or there's a pile of modules that are similar to it but broken up a bit so you can pick and choose better.
<Aria>	Maturity and popularity aren't the same thing ;-)
<Aria>	Though Express is both.
<adv_>	thanks
<ian_mac>	NodeJS tends to have less of the notion of monolithic frameworks than the PHP world, instead having more, smaller frameworks.
<Drama>	do yourself a favor, install Node and Npm, install express from the NPM and follow a simple node/express tut on youtube. This will help you way more than any of us possibly can. if you have questions after or want opinons come on back :)
<Aria>	Definitely what Drama said.
<adv_>	npm is like gems?
<Aria>	Only way to get a sense of it is to try.
<Aria>	Yes.
<ian_mac>	yes, or composer
<Aria>	Though installed into your app specifically, so different apps can have different versions of things.
<Aria>	(The dependency model in node is unique. Pretty good stuff.)
<adv_>	thanks, i got my basic questions covered, i have to investigate on my own now as you suggested
<lennym>	I agree. For all the time I spend getting annoyed with npm, it's a world better than any alternative for other platforms.
<goabonga>	npm is like composer
<Drama>	Also if you havent/dont already, get a simple understanding of callbacks and how they work in JS, i had never really played with the idea of callbacks until i stumbled into Node, Async with callbacks alone will make you leap from PHP to node. Makes life so much easier
<hipsterslapfight>	npm is like if gems were rather less broken than they are
<jaawerth>	Aria: well that ended up leading to a somewhat interesting discussion (even though strinig objects are likely a no go) https://github.com/ubolonton/js-csp/pull/61#issuecomment-101984541
<goabonga>	and node-gyp is like php_ext ?
<breakingthings>	npm ~= rubygems + bundler
<breakingthings>	adv_: ^
<adv_>	example of callbacks?
<adv_>	i've seen callbacks in gtk
<moleWork>	c# has them too
<moleWork>	php has closures sorta
<breakingthings>	adv_: foo(function(n){ console.log( n+1); }); function foo(cb){ cb(1); }
<breakingthings>	2 will print to console
<adv_>	ah ok
<Aria>	jaawerth: interesting!
<bberry>	when using pm2, if i have started my application with some environment variables, are those preserved if i run `pm2 restart`, or do i need to provide those again?
<cr0mulent>	can someone tell me how I would define response?          response.writeHead(200, {"Content-Type": "text/html"});
<cr0mulent>	                  ^
<cr0mulent>	TypeError: Cannot call method 'writeHead' of undefined
<moleWork>	cr0mulent, it gets passed into the request handler function so that it's available to that context
<Aria>	Yeah. That's supplied by node in an http server callback
<moleWork>	(as the first parameter)
<moleWork>	err second!
<jaawerth>	cr0mulent: ha! I like your screen name
<jaawerth>	(it's a perfectly cromulent screen name)
<cr0mulent>	jaawerth: it embiggens even the smallest man
<cr0mulent>	what is the pastebin du jour around here?
<Aria>	Any you use. Grr if you use one that shows people ads.
<Aria>	I prefer gist.
<moleWork>	+1
<moleWork>	except that gist doesn't let you resize the input box which sucks
<jaawerth>	which is weird, because you can fullscreen it in github comments
<jaawerth>	but hey, ACE editor
<jaawerth>	that's a win
<MI6>	joyent/node: Julien Gilli v0.12 * d2395f7 : Now working on 0.12.4 (+2 more commits) - http://git.io/vU928
<MI6>	joyent/node: misterdjules created tag v0.12.3 - http://git.io/vU924
<MI6>	joyent/node: misterdjules created branch v0.12.3-release - http://git.io/vU92R
<cr0mulent>	Here is the source for my nodejs project. I am following the exercises in “The Node Beginners Book”. https://gist.github.com/bradym80/f9df36dce3b3ecda39df
<cr0mulent>	I cant determine why response is undefined.
<Sorella>	cr0mulent: router.route never passes the "response" parameter to any handler
<GreenJello_>	step 1. use express :-)
<cr0mulent>	GreenJello_: I’m new to all this, why do you say that?
<GreenJello_>	cr0mulent, pretty much no one uses http directly
<cr0mulent>	so as a beginner I should just forget this tutorial and find an express.js tutorial?
<GreenJello_>	yeah
<cr0mulent>	GreenJello_: jebus. alrighty.
<GreenJello_>	the official docs are pretty good http://expressjs.com/
<cr0mulent>	GreenJello_: so express essentially scaffolds what I am building in this tutorial.
<Sorella>	cr0mulent: express is a library for writing web applications. You can write your own library, but that doesn't help you with writing actual web applications :)
<cr0mulent>	Sorella: How did you learn node.js?
<substack>	GreenJello_: I use http directly all the time
<substack>	cr0mulent: the core docs are a good place to start
<Sorella>	cr0mulent: reading the docs. But I was already familiar with the language, domain and programming model.
<substack>	and then just hunt for modules
*	ChanServ gives channel operator status to aredridel
<ian_mac>	oooh the express documentation has gotten a lot better.  Nice to see.
*	aredridel is now known as Aria
*	michael_imac is now known as michael_mbp
<jaawerth>	except screw the docs page itself, devdocs.io forever
<ian_mac>	(or until it decays and no longer gets maintained)
<jaawerth>	haha well
<jaawerth>	I'm pretty sure it uses the same format/scraping as dash/zeal
<jaawerth>	which means if it ever decayed one could simply fork the code and keep on using those docsets
<jaawerth>	hrm, I guess it doesn't. its list of supported docs is so similar to dash/zeal's (well, it's a subset) that I jumped to the conclusion that they were pulling from 'em
<hipsterslapfight>	ian_mac: iirc strongloop look after the docs now
<hipsterslapfight>	seeing as they stamp their ugly green logo on everything i guess they feel they should
<jaawerth>	it DOES have a scraper app though so one could certainly keep it going if it ever died
<ian_mac>	I'm sure it will last as long as it is useful
<jaawerth>	hipsterslapfight: I think ian was responding to my devdocs comment, not express
<hipsterslapfight>	16:37 <ian_mac> oooh the express documentation has gotten a lot better.  Nice to see.
<jaawerth>	oh
<ian_mac>	I was responding to the 'forever'
<jaawerth>	yeah
<jaawerth>	heh
<jaawerth>	FOREVER
*	lanceball is now known as lance|afk
*	nnyk_ is now known as nnyk
<Industrial>	Hi.
<Industrial>	Is there a library for replacing variables in strings or a dead-easy way to implement it?
<Industrial>	I have a configuration object where I want some keys to act as variables for inside values that are deeper e.g.
<Industrial>	options = { variables: { foo: 'YES' }, stuff: { bar: 'some/$foo/here' } };
<Industrial>	so that I get options.stuff.bar === 'some/YES/here';
<Aria>	Probably one of the es6 template alikes is your best bet
<Industrial>	I have a lot of paths and I want to base a lot of them off of several configurable ones so that my config object becomes DRY. only configure the main paths to change them all but still be able to override one that sits deeper completely. I see no other way to do this other then variable replacements inside the strings...
<Aria>	You might also check out shortstop.
<Aria>	Or confit.
<Aria>	(confit processes json, and lets keys refer to others, in a postprocessing step)
<Industrial>	https://gist.github.com/Industrial/e36be63eb2cb9816b695
<Industrial>	k
<Aria>	Totally the kind of thing confit is built for.
<Industrial>	these are the default options so I'm going to extend another options object with this one :)
<Aria>	On the other hand, consider whether this will make your configuration completely impossible to reason about mechanically.
<Aria>	DRY is not necessarily a good goal.
<moleWork>	saving lines of code for DRY adds library like complexity to otherwise simple code
<Industrial>	that's true. Right now I just extend a runtime options with these defaults, but that does mean that when my layout is different from the defaults I have to re-specify most paths
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Thu May 14 12:17:44 2015

**** BEGIN LOGGING AT Thu May 14 12:22:35 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
*	[freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<moleWork>	adding options to facilitate behaviors not shared by all usages
<Aria>	There's another classification scheme for this kind of complexity. Parsing language class.
<Aria>	Reference and context sensitivity, all that, they increase how hard it is to parse and manipulate.
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Thu May 14 12:24:39 2015

**** BEGIN LOGGING AT Thu May 14 12:30:36 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	nuggut is now known as matthewt
*	Disconnected (Connection reset by peer)
**** ENDING LOGGING AT Thu May 14 12:40:59 2015

**** BEGIN LOGGING AT Thu May 14 12:55:53 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.2, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Tue Mar 31 21:29:08 2015)
*	[freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
<Aria>	Yeah. That's into the weeds
<moleWork>	yup... i'd like to be a low level programmer but i fall flat on my face in the mud and become unproductive when something doesn't work
<moleWork>	getting applications to work is hard enough
<bradleymeck>	Aria: idk i consider pipe moving data, not changing lifetime
<bradleymeck>	but I use multiple producers per stream so they all get {end:false}
<bradleymeck>	soo many "write after end" errors
<Aria>	Yeah, I consider it a unix pipe. Single in single out.
<Aria>	I consider multiple in single out to be a special case worthy of an explicit pipe fitting.
<moleWork>	in my situation i was stream1|stream2|multipleout (unzipping)
<moleWork>	and it became a mess
<Aria>	Oh unzip modules. Those are special.
<Aria>	Especially with fstreams not regular streams
<moleWork>	that's why i deleted the code... i was like... ummmmmm... i dunno about this any more
<moleWork>	and decided to unzip to a temp folder first
<moleWork>	instead of flying it all out of the streams at once
<Aria>	Multi-out needs better interfaces. Otherwise you end up with weird unbridled concurrency.
<moleWork>	it doesn't help when the available node modules end up only half maintained
<moleWork>	(which i don't blame the author... it's just something you run into while using npm)
<moleWork>	#of downloads does != high quality or well maintained
<Aria>	Indeed.
<bberry>	i havent used npm much, but can you have it shared
<bberry>	or just open, like a wiki or something
<jaawerth>	I still find the "null ends the stream" but more annoying than error handling in node streams, heh
<jaawerth>	bit*
<moleWork>	just curious why would null on a stream not end it?
<Aria>	Because it's an object mode stream that you expect what you put in to come out the other side?
<nuizzy>	multi-out stuff is probably issues that the streams WG should be tackling
<moleWork>	ah yeah.. i guess pushing {} sucks do detect?
<Aria>	And why would that be any different?
<Aria>	It really needs to be an out of band signal.
<dimitar>	Guys, can you recommend any video tutorial for node/express that doesn't go into explaing MVC and stuff like that, since I just want to kickstart my learning and I already have good understanding on general topics like that from PHP (and frameworks like laravel/symphony ) ?
<dimitar>	Anything perhaps similar to Laracasts ( for those of you who know the site ) ?
<moleWork>	could look at codeschool
<moleWork>	they have a couple
*	orionstein is now known as orionstein_away
*	fourq is now known as awayq
*	awayq is now known as fourq
<monastic-panic>	lol awayq
<monastic-panic>	+1
*	lance|afk is now known as lanceball
<ari-rootpcs>	Hey all - kinda new to administering a site with Node.js - I have 3 Vhosts set up with Nginx, each with its own port.  I'm having some trouble getting 'forever restart server.js' to run on more than one pipeline from Codeship.  Anyone have some experience with that kinda setup?
<ari-rootpcs>	Anyone here?
<loosh>	nope
<loosh>	>1400 people in channel
<Aria>	The question you asked is painfully specific to several disparate parts.
<Aria>	Forever, codeship, nginx. You limit the people who will respond to the people who have that specific experience.
<Aria>	Are all three of those things involved in your problem?
<smartsam>	Honestly for something like that, I would start a stackoverflow post
<ari-rootpcs>	Fair enough
<rom1504>	maybe you could try asking your question though, that's always useful
<moleWork>	sounds like a codeship specific question
<loosh>	segfault, buffer underrun
<ari-rootpcs>	Codeship seems to deploy properly - it's afterwards when I've copied the .../config/env/development.js to the right path with the proper port, that's when I run into the problem of server.js not restarting correctly
<Aria>	What does it do instead?
<ari-rootpcs>	on one Vhost I get this:
<ari-rootpcs>	warn:    --minUptime not set. Defaulting to: 1000ms warn:    --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000ms info:    Forever processing file: server.js
<moleWork>	forever is a bit of a beastthat looks fine
<moleWork>	err
<moleWork>	that looks fine
<ari-rootpcs>	and on the on the other I get this:
<ari-rootpcs>	info:    Forever restarted process(es): data:        uid  command             script    forever pid   id logfile                     uptime         data:    [0] _-9a /usr/local/bin/node server.js 6539    21369    /home/ari/.forever/_-9a.log 0:1:33:36.370
<moleWork>	that also looks fine
<moleWork>	looks like it's working i'd say
<moleWork>	unless you expected to restart 3 pids
<moleWork>	then maybe not
<ari-rootpcs>	Hmmm, bit iof a derp moment - I had to slightly alter on of the 'location / { ' in nginx - and now it's almost there - changes the header of the browser tab, but the data's not coming thru
*	ljharb has changed the topic to: Current Stable v0.12.3, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
<ljharb>	`nvm install node --reinstall-packages-from=node` time!
<moleWork>	what that a release?
<Aria>	A release of what?
<moleWork>	oh i thought it bumped version 0.12.3 or something
<moleWork>	just commenting ont he topic change
<Aria>	It did.
<Aria>	Julien Gilli sent out the announcement a bit ago on the mailing list.
<ljharb>	yes, node released 0.12.3 today
<moleWork>	v8 upgrade on a stable branch?
<moleWork>	i guess stable v8 patches
*	joepie91 awakens
<moleWork>	pretty sure everyone just hit npm all at once
<ari-rootpcs>	One more noob question - we started on 0.10.38 - should I keep things that way?  ie: how much headache will it cause the coders if change to 0.12.3 ?
<Aria>	Very little in JS land should break with 0.12
<Aria>	however the C++ API and ABI have changed.
<Aria>	Things using modern nan should be fine. however, things using old nan or manually binding V8? gonna break.
<Aria>	So: test.
<Aria>	run npm rebuild once you've got the new node, see if your app works. Binary dependencies are going to be the pain.
<ari-rootpcs>	I don't think anyone with my project is coding in C++
<ari-rootpcs>	Anyway, thanks for the advice - good to know IRC is still around... haven't used it since '95 or so - cheers!
<Aria>	Yeh. IT's not you -- it's your dependencies you have to watch out for.
<Aria>	Even things like dustjs have C++ dependencies, in things like fswatcher
<ljharb>	tjfontaine: who should i direct this breaking change in 0.12.3 to? https://twitter.com/ljharb/status/598917863433342976
*	robertmaxrees is now known as robertLunch
<ljharb>	i filed https://github.com/joyent/node/issues/25324 too
<Aria>	Whoa. Crap.
<tjfontaine>	ljharb: your issue is correct though I suspect that's from the lateral v8 upgrade (in so far as fixing something that went wrong with the 0.12.0 release)
<ljharb>	it's totally part of v8
<ljharb>	i'm not even recommending what to do, since i don't know :-) but it seems like something that should be addressed somehow
<joepie91>	hold on
<tjfontaine>	I don't think it can really
<joepie91>	[1,2, 3].values() is gone?
<tjfontaine>	well we can put something there
<ljharb>	iojs v2.0.0 also doesn't have [].values
<joepie91>	oh wait, not a method?
<ljharb>	so it seems like v8 removed it and hasn't re-added it
<joepie91>	maybe I'm confusing it with something else
<ljharb>	joepie91: Array#values returns an iterator
<ljharb>	tjfontaine: at least addressed with an announcement, even if nothing else can change
<Aria>	Sure enough, it's gone.
<bradleymeck>	ljharb: wasn't that renamed?
<aumberg>	hello
<foofin>	Hello!
<aumberg>	 I have question about sending http in Node: I used 'Request' library from NPM, and had problem with memory leaks on it. Now, i try debug and compare this library with standard module HTTP. I don't understand why in this code http://pastebin.com/CKkVBaxe message "Ok" was showing only five times.
<rashkov>	aumberg: it keeps printing on my system. does not stop after 5.
<aumberg>	thanks
<Aria>	5 sounds like you hit the agent limit
<joepie91>	ljharb: ah, I see
<Aria>	Have to complete some requests before others will continue
<Aria>	Node 0.12 changes the agent, so ymmv
<joepie91>	aumberg: I'd recommend looking at bhttp :)
<joepie91>	aumberg: https://www.npmjs.com/package/bhttp
<joepie91>	(disclosure: I'm the author)
<aumberg>	ok
<JoeAndrieu>	when using child_process.spawn and listening to the childs stdout, is there any way to gracefully hand that stdout to /dev/null and exit?  I have found some apps, e.g., couchdb, don't deal well when I exit and leave them without a stdout listener.
<rashkov>	yeah I'm using 0.12
<Aria>	+1 for bhttp. It's clean work.
<JoeAndrieu>	to clarify: I need to listen just long enough to know the child is running properly, then I need to exit
<aumberg>	joepie91: i will look
<joepie91>	aumberg: also, bhttp offers both a nodeback (node.js callback) interface and promises interface, but I'd recommend using the promises interface where possible, it makes for more reliable code
<joepie91>	aumberg: more about that here: https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them
<joepie91>	(the reliability comes from better error handling and code that's easier to reason about - within bhttp itself, the reliablity is the same no matter which interface you use)
*	Mango_Man is now known as nucleartide2
<ian_mac>	joepie91: one thing I prefer with request is the ability to forego the URL as the first parameter and put it in the options hash.  Also the ability to put the body in the options hash as well.
<MI6>	joyent/node: Julien Gilli master * 0df5e1c : Merge remote-tracking branch 'upstream/v0.12' (+31 more commits) - http://git.io/vUQZz
<ian_mac>	though that's probably personal preference
<joepie91>	ian_mac: you can always put the body in the options by not using the shorthand methods :)
<joepie91>	(with bhttp)
<joepie91>	not explicitly supported for the URL, but I've been thinking about this a bit
<joepie91>	mostly because of auto-generated URLs
*	harttho_ is now known as harttho
<joepie91>	still figuring out how to implement that while maintaining the "URL as first param" thing
<joepie91>	and without breaking anything
<jaawerth>	eh all that param stuff...
<jaawerth>	if you keep the base API simple, you can accomplish that trivially with a wrapper function
<ian_mac>	joepie91: you can, but then you can't seemingly just give it an object and set encodeJSON to true.  (Though maybe you can and I just wasnt clear form the docs)
<joepie91>	ian_mac: hm. can you give an example? the shorthand methods are a very thin abstraction, so if not using them breaks functionality, that's a bug :)
<ian_mac>	well with request, for example, I can do: request({method: 'POST', body: {foo: 'bar'}, json: true, url: 'http://blah.com/'}).  How do I express that using bhttp?
<jaawerth>	like if you were using a fetch-based API, you could do var myFetch = function(url, options) { if (arguments.length === 1) { url = options.url; }; return fetch(url, options); }
<jaawerth>	dumbed down example but
<jaawerth>	it's really easy to just intercept the arguments when they're simple
<joepie91>	ian_mac: bhttp.request("http://blah.com/", {method: "POST", formFields: {foo: "bar:}, encodeJSON: true})
<joepie91>	ian_mac: or bhttp.post("http://blah.com/", {foo: "bar"}, {encodeJSON: true})
<joepie91>	the lattest is the shorthand method
<JoeAndrieu>	Is there anyone with mad skills wrt chid process pipes?
<joepie91>	ian_mac: basically, the shorthand methods try to 'detect' the kind of body you're passing in
<joepie91>	.request, the underlying method, lets you specify it explicitly
<joepie91>	for any case where you need/want more control over it
<joepie91>	so the magic is contained to the shorthand methods, basically
<JoeAndrieu>	I'd like to dynamically change the stdio after spawning
<jaawerth>	joepie91: you ever looked at this? it's... overkill for a number of things but the implementation is pretty cool, and it has a lot of neat use-cases for handling API stuff https://github.com/rcs/route-parser
<joepie91>	ian_mac: the goal of this is to have sane defaults (the shorthand methods) for 99% of common usecases, but still alow explicitly defining stuff with .request if you absolutely /need/ to do that because of some weird edge case that I didn't take into account
<ian_mac>	joepie91: I see.  I didn't really play with it much.  formFields wasn't obvious to me because I don't think in terms of formFields.
<joepie91>	ian_mac: right. the parameter name depends on the type of payload, because it doesn't do any automagical detection in .request :)
<joepie91>	eg. if you had a stream you wanted to pass in, you'd use inputStream
<joepie91>	the automagical detection is only in the shorthand methods, for the 99% common cases
<Aria>	https://www.npmjs.com/package/path-to-regexp too
<joepie91>	but maybe you have a thing that pretends to be a stream but isn't officially technically one, so the automagical detection would fail - that's fine, just use .request and pass it in as inputStream explicitly
<joepie91>	stuff like that
<moleWork>	joepie91, that guy yesterday that was asking about keep-alive
<moleWork>	does that work with bhttp?
<joepie91>	jaawerth: clicked, read repo description, buzzword overload :(
<joepie91>	moleWork: not sure, haven't explicitly tested it
<joepie91>	on my todo list for testing
<moleWork>	k
<moleWork>	not sure if you got my link from yesterdya
<joepie91>	any testing results are welcome :)
<joepie91>	if I didn't respond, probably not
<ljharb>	bradleymeck: no, you're thinking of contains → includes
<bradleymeck>	ah
<ljharb>	(which is ES7)
<bradleymeck>	es7 is getting strange
<bradleymeck>	! binary operator looks ugly to me
<moleWork>	joepie: it took me two hours and 1 agentkeepalive patch to get it to work
<ljharb>	how so
<moleWork>	https://github.com/request/request/issues/1324#issuecomment-70951786
<jaawerth>	these are a million of these things https://www.npmjs.com/package/director
*	sand420 is now known as Saloun
<moleWork>	but it makes a huge huge differnce on https requests
<moleWork>	i was trying to figure out why i was losing 10-20ms per outgoing request
<joepie91>	jaawerth: hm, my problem with "route generation" is that so far, I've always seen it result in absolute statekeeping spaghetti
<ian_mac>	joepie91: sure.  I'm generally sending a JSON object.  I guess formFields is the best choice to pass that in.  It was just non-obvious.
<moleWork>	and finally realized it's because it wasn't keeping https connections alive for long enough
<joepie91>	jaawerth: having to pass around explicit route objects everywhere just to be able to generate routes
<bradleymeck>	ljharb: the composable fns vs fn decorators
<moleWork>	https connections a really really heavy to setup
<bradleymeck>	anything involving the word cancellation
<joepie91>	jaawerth: and the moment you're using a "registry" for it, you may as well be writing your routes manually
<ljharb>	decorators are just sugar for a wrapper around a function
<jaawerth>	joepie91: I find people tend not to use a light enough touch with it
<bradleymeck>	ljharb: im ok with that, but composable fns might merge w/ it and things get confusing
<ljharb>	well, a wrapper around the Object.defineProperty that normally occurs
<ljharb>	bradleymeck: link for composable functions proposal?
<ljharb>	i haven't heard about that one.
<joepie91>	moleWork: aha. so there's a specific agent for keep-alive stuff?
<bradleymeck>	I would love if async/await goes away and we just use decorators + generators
<jaawerth>	I don't necessarily mean amount of code, but flexibility
<bradleymeck>	ljharb: https://github.com/jhusain/compositional-functions
<joepie91>	moleWork: I will bookmark that and have a play with it later, thanks :)
<jaawerth>	a lot of these route generator deals force you into their own patterns
<jaawerth>	and then you have to add a million manual exceptions
<moleWork>	joepie91, i guess, i had to enable it cause like i said https takes foreverrrr to connect
<jaawerth>	because... APIs don't uniformly follow REST
<moleWork>	it was really noticable
<moleWork>	maybe it's not true any more with node 0.12
<moleWork>	i dunno
<joepie91>	moleWork: strange. might want to pick a less computationally intensive cipher?
<joepie91>	moleWork: ref https://istlsfastyet.com/
<bradleymeck>	ljharb: a lot of effor seems to be going on to make promises easier to use, but a lot of arguments about them being the only form of composable units of work makes me a little wary of anyone who says that
<moleWork>	umm: joepie: i'm not sure about that... it wasn't to my own service but to external services
<moleWork>	like orchestrate.io and keen.io
<jaawerth>	what effort is going on to make promises easier to use?
<joepie91>	moleWork: yeah, but it's not just about server config, your client config matters also
<jaawerth>	I feel like promises have pretty much stabilized at this poinit, barring extra convenience method sugar on some implementations
<joepie91>	moleWork: it's cipher /negotiation/ for a reason :)
<moleWork>	makes sense
<joepie91>	moleWork: also stuff like compression is client-initiated iirc
<moleWork>	regardless, open and closing a connection for every request is pretty insane
<moleWork>	(if you know you are gonna make multiple)
<jaawerth>	I feel like I just recently used keepalive with 0 problems but I wasn't using ssl
<joepie91>	jaawerth: anyway, re: that router, I'm not convinced off the bat that it solves any real-world problems I have
<moleWork>	could be, this was version 0.10 of node that i was testing on
<Aria>	SSL Ruins Everything Around Me.
<joepie91>	jaawerth: and I'm very wary of using anything that doesn't have a clear benefit :)
<moleWork>	SSL Can ruin everything around me.
<moleWork>	SCREAM
<Aria>	Haha.
<jaawerth>	joepie91: honestly I mostly thought the code was interesting, gave me ideas for my own approach. wasn't reocmmending using it directly, but IMO it's worth a read
<joepie91>	jaawerth: might read it later, when/if I ever run out of shit to do ;)
<joepie91>	my todo list seems to be growing infinitely, so.. :(
<jaawerth>	hey, I'm cool either way
<moleWork>	todo: golf
<moleWork>	:D
<bradleymeck>	ljharb: basically I want a lot of the things that don't use promises and the ones that use promises scare the f out of me, seem to often say "well don't do that" as the argument for cancellation problems / resource lifecycle problems
<ljharb>	ah right, you also want destructors tho :-p
<joepie91>	jaawerth: at this point, I'm basically just trying to get my income sorted, so that I can stop worrying about how I'm going to pay the bill that is due in 7 days :)
<joepie91>	and actually get some work done
<bradleymeck>	ljharb: not destructors exactly
<bradleymeck>	i just want eventual cleanup notifications
<jaawerth>	I don't understand the cancellation problem thing at all
<jaawerth>	you just reject the promise with a custom cancel-related reason
<bradleymeck>	jaawerth: what if it is not an error, just the consumer doesn't need/care about the result anymore?
<moleWork>	then ignore the error
<jaawerth>	who said Promise.reject needs to contain an error?
<bradleymeck>	and make sure that anything you chain to will ignore that error too?
<bradleymeck>	*anything*?
<jaawerth>	you can write your own cancelation object, you just need to make sure you'rue consistent so you can easily have handlers for it
<moleWork>	the key to promises is to just never use them
<jaawerth>	rejection !== error
<bradleymeck>	the .finally thing is slightly separate but very important as well
<bradleymeck>	jaawerth: i would agree if it did not map 1-1 with catch when promise executor is being invoked / async/await used them for that
<jaawerth>	I don't understand the second hahlf of that sentence
<jaawerth>	all you gotta do is write a handler and make sure when you catch errors in your downstream promises that you put the wrapper in there first (you can make it composable - basically an interceptor)
<bradleymeck>	jaawerth: new Promise(()=>{throw 'is error'}) will cause a rejection, async function () { await Promise.reject('throws'); }
<bradleymeck>	jaawerth: thats conflating lack of interest with unexpected situations
<jaawerth>	well yeah, you gotta catch a promise before you send it into async/await land if you don't want to use a try/catch
<bradleymeck>	it *can* be done that way, but all consumers would have to agree upon it
<bradleymeck>	and that is error prone
<bradleymeck>	much nicer for it to just fire the .finally and never resolve/reject
<jaawerth>	keep in mind that promises also aren't really meant to be about flow control
<jaawerth>	they represent a future value
<bradleymeck>	jaawerth: i agree and i don't really use them for such, but their uses in JS have made them flow control from all the code I have had to integrate w/
<jaawerth>	it gets complex and error prone because it's easy to fall into using them for flow control
<bradleymeck>	they do represent a try{}catch{} unlike other Futures
<jaawerth>	I like them for values, and for "thunking" a continuous process
<jaawerth>	and yeah, the try/catch aspect (much nicer than actual try/catch)
<bradleymeck>	uggg no
<bradleymeck>	swallowing errors ugg
<jaawerth>	only if you do it wrong :P
<bradleymeck>	don't use them for try catch
<bradleymeck>	if I could rip .catch out of promises I would
<jaawerth>	well obviously I don't unless it's an async thing
<Aria>	Really? What would you do instead, bradleymeck ?
<bradleymeck>	though I would also make them lazy so we would never want cancellation
<jaawerth>	there are other things for that
<Aria>	(does laziness help in the timeout case?)
<bradleymeck>	Aria: use Either style, which is just an if/else
<jaawerth>	you want cancellation, you can use an iterator or an observable or a stream
<Aria>	In each step?
<bradleymeck>	Aria: yes and no, you would still want to setup a timeout when you request it and race
<jaawerth>	all of which are enhanced when used in tandem with promises and vice versa
<bradleymeck>	just how things kick off is different
<Aria>	Mmm. But then you still have this pending event blocking FDs and consuming resources.
<Aria>	You do want at least IO cancelation.
<bradleymeck>	Aria: ideally yes, but it is less of a concern than it is right now.
<Aria>	Oh?
<bradleymeck>	jaawerth: kinda, promises are painful as the return value of async functions / result of streams
<bradleymeck>	Aria: right now it will try to grab the fds at start time, prior to any request for the data of a fd
<jaawerth>	you can unwrap a promise into a stream and get a promise back out
<jaawerth>	I've done it both manually and with, say, highland
<bradleymeck>	if you do everything lazy it would avoid opening the fd unless explicitly asked or data is requested
<jaawerth>	it's handy - if a stream is a pipe, promises are the valves
<Aria>	Right. But these are not instant operations.
<bradleymeck>	so opening things might not even consume fds until data is requested
<Aria>	Right. It's the window from request to timeout that's fine. But after the timeout?
<bradleymeck>	jaawerth: and if you consume more values than are ever produced? timeout race?
<Aria>	Leave socket dangling until timeout 30m later?
<jaawerth>	bradleymeck: hmmm I'm not sure we're talking about/picturing the same scenarios
<moleWork>	the only time promises should be used is when you are promising to show up at a tee time
<bradleymeck>	or if you are trying to consume values but you have a timeout that decides they are no longer needed? you want cancellation, but the .catch method makes it look like the values are errors, when they really are just never coming in
<jaawerth>	you can handle that with a custom handler, and if you aren't trying to use promises for all of your flow control you don't have to worry about using that handler everywhere
<bradleymeck>	jaawerth: indeed, I just am adamantly against mixing rejection and abandonment
<bradleymeck>	i doubt we will see this eye to eye, I just see .catch as being error prone to overload
<jaawerth>	it's really a non-issue if you aren't prechaining them like crazy
<jaawerth>	lately I've been playing with promises-->streams/observables/csp channels, and then sometimes to promises again
<bradleymeck>	i just can't guarantee that
<moleWork>	are promises even smart to use for flow control? don't they wrap everything in try catch and then v8 can't optimize it cause of the catch?
<bradleymeck>	moleWork: generally no
<jaawerth>	that's my point
<jaawerth>	they can be a building block in a flow control scheme but they shouldn't be responsible for all of your flow control
<jaawerth>	they have a limited scope
<bradleymeck>	i like my guarantees
<moleWork>	avoid promises at all costs and just use callbacks
<jaawerth>	yeah see that's crazytalk
<moleWork>	lol
<jaawerth>	node-style callbacks also don't really have a cancellation state
<bradleymeck>	don't just use callbacks, use promises, generators, and callbacks
<jaawerth>	you've got function(err, res) { }
<jaawerth>	err and res
<jaawerth>	;-)
<bradleymeck>	jaawerth: they aren't all eventual values
<bradleymeck>	they are notifiers
<Aria>	Indeed. most cancelable IO is things like a stream with a reference you can call destroy on
<jaawerth>	bradleymeck: my point is, so are promises if you want them to be
<bradleymeck>	nooooo
<jaawerth>	if you don't want to use a rejection to cancel, you can resolve it with a signal token
<jaawerth>	but just like callbacks, you're limited to err and res
<jaawerth>	it's the same thing, with a few different behaviors
<bradleymeck>	they cache values, force a micro task queue, introduce datum rather than invoke events
<moleWork>	callbacks aren't limited to resolving 1 value though
<bradleymeck>	people think too much about what they *can* not about what they *should*
<bradleymeck>	moleWork: that too^
<jaawerth>	I mean, you can have a promise resolve to a stream. or an eventemitter
<bradleymeck>	promises as notifiers have 0 benifit over just a callback
<moleWork>	i uses promises in testing
<moleWork>	but never in production code
<jaawerth>	I'm arguing the inverse - callbacks have 0 benefits over promises - you can do all the same stuff, only you've also got the chainability when you need it
<jaawerth>	they're first class objects
<moleWork>	chainability is the only nice thing about them, everything else seems inherantly wrong
<bradleymeck>	jaawerth: lets start with firing multiple times
<jaawerth>	then you either return multiple promises or a single one that yields a stream or an emitter
<moleWork>	but i'm not smart, that's just my gut feeling about them
<bradleymeck>	then move to lower memory pressure/cpu, then to don't require async task queue, then to don't swallow thrown errors
<bradleymeck>	also a lot of the time when you are watching for notifications you are not consuming them 1 by 1, you want to fire a function when it occurs, why iterate when notification could just repeat
<jaawerth>	I question the premise on all of those ;-)
<jaawerth>	I mean, you can yield multiple promises and put them into a stream that unwraps them and handles backpressure
<bradleymeck>	jaawerth: lets talk elem.onclick, elem.clicks().next().then(function () {alert(1)})
<jaawerth>	those don't really make sense for promises
<bradleymeck>	but callbacks give 0 benefit!
<jaawerth>	that's obtuse :P
<jaawerth>	obviously I use callbacks more than never
<bradleymeck>	jaawerth: indeed, but you said they have 0
<bradleymeck>	the point is each have good use cases
<moleWork>	lol bradnleymech is  troll of my standards i like it
<jaawerth>	yeah okay this is getting silly
<bradleymeck>	but people want one thing to rule them all
<bradleymeck>	i use promises, i use callbacks, each have good points
<jaawerth>	promises solve a lot of problems with callbacks for a number of use-cases, but no, they aren't by any means a total replacement for callbacks
<jaawerth>	but for http calls? sure
<moleWork>	the problem with adding all of this stuff to the language is that they are taking a really really simple language and adding too much complexity to it
<jaawerth>	for any "I started this thing and I want to see what happens when it's done?"
<moleWork>	without functional benefit
<bradleymeck>	jaawerth: for retrieving data from an http call sure, for sending a post and forgetting... ehhhh
<moleWork>	es6 should be cancelled and rethought out
<moleWork>	add async error handling and a better numeric data type
<moleWork>	cancel everything else
<joepie91>	jaawerth: I'd say that promises are a replacement for nodebacks, but not for callbacks
<bradleymeck>	for responding to events. probably always a bad idea to use a promise
<jaawerth>	bradleymeck: I'm just saying they have a very legitimate use-case within their domain
<joepie91>	jaawerth: well, "replacement"... abstraction
<jaawerth>	joepie91: yes, well put
<bradleymeck>	jaawerth: they do, but I will keep them to that domain
*	edoardo is now known as Guest37164
<jaawerth>	nodebacks, I forgot about taht term
<jaawerth>	that clarifies it a lot
<jaawerth>	bradleymeck: then we agree :P
<joepie91>	jaawerth: tbh, I think the Node.js docs should start using that term
<joepie91>	the meaning is fairly guessable, it's not a term used for other concepts afaik
<joepie91>	and it's short
<joepie91>	seems like a good name to describe the concept
<joepie91>	(afaik they don't now)
<jaawerth>	bradleymeck: I'm also a HUGE fan of laziness
<joepie91>	might actually contribute a docs patch, hm.
<jaawerth>	bradleymeck: I have been abusing iterators and generators like crazy ltely
<jaawerth>	(also transducers)
<jaawerth>	and, yes, I have played with having a promise yield an iterator ;-)
<jaawerth>	one particular use-case where I found them to be helpful glue as part of my flow control - I had to stream a MASSIVE amount of data and transform it for use in a local database. and of course some fields depend on others
<moleWork>	is one record bigger than system memory?
<jaawerth>	this involved coordinating a bunch of requests (a survey request which contains pages, which contain questions, and a GIANT response request containing response matadata and then allll the questions being the main ones). The response data was also in an insane format that I needed to write a custom parser for
<moleWork>	if not consume whole record then write!
<jaawerth>	lol
<jaawerth>	that's slow :P
<jaawerth>	oh, and the response data was paginated
<moleWork>	charge hourly
*	bradleymeck wants to see someone write a Proxy that can deal w/ large objects w/o putting them on the heap
*	robertLunch is now known as robertmaxrees
<moleWork>	you can't.. the deserialization from buffer to the VM kills you
<jaawerth>	so I wrote a request that wrapped the base response data request
<jaawerth>	those promises went into a generator function that fed a stream of requests
<jaawerth>	it keeps making requests until it's gone through all the pages, flatmapping the values into the stream
<jaawerth>	meanwhile I'm also doing the request for survey and questions
<jaawerth>	but they have to go into the database in a certain order because of the db constraints, so I ended up using promises to make sure the questions went in before the responses (meanwhile the responses had lots of transformation to go through anyway - all lazy of course)
<jaawerth>	so - the streams were the pipes, the promises were the valves
<jaawerth>	worked great ;-)
<moleWork>	things were better when they were analog
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Thu May 14 15:46:36 2015

**** BEGIN LOGGING AT Thu May 14 15:52:32 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.3, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Thu May 14 14:05:46 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Thu May 14 15:53:45 2015

**** BEGIN LOGGING AT Thu May 14 15:58:35 2015

*	Now talking on #Node.js
*	Topic for #Node.js is: Current Stable v0.12.3, Unstable v0.11.16 | Channel Mission Statement: http://bit.ly/node-irc-mission-statement | Channel Info: http://nodeirc.info | Channel Logs: http://logs.nodejs.org/node.js/index | On codes of conduct: https://medium.com/node-js-javascript/codes-of-conduct-82ab2d88112d
*	Topic for #Node.js set by ljharb!sid43720@oftn/member/ljharb (Thu May 14 14:05:51 2015)
-ChanServ-	[#node.js] Visit the wiki page https://github.com/joyent/node/wiki
*	Channel #node.js url: http://nodejs.org/
*	Disconnected (No such device or address)
**** ENDING LOGGING AT Thu May 14 16:02:07 2015

