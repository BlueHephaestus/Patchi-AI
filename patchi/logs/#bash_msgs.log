16:15  greybot: hypfer: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
21:59  greybot: bakflash: and that one, if necessary: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
22:32 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:20  slacker^: the control sequence is ”<esc>[38;5;colornumberm”
00:28  greybot: jmadero: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
03:04  werilis: # echo $'cat 20$\ndog 30$\nhamster 40$' >file; : we will add the column "expensive/cheap" if price is more than 35$; echo $(cat file) "<-- is our initial file contents, it is a table"
03:07  werilis: # echo $'cat 20$\ndog 30$\nhamster 40$' >file; : we will add the column "expensive/cheap" if price is more than 35$;  while read -r goods price; do price=${price%?}; ((price > 35)) && new_field=expensive || new_field=cheap; echo "$goods $price$ $new_field"; done <file
03:12  werilis: # echo $'cat\ndog' >file; readarray -t table <file; : -t in readdarray is for cutting the newlines from the ends of each line;  add_if_new() { for line in "${table[@]}"; do [[ $line == "$1" ]] && return; done; table+=("$1") ;};   add_if_new dog;  add_if_new dog; add_if_new hamster; : "output the result table -->";  printf "%s\n" "${table[@]}"
03:20  ormaaj: if you need to emulate a set in bash use associative arrays. the keys give you a fast way to check membership, like the hashset<t> in .net or python's set type.
05:42 *** netsplit (*.net) <-> (*.split) quits: zz_ag4ve, walzmyn
08:17  werilis_: # echo $'0.0.0.0\n1.1.1.1\n2.2.2.2' >ip; echo $'file1\nfile2\nfile3' >files; readarray -t ips <ip; readarray -t files <files;  for ((i=0; i<${#ip}; i++)); { echo "${ips[i]} ${files[i]}";}
08:18  werilis_: # echo $'0.0.0.0\n1.1.1.1\n2.2.2.2' >ip; echo $'file1\nfile2\nfile3' >files; readarray -t ips <ip; readarray -t files <files;  for ((i=0; i<${#ips[@]}; i++)); { echo "${ips[i]} ${files[i]}";}
08:29  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
10:04  twkm: but anyway, you didn't use what i guessed you might have used: < file > file
10:24  geirha: done < svn.list > not_exist.list
10:39  werilis: # echo $'listen 200\nlisten 300' >httpd.conf;   conf=$(<httpd.conf)$'\n';   echo "${conf//listen*([ 0-9])$'\n'/listen 8080$'\n'}"
10:40  werilis: # echo $'listen 200\nlisten 300' >httpd.conf;   conf=$(<httpd.conf);   echo "${conf//listen*([^$'\n'])/listen 8080}"
15:34  greybot: smrtz|nix: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:01  david-a: smrtz|nix: i think you know that the recentest paste is not working. after "for" is has both "do ...; done" and "<13 lines of code> done"
16:53  greybot: smrtz|nix: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:07  greybot: hd|laptop: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:08  greybot: : ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
18:17 *** netsplit (*.net) <-> (*.split) quits: uqbar, chrisje, maxdamantus, neptu, k^, serban
20:26  osum: # echo hello.com >hosts; echo welcome.com >>hosts; echo $'file1\nfile2\nfile3'; while read -r host; do while read -r file; do printf "%s %s" "$host" "$file";done <files;done <hosts
20:26  osum: # echo hello.com >hosts; echo welcome.com >>hosts; echo $'file1\nfile2\nfile3' >files; while read -r host; do while read -r file; do printf "%s %s" "$host" "$file";done <files;done <hosts
20:26  osum: # echo hello.com >hosts; echo welcome.com >>hosts; echo $'file1\nfile2\nfile3' >files; while read -r host; do while read -r file; do printf "%s %s\n" "$host" "$file";done <files;done <hosts
20:38  greybot: smrtz|nix: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:38  mattcen: !<<- > smrtz|nix
21:06  greybot: histo: note this however: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
01:11 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:00  mushroomed: hi, i want to do this --> who | cut -d' ' -f6 | grep < $(tty)
06:35  pgas: # exec 3<<<foo; echo bleh > /proc/$$/fd/3;cat <&3 # you can even use this temp file this way
14:12  kolbe: right i mean the very most basic thing is just to do ''ssh 'mkdir dir && cat > dir/whatever' < whatever'', isn't it?
14:13  auvajs: hi, what's wrong with this code? while read f; do n=$((cat $f | wc -l)); a=1; while [$a -le $n]; do cat $f | head -n $a | tail -n 1 > $f_$a; a=$(($a+1)); done; done < <(ls)
14:14  greybot: auvajs: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
14:16  blind: !check while read f; do n=$((cat $f | wc -l)); a=1; while [$a -le $n]; do cat $f | head -n $a | tail -n 1 > $f_$a; a=$(($a+1)); done; done < <(ls)
14:19  dualbus: auvajs: also, do: a=1; for file in *; do  while ifs= read -r line; printf '%s\n' "$line" > "$file_$((a++))"; done < "$file";  done
14:23  mute: g,err,crit,alert"/>#<map name="all" value="warning,err,crit,alert"/>#'
14:25  xpt: yoha: 20:19 < dualbus> auvajs: also, do: a=1; for file in *; do  while ifs= read -r line; printf '%s\n' "$line" > "$file_$((a++))"; done < "$file";  done
14:48  lmat: kolbe: you said    ''ssh 'mkdir dir && cat > dir/whatever' < whatever''
14:49  kolbe: ssh 'mkdir dir && cat > dir/whatever' < whatever
15:06  dualbus: # printf '%s\n' 'abc foo' 'cde bar' 'efg abc' > file; ed -s file <<< $'g/abc/d\nw'; cat file # frenda
16:30  koala_man: # hack() { arr=(foo "bar baz"); }; export -f hack; bash -c 'hack; printf "<%s>\n" "${arr[@]}";'
16:30  shbot: koala_man: <foo>
16:30  shbot: koala_man: <bar baz>
16:33 *** netsplit (*.net) <-> (*.split) quits: marienz, zenguy_pc, steven, evilbill, edong23, purpleidea, mindfulmonk, hypfer, nemie, deltaray,  (+37 more, use /netsplit to show all of them)
16:54 *** netsplit (*.net) <-> (*.split) quits: edge226, jonmorehouse, gelignite, lmat, jimmyneutron, cadaver, scx, remote, lonix, magbo,  (+33 more, use /netsplit to show all of them)
18:41  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
19:11  yuhjn_: ./asdf myfil<tab>
19:14  alephandahalf: if not, you'll want to give the absolute path to it - /tmp/fo<tab>, etc.
21:27  twb: >grump<
21:56  mattcen: !<() > lfbittencourt
21:56  greybot: lfbittencourt: process substitution >(command ...) or <(...) is replaced by a temporary filename. writing or reading that file causes bytes to get piped to the command inside. often used in combination with file redirection: cmd1 2> >(cmd2). see http://mywiki.wooledge.org/processsubstitution http://mywiki.wooledge.org/bashfaq/024
22:00  molqr: is there a way to avoid repetition in cat a.txt <(sed -n '1!p' b.txt) <(sed -n '1!p' c.txt) ... <(sed -n '1!p' j.txt) > final.txt  .......... basically wanted to remove the first line from each of the files except the first and then concatenate them together
22:17 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
00:37  us`0gb: what if a third file overwrites <filename> then? <filename~> would then get overwritten.
00:50  soreau: # for ((i=1; i<=3; i++)); do echo -n "soreau gives mattcen $i cookie"; if ((i>1)); then echo "s"; else echo; fi; done
03:41  pgas: in standard sed  the command is really: i \ <newline> \\ ...
05:00  fr33load3r: felden: for linux a good bet is something along the lines of while read -r _ iface _; do printf '<%s>' "$iface"; done < <(ip -o -4 addr)
05:09  felden: fr33load3r: while read -r iface ;do printf '<%s>' "$iface"; done < <(ip -o -4 addr)  is not sorting them
05:10  felden: <1: lo    inet 127.0.0.1/8 scope host lo><7: vlan1501    inet 10.28.128.28/22 brd 10.28.131.255 scope global vlan1501><7: vlan1501    inet 10.28.128.29/22 brd 10.28.1
09:17  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
09:32  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
14:52  greybot: p3lim: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
16:10  osse: p3lim: run 'file <script>'
16:39 *** netsplit (*.net) <-> (*.split) quits: chaser, richardbronosky, alephandahalf, kloeri, marchal, rtr-, snacky, epopt37, elsewho, foowhr,  (+38 more, use /netsplit to show all of them)
17:18 *** netsplit (*.net) <-> (*.split) quits: zz_sidv, lillecarl, solution-x|afk, mtecknology, wozzoz, mburns, smashag, l0ggy, felixjet, amospalla,  (+12 more, use /netsplit to show all of them)
17:23  damarusama: {<start>..<end>..<incr>} (bash 4)
17:44  emg: fmt='<!--......<a href="%s"> title</a>'; find . -name '*.raw' -exec sh -c 'for f do printf "$0" "${f%.*}.html"; dont' "$fmt" {} +
17:46  emg: fmt='<!--......<a href="%s"> title</a>'; find . -name '*.raw' -exec sh -c 'for f do printf "$0\n" "${f%.*}.html"; done' "$fmt" {} +
18:50  greybot: doge_wow: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
00:04 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:31  solker: it's a syntax for this file. < id >:< runlevels >:< action >:< process > but i don't know what of id and runlevels i need
08:46 *** netsplit (*.net) <-> (*.split) quits: willis, tsunamie, ethanol, edos
10:08  osse: # printf '<%s> ' ${bleh:-'a' 'b' 'c'}
10:08  shbot: osse: <a> <b> <c>
12:13  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:47 *** netsplit (*.net) <-> (*.split) quits: uqbar, chrisje, monty, maxdamantus, kisuke, k^, serban
15:02 *** netsplit (*.net) <-> (*.split) quits: joelmo, erikj, ephemer0l, haasn, chris7mas, guest35930, nemysis, speak, tiger|2, remote_,  (+5 more, use /netsplit to show all of them)
16:18 *** netsplit (*.net) <-> (*.split) quits: pastry, mumixam, cork, zucca, richiefrich
00:32 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
06:55  geirha: which is <newline><space>
07:14  bwe: find .vee -name "*.raw" | tee >(wc -l > .count);count=$(< file);rm .count
07:37  jophish: (usually i type `...`<tab> and have it filled in
10:45  twkm: <skylite> i would like to cut the .local from the hostname
11:41  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:15  greycat: <greybot> the path variable defines where your commands are. don't do stupid things like grep=/usr/bin/grep; $grep foo bar. just use grep foo bar in the first place. if you aren't sure what your path contains, set it yourself.
16:43  greybot: dat, if you do nothing else...: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:48  greycat: please don't use `...` around a command as some sort of irc markup for <tt>...</tt>.  it is confusing as hell, since `...` is also a bash syntax.
20:57  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
21:14  riviera: !<( > meefs
21:14  greybot: meefs: process substitution: >(command ...) or <(...) is replaced by a temporary filename. writing or reading the file passes the bytes to/from the command inside. often combined with file redirection. sed 1d <(df) -> sed 1d /tmp/output-of-df. http://mywiki.wooledge.org/processsubstitution
06:51  danny_b: i have dir with files in the format <name1>.<timestamp1>, <name1>.<timestamp2>, <name2>.<timestamp3>, <name2>.<timestamp4> etc...
06:51  danny_b: i would need to delete all files of <name#> which have lower timestamp and wc -l is smaller or equal to the <name#> file with highest timestamp
07:48  zeljko__: while read -u10 dirs ; do dirname $dirs|grep -v '^\.' >> dirs.txt ; done 10< filesadd.txt
08:17  hello71: # printf '#!/bin/bash\necho $bash_source" > script; bash < script
08:17  hello71: # printf '#!/bin/bash\necho $bash_source' > script; bash < script
08:19  pgas: # cd /bin; echo '#!/bin/bash' > /bin/script; echo 'echo running script $0;[[ -f  $0 ]] && rm "$0"' >>/bin/script;chmod +x /bin/script;bash </bin/script; ls /bin/bash #oops
09:44  qwebirc83319: # zfs() { printf "<%s>" "$@";}; fs='hello spaces spaces'; zfs snapshot ${fs}@migration; zfs snapshot "$fs@migration"
09:44  shbot: qwebirc83319: <snapshot><hello><spaces><spaces@migration><snapshot><hello spaces spaces@migration>
09:45  qwebirc83319: # zfs() { printf "<%s>" "$@"; echo;}; fs='hello spaces spaces'; zfs snapshot ${fs}@migration; zfs snapshot "$fs@migration"
09:45  shbot: qwebirc83319: <snapshot><hello><spaces><spaces@migration>
09:45  shbot: qwebirc83319: <snapshot><hello spaces spaces@migration>
10:12  zeljko__: while read -u10 dirs ; do dirname $dirs|grep -v '^\.' >> dirs.txt ; done 10< filesadd.txt
10:13  zeljko__:  while read -u10 dirs ; do dirname $dirs|grep -v '^\.' >> dirs.txt ; done 10< filesadd.txt
10:13  zeljko__:  while read -u10 dirs ; do dirname $dirs >> dirs.txt ; done 10< filesadd.txt
12:34  scx: sed -re "s/ą/a';s/ć/c';s/ę/e';<etc>"
12:57 *** netsplit (*.net) <-> (*.split) quits: uqbar, chrisje, maxdamantus, k^, serban
14:17  greybot: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
18:41  dualbus: <open>"...<close>"...<open>"...<close>"   if you want to put " inside of ", then do it like: echo "foo\"bar\"bal"
18:44  greybot: dat: read this entire page. carefully: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:28 *** netsplit (*.net) <-> (*.split) quits: uqbar, chrisje, maxdamantus, k^, serban
03:36  scx: while read -r -d ''; do filelist+=( "$reply" ); done < <( cd "$dir" && find * -type f -print0 2> /dev/null | sort -z )
06:50 *** netsplit (*.net) <-> (*.split) quits: uqbar, chrisje, maxdamantus, k^, serban
10:22  blasthardcheese: puffton: i'm not sure what you mean. "general way of knowing" what? if ''wait'' does nothing, then i'm guessing the python programs are double-forking themselves. if that is the case, you can only either try fghack (see <http://mywiki.wooledge.org/processmanagement>) or patch the programs yourself. and you should yell at whoever wrote them for doing that. ''strace'', if you have it, can help you determine if the programs are ...
10:39  falconindy: [[ $month = 'june' ]] && (( day > 10 && day < 16 ))
13:57  greybot: jak2001: randomstring() { lc_ctype=c tr -dc '[:print:]' < /dev/urandom | dd bs="${1:-16}" count=1 2>/dev/null; echo; } # usage: var=$(randomstring [length])
18:11  grepidemic: does anyone know why this line doesn't return correctly? if [[ $(awk '{print $1}' <(wc -l smashup.txt 2>/dev/null)) < "8" ]]
18:19  greybot: grepidemic: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
18:20  grepidemic: [arx]: because i am trying to keep things consistent in the script. i am using <,>,==,!= throughout the script, which works in every instance except this one.
18:44  david-a: [arx], grepidemic: if you drop the end change the condition from fnr<8 to fnr>=8 (otherwise it will trigger already on line 1), and reverse the condition in the "if", the "if" at the bash level.
00:03 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:11  john[lisbeth]: and now i need to transform that number into the value of $<number> in the array of arguments
04:31  terminus-: twb: oh right. i kinda misunderstood what '-i' was for. >_<
07:00  cxz: arrhyst: in my script i have: (exec -a foo sh) & <newline> disown %1
08:41  arrhyst: aiena: bit a<space>=<space>12 will not work
09:18  arrhyst: this thing -> prompt_command ... history -a >(tee -a ~/.bash_history | egrep -v "^#[0-9]+" | logger -t "cmdhistory[$$] user=$user${sudo_user:+ sudo_user=$sudo_user} ${ssh_connection:-$(readlink /proc/$$/fd/1)}") <- isn't very different
10:59  greybot: help set <enter> http://bash-hackers.org/wiki/doku.php?id=commands:builtin:set # set -vx is useful for debugging, set +h for playing in terminal.
11:43  greybot: waqstar: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
13:24  kolbe: dino82: in that case just do the thing you were trying to do with the heredoc but with ssh somewhere 'cat > /some/file' <<eof ...
14:52  greybot: kamiru: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
16:13 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
19:47  greybot: keithlg: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:02  keithlg: (06:47:36pm) <riviera> !umq > keithlg
00:04 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:43  theor: hi. how can i remove two <param> </param> tags in one sed expression without touching the other tags?
03:44  greybot: theor: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
03:49  theor: found it. my answer was s/<.*para>//g
03:52  stummi: or a tag like <param foo="bar">
03:52  stummi: or <param />
03:53  stummi: or <param[linebreak]/>, wchich is still valid xml/html
03:56  stummi: if you xml you can't parse it with sed. if you have a very strictly defined xml-like input (its what you have when you say "it will be <foo> everytime without params, spaces or linebreaks) you may can parse it with sed, but its technically not xml anymore then
03:58  theor: it's a program output. i only get about 12 lines and just need to remove <param></param>, and leave the few other tags
04:18 *** netsplit (*.net) <-> (*.split) quits: lewoco
04:19 *** netsplit (*.net) <-> (*.split) quits: ssbr_at_work, erage_, yosafbridge, bzcat, bitmasher, bwe, jnix, redpill, rspinuz, jrib,  (+58 more, use /netsplit to show all of them)
04:20 *** netsplit (*.net) <-> (*.split) quits: faisch, ponyofdeath, lahwran, _raul, jvv, cybertinus, sirfunk, jwmann, p4tux, ivanshmakov,  (+605 more, use /netsplit to show all of them)
04:21  twb: if you *really* want to brute force it, you can do something like s%</?(foo|bar|baz)[^>]*>%%g
04:34 *** netsplit (*.net) <-> (*.split) quits: lahwran, faisch, bwe, ponyofdeath, _raul, jvv, cybertinus, sirfunk, jwmann, jxf,  (+695 more, use /netsplit to show all of them)
07:51  greybot: ryonaloli: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
08:48  greybot: aural: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
09:30  greybot: process substitution: >(command ...) or <(...) is replaced by a temporary filename. writing or reading the file passes the bytes to/from the command inside. often combined with file redirection. sed 1d <(df) -> sed 1d /tmp/output-of-df. http://mywiki.wooledge.org/processsubstitution
09:33  greybot: process substitution: >(command ...) or <(...) is replaced by a temporary filename. writing or reading the file passes the bytes to/from the command inside. often combined with file redirection. sed 1d <(df) -> sed 1d /tmp/output-of-df. http://mywiki.wooledge.org/processsubstitution
09:34  jetchisel: interesting, both <( and >(   :-)
09:35  deepu143: can any one help i need to replace the file name timestamps20140526.gz to dgcx_ts<date>.gz
09:54  felden: y=y;y=y ; echo "<$x><$y>"
10:54  greybot: bdonnahue: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
11:23  greybot: vaxxon: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:53  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:27  riviera: mute: "<codepulsar> capt_mercaptan: the\ncar and "the\scar" should be the same"
16:19 *** netsplit (*.net) <-> (*.split) quits: junkmechanic_, creaux, samf88, amospalla, _flow_, j^2, bigwax, miruoy, chrisje, mwoodson,  (+760 more, use /netsplit to show all of them)
16:24 *** netsplit (*.net) <-> (*.split) quits: oxenfrosch, olevelibom, tyrannosaurus_be, led_belly, smaug9, mhli, semeion, soreau, zoddo, masoudd,  (+38 more, use /netsplit to show all of them)
16:47  somian[wc]: previous send wrt "[14:51] <fr33load3r> !weakness > somian[wc], see #9. "
16:56  jhutchins: koala_man: hm, not working. $1 is not being initialized.  more specific, what i have is <constant string><variable string><constant string>.mkv, i want to remove that second <constant string>.
16:56  jhutchins: koala_man: ... so i end up with <constant string><variable string>.mkv
17:04  jhutchins: koala_man: what i ended up with was  rename 's/^(.*)<second constant string>.mkv/$1.mkv/' *
17:08  jhutchins: hyphenated: so i'll still want to rename <constant><variable><foo.reoack.bar>.mkv to <constant><variable>.mkv
18:38  falconindy: !<() > diphtherial
18:38  greybot: diphtherial: process substitution >(command ...) or <(...) is replaced by a temporary filename. writing or reading that file causes bytes to get piped to the command inside. often used in combination with file redirection: cmd1 2> >(cmd2). see http://mywiki.wooledge.org/processsubstitution http://mywiki.wooledge.org/bashfaq/024
19:02  greybot: zerick: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
19:51  yitz_: man bc -> expr1 < expr2 the result is 1 if expr1 is strictly less than expr2.
19:59  osse: zerick: expr1*(expr1 > expr2) + expr2*(expr1 < expr2)
20:25  twb: >derp-a-derp<
00:04  voidhouse: `wget <url> archive.zip && unzip archive.zip` is the obvious.
01:11  john[lisbeth]: so i can just go echo <absolutely anything> and it will echo that thing
01:47  john[lisbeth]: so it is | ( <command>
01:48  john[lisbeth]: sorry | ( <command> )
01:53  john[lisbeth]: and they all share the same /home/<user> folder and the same home partition
02:19 *** netsplit (*.net) <-> (*.split) quits: edos, popl, skered, textmode, bolt, dary, pasteban, sqz, alephandahalf, eroll,  (+24 more, use /netsplit to show all of them)
02:48  pgas: # echo "foo'bar" > file; cat file ; var=$(<file); echo "$var"
05:31  greybot: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
07:01  osse: bwe: if the contents of a variable represents "multiple <something>" then chances are you want word splitting
07:15 *** netsplit (*.net) <-> (*.split) quits: lewoco
08:07  svenx: piko`: i usually just  ./foo >/dev/null 2>&1 </dev/null & exit
10:40  voidhouse: so, this is what i came up with,  `/etc/resolv.conf <(awk '/hub/{ print $1}' /etc/hosts)  > /etc/resolv.conf`.
12:37  diphtherial: so, quick sanity check: if you want to use a named pipe, you first create it with mkfifo <pipename>
15:53  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
15:56  lhunath: !learn ix upload to http://ix.io from your terminal: <command> | curl -n -f 'f:1=<-' http://ix.io # or use the 'ix' client: curl http://ix.io/client -o /usr/local/bin/ix
20:10  riviera: tb01110100: cat << eof > file
22:11  mattcen: type -a <command-you-cant-find>
22:14  mattcen: start with 'grep <function-name> /etc/*ash* /etc/profile ~/.profile ~/.bashrc ~/.bash_profile'
22:39  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
00:50 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:55  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
03:36  mrtnt_: following command sends snmp get-request message for sysname to 10.10.10.1: echo -n "302902010104067075626c6963a01c02047f14ec98020100020100300e300c06082b060102010105000500" | xxd -r -p > /dev/udp/10.10.10.1/161. if i do a packet capture, i see a snmp get-response message from 10.10.10.1. however, is there a way to listen for returning snmp get-response package? i tried with named pipes and <>, but could not figure it out..
03:45  xpt: pawky: i mean this line '09:41 < pawky> date |dd if=<(cat -) :-)' with trailing emoticon
06:00  mrtnt_: pgas: no. file is associated with file descriptor 3 both for reading and writing("exec 3 <>/tmp/file") and then there is some data written to file descriptor 3 and finally i try to read this data from file descriptor 3.
06:04  pgas: # exec 3<>file; echo foo > file;cat <&3;echo closed
06:05  pgas: # exec 3<>file; echo foo >&3;cat <&3;echo closed
06:20  greybot: puffton: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
06:59  osse: # func() { echo the arguments are:; printf '<%s> '; }; func a b 'c d e' -p parameters -m mesh.xml
06:59  shbot: osse: <>
06:59  osse: # func() { echo the arguments are:; printf '<%s> ' "$@"; }; func a b 'c d e' -p parameters -m mesh.xml
06:59  shbot: osse: <a> <b> <c d e> <-p> <parameters> <-m> <mesh.xml>
09:25  venmx: what is the best way to do two conditionals for... if getent passwd <uid> >/dev/null -a getent group <gid> >/dev/null; then << do i need brackets for these?
10:07  mrtnt_: pgas: fyi i finally checked the byte stream with "read -n 1 -t 2 <&3" command. in case of success, the exit code is 0 and in case of there is no data(i.e. no udp packets were received as a response) in file, the read will exit after 2 seconds with exit code >0.
11:01  venmx: i'm getting spaces and other characters in my find results that i need to insert escape characters before i can do other things with it. but it doesn't work for me... for i in $(find <options>); do name=$(echo $i | sed "s/[\ |\\\$]/\\\&/g"); <command> $name; done
13:47  maniacal: ok, so it seems the for loop is just taking it's values from the arguments being passed in.  so i guess that's just a behavior of 'for' i didn't know about.  i'm used to    for h in <something>.  in this case it seems if the 'in <something>' is left off it will read in the arguments being passed to the function
14:08 *** netsplit (*.net) <-> (*.split) quits: lsv, haz1, scx, skaag, horse, smashag, t-bex, olevelibom, speeder, jonedney,  (+83 more, use /netsplit to show all of them)
14:08 *** netsplit (*.net) <-> (*.split) quits: weirdenthusiast, dan64, encryptedcurse, moogumbo, lore, maedox, tom^, ggherdov, richardbronosky, cwillu,  (+77 more, use /netsplit to show all of them)
14:14 *** netsplit (*.net) <-> (*.split) quits: weirdenthusiast, dan64, encryptedcurse, asvx, talanor, t-bex, moogumbo, lore, sgtmurder, mweckbecker,  (+165 more, use /netsplit to show all of them)
14:42  greybot: # h=$(date +%h) h=${h#0}; if ((h<=4 || h>=22)); then tod=night; elif ((h>=17)); then tod=evening; elif ((h>=12)); then tod=afternoon; else tod=morning; fi; echo "good $tod, #bash!"
15:31  mark06:  $ foo="name        <email@foo.com>"; echo "${foo%%[[:space:]]+[![:space:]]+@[![:space:]]+}"
15:31  mark06:  # foo="name        <email@foo.com>"; echo "${foo%%[[:space:]]+[![:space:]]+@[![:space:]]+}"
15:31  mark06: # foo="name        <email@foo.com>"; echo "${foo%%[[:space:]]+[![:space:]]+@[![:space:]]+}"
15:31  shbot: mark06: name        <email@foo.com>
15:34  blind: why not just: foo="full name        <email@foo.com>" ; echo "${foo% *}"
15:40  blind: # foo="full name        <email@foo.com>";echo "${foo%%[[:space:]]*[![:space:]]} test"
16:30  falconindy: # a=(foo bar baz); s=$(ifs=/; echo "${a[*]}"); printf '<%s>\n' "$s"
16:30  shbot: falconindy: <foo/bar/baz>
18:39  greybot: arilee: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
19:26 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
20:33  greybot: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:33  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
21:12  mattcen: 11:10:31 < mattcen> rneese: so, is /usr/bin *always* the directory you're searching in?
21:34  hyphenated: < not >
23:19  greybot: rneese: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
23:54  mattcen: 13:37:02 < ryonaloli> cron runs the local script
00:49  mattcen: 14:48:22 < fr33load3r> semor: read the faq - if you still have questions ask
01:03 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:15  mrtnt: stummi: for example if i execute "time exec 3<>/dev/tcp/10.10.10.1/80" and 10.10.10.1 is not reachable, then on my system the timeout(tcp three-way handshake fails) is 75 seconds.
04:27  mrtnt: pgas: by running "subshell and kill it after some time" you meant something like this: ( exec 3<>/dev/tcp//80 & pid=$! ; sleep 4 ; kill "$pid" &>/dev/null )
04:28  mrtnt: *( exec 3<>/dev/tcp/10.10.10.1/80 & pid=$! ; sleep 4 ; kill "$pid" &>/dev/null )
05:46  david-a: thid: 2) non-robust xml parsing in line 22:  grep "<$tag>" file | cut <hoping_to_remove_start_tag> | sed "<hope_to_remove_end_tag>"
05:47  greybot: thid: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
09:42  lhunath: printarray() { local array="$1[@]" element; for element in "${!array}"; do echo "<$element>"; done; }
11:52  greycat: 11:41  greycat> list=''; while read -r line; do list+="'$line',"; done < inputfile; echo "${list%,}"
13:39  greybot: process substitution: >(command ...) or <(...) is replaced by a temporary filename. writing or reading the file passes the bytes to/from the command inside. often combined with file redirection. sed 1d <(df) -> sed 1d /tmp/output-of-df. http://mywiki.wooledge.org/processsubstitution
13:45  greycat: !learn <( process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
14:29  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
16:56  electricguy: greycat, i read about printf, and poked around a bit, <noob> but i can't really figure out how to cobble it all together </noob>
19:30  greybot: doublehp: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
09:25  greybot: comma separated values. a text file in which each line is a "record", and fields within each record are delimited by commas. you can manipulate *simple* csv files with ''ifs=, read -a fields'' for anything else use a parser (such as python's csv module: <http://docs.python.org/library/csv.html> or the 'csvtool' or 'csvkit' command utility)
09:57  sam_543381: do /nick <name>
13:45  aiena: #--------<begin>----------
13:45  aiena: <2 space indentation>some_long_command \
13:45  aiena: <2 space indentation>continuation_of_long_command
13:45  aiena: #--------<end>------------
13:57  aiena: <fr33load3r> thanks
15:49  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
18:22  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
22:44  greybot: bwayne: "double quote" _every_ expansion, and anything that could contain a special character, eg. "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal, eg. 'costs $5 usd'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:49  lhunath: !learn quotewhen "double quote" _every_ expansion: "$var", "$@", "${array[@]}", "$(command)".  use 'single quotes' to make something literal: 'costs $5 us'.  always single-quote literal code: ssh "$host" 'echo $home'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
04:22  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
16:03  greybot: multihunter: "double quote" _every_ expansion: "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal: 'costs $5 us'. always single-quote literal code: ssh "$host" 'echo $home'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:02  greybot: perhaps this will help, mkdmz: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
21:38 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
22:20  greybot: for line 86 - carlesma: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
03:40  fluter: pgas, <pgas> if ! cmd1 || ! cmd2 ;then is the same
10:24  riviera: !<( > sybariten
10:24  greybot: sybariten: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
11:41  ormaaj: # ifs=$'\n\r' read -rd '' -a a <<<$'a\r\rb\n\nc'; printf '<%q> ' "${a[@]}"; echo
11:41  shbot: ormaaj: <a> <''> <b> <c>
11:52  ormaaj: $ zsh -c 'ifs+=$1 read -ra a; printf "<%q> " "${a[@]}"; echo' <<<$'a b c\r\n' _ $'\r'
11:52  ormaaj: <a> <b> <c> <''>
15:19  greybot: masoudd: help set <enter> http://bash-hackers.org/wiki/doku.php?id=commands:builtin:set # set -vx is useful for debugging, set +h for playing in terminal.
16:40 *** netsplit (*.net) <-> (*.split) quits: spry, kisuke
17:37  tj-: when i do "exec 4<>/dev/tcp/$fqdn/$port; echo -e "get / http/1.1\nhost: $fqdn\n\n" >&4; cat <&4; exec 4<&-" the http headers and content are returned. if i try to redirect into a variable with response=$(cat <&4) it only captures the content. how can i capture the header?
17:48  tj-: here's the two in series, first captures to $response, 2nd direct cat: " fqdn="tjworld.org"; port="80"; exec 4<>/dev/tcp/$fqdn/$port; echo -e "get / http/1.1\nhost: $fqdn\r\nconnection: close\r\n\r\n" >&4; response=$(cat <&4); echo $response; exec 4<&-; exec 4<>/dev/tcp/$fqdn/$port; echo -e "get / http/1.1\nhost: $fqdn\r\nconnection: close\r\n\r\n" >&4; cat <&4; exec 4<&- "
17:50  koala_man: !check fqdn="tjworld.org"; port="80"; exec 4<>/dev/tcp/$fqdn/$port; echo -e "get / http/1.1\nhost: $fqdn\r\nconnection: close\r\n\r\n" >&4; response=$(cat <&4); echo $response; exec 4<&-;
17:53  falconindy: # array=(foo bar baz); declare -n indirect=array; printf '<%s>' "${n[@]}"
17:53  shbot: falconindy: <>
17:53  falconindy: # array=(foo bar baz); declare -n indirect=array; printf '<%s>' "${indirect[@]}"
17:53  shbot: falconindy: <foo><bar><baz>
18:28  majuscule: also, '[][.<>]' gives invalid collating element, but '[][<>.]' doesn't
20:31  wedgie: for x in <pattern>; do echo "$x"; done    that gets the firstpart. someone smarter than me will have to figure out the "there were no matches" part and how to get the equivilent of nullglob in sh
20:44  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
20:52  frag4: koala_man: so yeah, looks like foo=$(find foo\*); if [ -z "${foo}" ]; then echo "oh noes"; fi; for f in ${foo}; do echo "> ${f}< "; done works
21:18  greybot: markcuss: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
00:18 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:01  mat619: osse:  <log4j:event logger="lock.lockrequesthandler" timestamp="1403502968875" level="info" thread="main">
04:05  osse: also, /usr/bin/vim<tab><tab>
04:06  mat619: vim<tab><tab> gives me:    vim        vim.basic  vimdiff    vim.tiny   vimtutor
04:57  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
13:26  emg: drinkjuice: if it were a file that did sometihng like    cat << eof    and had the template you want with $hostname in it, then you could source/execute taht file   > target file
14:41 *** netsplit (*.net) <-> (*.split) quits: uqbar, pawky, maxdamantus, serban, k^
15:08  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:09  bddy: well, the position can be saved in history as #pos:<position> at the end of each command.
15:13  greybot: dagon666: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
15:44  fernandobasso: i think you have to do history | grep 'patter' and then !<num>
17:18  kolbe: theschaf: your example is not very credible. your input is "test<td>" but your sed command looks for "<\/td>", so the input should not be changed at all by sed
17:19  theschaf: yeah, i meant test</td> for input
18:37  otacon22: question: using the pipe p1 | p2  i can connect the stdout of p1 to the stdin of p2. how can i also connect the stdout of p2 to the stdin of p1 ? should i use a named pipe? (mkfifo) is there any other way? bash have so many funny symbols (like <>), why not one for this?
19:09  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
20:07  emg: # f(){ printf '<%s>' "$@";}; var="a b"; f "$var"; echo; f $var
20:07  shbot: emg: <a b>
20:07  shbot: emg: <a><b>
21:11  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
00:07 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:31  fr33load3r: for some real fun... awk '{a[i++]=$0} /cow|turkey/{found++} end{if (found>=2) for (l in a) print a[l]}' < file
01:49  * fr33load3r ammends his awk - awk '{a[i++]=$0} /cow/{cow++} /turkey/{turkey++} end{if (cow>0 && turkey>0) for (l=0; l<=i-1;) print a[l++]}' < file
02:40  fr33load3r: tommyc: last thing i will say regarding the now deceased cows/turkeys - what you were after is more likely '\<(turkey|cow)\>' (word anchors - akin to grep -w)
02:48  geirha: assuming the grep happens to treat \< and \> that way
03:57  pgas: done <test > result
04:53  maasha: this seems to do the trick: perl -e '$/ = "\n---\n"; while (<>) {chomp; print join("\n", sort split "\n", $_), "\n---\n" }'
05:30 *** netsplit (*.net) <-> (*.split) quits: uqbar, pawky_1, maxdamantus, k^, serban
10:37  osse: heh, how about:  find . -name <somename> -print
10:57  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
11:57 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
12:15  ormaaj: # <<<bar>$(</dev/fd/0); ls
12:20 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
15:20 *** netsplit (*.net) <-> (*.split) quits: uqbar, maxdamantus, k^, serban
15:56  jacob_lavoie: i am trying to bulk rename 5000+ files with their modify date using stat but i am having issues with stat being too descriptive eg: 2010-10-09 16:37:52.000000000 -0700 vs 2010-10-09(replace space here with "-") 16:37:52.nef the current command i am using is <code>for i in *.nef; do mv "$i" "`stat -c %y $i`"; done</code>
16:59  greybot: "double quote" _every_ expansion: "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal: 'costs $5 us'. always single-quote literal code: ssh "$host" 'echo $home'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:00  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
21:31 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has quit (quit: <quiting>)
23:34  greybot: "double quote" _every_ expansion: "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal: 'costs $5 us'. always single-quote literal code: ssh "$host" 'echo $home'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
23:42  ac_slater: hey all, is it possible to just extend $path for the duration of a function without `_p=$path; path=$path:<more>; <stuff>; path=$_p` ?
23:46  lhunath: path+=:<more> func
23:50  lhunath: yes, since path+=:<more> <stuff> works just fine.
00:01 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:06  ac_slater: hey guys silly request. i want to loop over variables and print their names ... `for i $var1 $var2 $var3; do <??>; done`
03:27  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
10:13  osse: grayghost: tr -d [:alpha:] < /tmp/original.txt | tr -d [:punct:] | tr -d ' ' | cut -c 2- > /tmp/result.txt
10:14  osse: something like:  tr -d '[:alpha:][:punct:] ' < /tmp/original.txt | cut -c 2- > /tmp/result.txt
12:03 *** bocephus (~lukethedr@gateway/tor-sasl/lukethedrifter) has left #bash ("<parting>")
13:03  greybot: zsero: "double quote" _every_ expansion: "$var", "$@", "${array[@]}", "$(command)". use 'single quotes' to make something literal: 'costs $5 us'. always single-quote literal code: ssh "$host" 'echo $home'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:09  lhunath: !learn quotewhen "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:40  greybot: brontosaurusrex: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:45  neoncortex: !learn test  use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:46 *** netsplit (*.net) <-> (*.split) quits: guruce, encryptedcurse, olspookishmagus, talanor, shani, sjr, biergaizi_, daithif, moogumbo, rustymyers,  (+203 more, use /netsplit to show all of them)
14:48 *** netsplit (*.net) <-> (*.split) quits: trashlord, muh2000, chaser_, quuxman, cyclohexane, otcain, rickz, jasonwryan, clakes_, ksk,  (+30 more, use /netsplit to show all of them)
14:57 *** netsplit (*.net) <-> (*.split) quits: nemysis, horse, kastang, skylite, ufd, deuti, jgeboski, axisys, lyang0, aarwine,  (+71 more, use /netsplit to show all of them)
18:51  greybot: cheater: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
19:53  riviera: cheater: doesn't seem as important as i thought, though (\<newline> would be removed and \\ become \)
21:37  greybot: parker__: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:05  twb: 2008-11-24: <twb> i *used* to code perl - but i stopped. it's like being an alcoholic.  <pete> so are you always tempted to do a bit more?  <twb> one line of perl would be one line too many.
23:54 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
09:42  bddy: hello. suppose i ssh to a box and then do in bash: sleep 500. then i do kill -9 <bash pid>.  and ... sleep 500 also gets terminated. who is killing sleep in this case? i thought that when a modem hangups, only bash process receives sighup and then propagates it further.
09:45  greybot: newbie999: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
10:50  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:16  lmat: ssh <ip> "bash -c \"export hey=this; echo \$hey \"";  doesn't echo anything.
12:16  lmat: on the other hand,   ssh <ip> "bash -c \"echo \$shell\""; expands to the remote variable correctly.
12:22  lmat: lhunath: ssh <ip> "bash -c 'export hey=this; echo $hostname $hey'" ; is what you're talking about?
12:23  lmat: lhunath: ssh <ip> 'bash -c \'export hey=this; echo $hostname $hey\''  ?
12:26  lhunath: ssh <ip> 'bash -c '\''export hey=this; echo $hostname $hey'\'
12:26  lhunath: eg. ssh <ip> 'bash -s' <<< 'export hey=this; echo $hostname $hey'
12:27  lhunath: as for your original command: ssh <ip> "bash -c \"export hey=this; echo \\\$hey \""
12:33 *** netsplit (*.net) <-> (*.split) quits: uqbar, maxdamantus, k^, serban
12:57  greybot: nirgali42: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:47  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
14:03  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:07  greybot: john_doe_jr: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
14:07  greybot: john_doe_jr: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:05  emg: stephen87: then   arg1=$1 arg2=$2; shift 2; printf '<%s>' "$@"
15:09  sjohnson: </advice>
16:52 *** netsplit (*.net) <-> (*.split) quits: colond, erikj, haz, zz_lordtolstoi, m60-pup, stylishtassets, majuscule, spec, ne0h|nihilist, rylee,  (+9 more, use /netsplit to show all of them)
16:58 *** netsplit (*.net) <-> (*.split) quits: haz, ne0h|nihilist, ebirn, stylishtassets, erikj
17:31 *** netsplit (*.net) <-> (*.split) quits: knownasilya, nemysis, lore, teeteewhy, zsw, rawplaye1, val1s1, _val__, rakm, fsync,  (+73 more, use /netsplit to show all of them)
18:35  fr33loader: gc11: grep -v 'string' < file > file.tmp && mv file.tmp file
22:12  bender|: echo {0<dotdot>255}.{0<dotdot>255}.{0<dotdot>255}.{0<dotdot>255}
22:18  hello71: 22:13:05 < bender|> will crash the entire system by calling malloc()
22:18  hello71: 22:13:12 < bender|> an infinite number of times
23:31  aural: why does this # echo "h \ \n i" > f;while read "line";do echo "$line";done < f
01:43  fr33load3r: # read -ra arr <<< "one two three"; printf '<%s>' "${arr[@]}"
01:43  shbot: fr33load3r: <one><two><three>
01:51  jackarius86:  <li><strong>password: spa5urep</strong></li>
01:53  greybot: jackarius86: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
01:53  dualbus: # echo ' <li><strong>password: spa5urep</strong></li>' | sed  -e 's/[^:]* //' -e '</strong></li>$'
01:53  dualbus: # echo ' <li><strong>password: spa5urep</strong></li>' | sed  -e 's/[^:]* //' -e 's/<\/strong><\/li>$//'
01:54  shbot: dualbus: <li><strong>password: spa5urep
01:55  fr33load3r: # str='<li><strong>password: spa5urep</strong></li>'; str=${str#*: }; echo "${str%%<*}"
06:11  ardonik: zetaneta: command1 > file ; command2 < file?
06:17  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
08:34  jackarius86: hi, how can i manipulate "<td align=left><b><a href="/title/tt1418377/">i, frankenstein</a> (2014)</b></td>" to just "i, frankenstein" - would it be easier to use sed or could i use awk for this operationj?
08:35  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
08:35  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
16:09  greybot: xreal: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:57 *** netsplit (*.net) <-> (*.split) quits: uqbar, k^, serban
18:10  greybot: dbtid: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:34  guest89318: cant i just use [[ for testing integers though. it lets me use < = > etc.
20:37  twkm: guest89318: you can use [[ for that.  [ (aka test) allows <, = and > too.  i would probably use (( for integers.
20:37 *** netsplit (*.net) <-> (*.split) quits: chrisdunder, octane88, vt102, ascheel, zhmylove, edos, gycklarn-, screwba, diytto, iliv,  (+87 more, use /netsplit to show all of them)
02:09 *** bocephus (~lukethedr@unaffiliated/lukethedrifter) has left #bash ("<parting>")
05:45 *** netsplit (*.net) <-> (*.split) quits: otacon22, sze, textmode, wolrah, timfoo, xionaba, blaguvest, ethanol, trueneu, conall,  (+8 more, use /netsplit to show all of them)
06:09 *** netsplit (*.net) <-> (*.split) quits: erikj, wozzoz, mehdi, zz_lordtolstoi, tmfsd, chris7mas, stylishtassets, moogumbo, teeteewhy, frojoe,  (+14 more, use /netsplit to show all of them)
06:10  conall_: head -n 10 < <(java test) >/dev/null ;ps |  grep -v $$ | awk '($1 ~ /[0-9]/){ print $1 }' | xargs kill
07:46 *** netsplit (*.net) <-> (*.split) quits: tsunamie, ethanol, timfoo, edos
13:08  sysmon: for (( c = 1; c <=100; c++ )); do echo $(shuf -n 1 -i 1-45 | sort -n) ;done >/tmp/apert; tr -c '[:alnum:]' '[\n*]' < /tmp/apert | sort | uniq -c | sort -nr | head  -100
13:18  sysmon: [root@vps ~]# for (( c = 1; c <=100; c++ )); do echo $(shuf -n 1 -i 1-45 | sort -n) ;done >/tmp/apert; tr -c '[:alnum:]' '[\n*]' < /tmp/apert | sort | uniq -c | sort -nr | head  -1
13:21  sysmon: for (( c = 1; c <=100; c++ )); do echo $(shuf -n 1 -i 1-45 | sort -n) ;done >/tmp/apert; tr -c '[:alnum:]' '[\n*]' < /tmp/apert | sort | uniq -c | sort -nr | head  -100 >/tmp/l; mv /tmp/l /tmp/apert
13:41  sysmon: like: for (( c = 1; c <=5; c++ )); do echo -n $(shuf -n 1 -i 1-45 | sort -n >$c ; date >>$c ) ;done
13:49  apert: for (( c = 1; c<=5; c++)); do $(for (( c = 1; c <=100; c++ )); do echo $(shuf -n 1 -i 1-90 | sort -n) ;done >>/tmp/$c; tr -c '[:alnum:]' '[\n*]' <  /tmp/apert | sort | uniq -c | sort -nr | head  -1 ) ;done
13:51  apert: maybe for (( c = 1; c<=5; c++)); do $(for (( c = 1; c <=100; c++ )); do echo $(shuf -n 1 -i 1-90 | sort -n) ;done >>/tmp/$c; tr -c '[:alnum:]' '[\n*]' <  /tmp/$c | sort | uniq -c | sort -nr | head  -1 ) ;done
14:51  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
16:14 *** netsplit (*.net) <-> (*.split) quits: sittingshiva, tuxdev_, jl-, chris7mas, fork, pragma-, cheater
17:32  david-a: dispersed: what about starting an interactive python session? that would be about the same, would it not?  $ python <return>
18:02  greybot: bsdtux: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
01:03 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
05:11  greybot: rahul_: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
07:25  qwebirc96597: # echo question:; a=1; echo "10 numbers ->" "$a"{0..9} "<-"; echo "nothing here ->" $a{00..99} "<- is it normal? isn't it some bug? no?"
07:25  shbot: qwebirc96597: 10 numbers -> 10 11 12 13 14 15 16 17 18 19 <-
07:25  shbot: qwebirc96597: nothing here -> <- is it normal? isn't it some bug? no?
10:24  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
16:20  greybot: hcc23: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:57  hcc23: like :  names=(john pete robert); echo "${names[@]/ <magic_here>/do }"
17:48  guest46026: grep -r -i <some string> <some path>
00:06 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:11 *** netsplit (*.net) <-> (*.split) quits: xymox, scall, quebre, guruce, guest62299, kastang, lpax, monokrome, tsaavik, henry`,  (+120 more, use /netsplit to show all of them)
00:18 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, uqbar, pawky, k^, serban
03:53  osse: command >out 2>err; stdout=$(< out); stderr=$(< err); rm outerr
06:09  catkiller: stummi: would you know how to test for a pattern of *.<any number of zeroes>?
06:15  kartagis: hrm, i have a file with word1<tab>word2 in it
06:16  kartagis: i do for line in $(cat file.txt);do echo $line;done, and it gives me word1<newline>word2
07:35  brontosaurusrex: how would i get only url from this dump: <enclosure lenght="47827968" type="audio/mpeg" url="http://videoweb.rtvslo.si/archive3/2014/06/27/radioga-gammc.pr1.20140627.5.1005.mp3" />
07:38  stummi: # xmllint --xpath 'string(//*/@url)' - <<< '<enclosure lenght="47827968" type="audio/mpeg" url="http://videoweb.rtvslo.si/archive3/2014/06/27/radioga-gammc.pr1.20140627.5.1005.mp3" />'
09:23  capt_mercaptan: # foo=" i can haz spaces "; echo ">>$foo<<"; foo=${foo# *}; foo=${foo%* }; echo
09:23  shbot: capt_mercaptan: >> i can haz spaces <<
09:24  capt_mercaptan: # foo=" i can haz spaces "; echo ">>$foo<<"; foo=${foo# *}; foo=${foo%* }; echo ">>$foo<<"
09:24  shbot: capt_mercaptan: >> i can haz spaces <<
09:24  shbot: capt_mercaptan: >>i can haz spaces<<
10:07  calimeroteknik: i'll try: gzip -d < archive | gzip  -1 > archive2
12:02  greybot: to get string comparison you must escape the < in [ a \< b ] otherwise "< b" is intrepreted as a redirection from the file "b". there is no problem with [[ a < b ]]. the same applies to [ a \> b ]
12:27  tb01110100: i'm trying to write "if output of <cmd> is not equal to "00" or "30", then echo not"
15:28  falconindy: site:mywiki.wooledge.org <bash topic here>
16:26  twkm: john_doe_jr: cat < /dev/null > /dev/tcp/google.com/80
16:31  john_doe_jr: twkm: i'm trying to debug my bash scripts using a plugin called basheclipse found @ http://sourceforge.net/projects/basheclipse/files/?source=navbar  ….the debug command is: exec 33<>/dev/tcp/localhost/33333 ….but this just gives a connection refused…any ideas?
18:24  rsw: had the > facing the wrong way.  > < > <<< >< thanks, have a good day!
18:25  greybot: guest072105: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
18:28  greybot: guest072105: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:42  rsw: one more quickly, what is the proper name for the < and > characters?
18:43  dualbus: input (<) and output (>) redirections.
18:43  rsw: actually i am doing a google search for researching their use in bash, but google doesnt accept < and > as words
22:24  greybot: tohuw: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
00:15 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:43  fr33load3r: the_netz: awk '{len=length(); if (len > longest) {path=$0; longest=len;}} end{print path}' < file_with_paths
03:03  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
07:53  riviera: rivarun: hm, so the user would enter something like <http://example.com/lalala/$arch/package.zip>, with that "$arch" thing?
13:15  greycat: while ifs= read -r url; do if [[ $url = *\'* ]]; then echo "aborting because a url contains a single quote" >&2; break; fi; echo "'$url',"; done < file
13:44 *** ariadeno (~ariadeno@195-241-37-43.ip.telfort.nl) has quit (quit:  hydrairc -> http://www.hydrairc.com <- chicks dig it)
15:53  greycat: # f() { local argc argv; argv=("$@"); argc=${#argv[*]}; echo "last=<${argv[argc-1]}>"; unset 'argv[argc-1]'; printf "remainder:"; printf " <%s>" "${argv[@]}"; echo; }; f 'foo bar' baz 1
15:53  shbot: greycat: last=<1>
15:53  shbot: greycat: remainder: <foo bar> <baz>
16:27  appledash: ++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.
16:27  geirha: echo '++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.' | ./yourscript   ?
18:28  omgomg: i use editing-mode vi, so hitting <esc>v lets me edit the command in vi
18:58  greybot: ac_slater: help set <enter> http://bash-hackers.org/wiki/doku.php?id=commands:builtin:set # set -vx is useful for debugging, set +h for playing in terminal.
18:59  omgomg: [00:55:43]  < dualbus> i wouldn't bother about it :) what you gain is what, milliseconds?
01:01 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
04:43  greybot: zimmi12: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
09:03  jesse55: riviera: one stamenent, i.e. who am i | awk/sed <something>
09:09  falconindy: tee directory/*/somefile >/dev/null <somefile
09:10  anvil: <anvil> anyway... for subdir in directory/*/ ; do cp file "$subdir" ; done
10:26  anonycat: with space separation, i get "identify: unable to open image `<directory>//$.png': no such file or directory @ error/blob.c/openblob/2658."
10:28  greybot: anonycat: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:56  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:37  tophyr: ${<expression>+<something if expr exists>} right?
12:46  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
12:48  greybot: edong23: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:10  greybot: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
14:23  checoimg: i want to have date and time in the prompt ( <date/time user@laptop:~$> )
14:27  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
23:49 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:06  fr33load3r: # a1=(a b c) a2=(d e f); a3=("${a1[@]}" "${a2[@]}"); printf '<%s>' "${a3[@]}"
00:06  shbot: fr33load3r: <a><b><c><d><e><f>
01:41  peleus_: dualbus: firstly, thanks. second, can i do that after a series of piped commands though? may as well do the right thing and post the whole string - host <range of ip addresses being generated here> | grep 'domain name pointer' | cut -d" " -f 5 | host | grep ipv6.
01:42  peleus_: i tried host <range of ip addresses being generated here> | grep 'domain name pointer' | host $(cut -d" " -f 5) | grep ipv6 but it didn't seem to work
01:44  mattcen: host <ips> | cut -d\  -f5 | while read -r hostname; do host "$hostname"; done | grep ipv6
09:56  greybot: newbsduser: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:17  demifuror: haz1: just found out i can do echo -ne '\n\n' | <my command> :d thanks for your help!
15:44 *** ariadeno (~ariadeno@195-241-37-43.ip.telfort.nl) has quit (quit:  hydrairc -> http://www.hydrairc.com <- would you like to know more?)
17:54  greybot: f00bar80: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
18:02  go|dfish: # echo '<a href="#" target="_blank">' > input; cat input; sed -i 's@<a href="#" target="_blank">@<a href="http://www.cira.ca" target="_blank" rel="nofollow">@' input; cat input
18:02  shbot: go|dfish: <a href="#" target="_blank">
18:02  shbot: go|dfish: <a href="http://www.cira.ca" target="_blank" rel="nofollow">
18:05  f00bar80: go|dfish, what's need for the first part > echo '<a href="#" target="_blank">' > input; cat input;
02:21  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
10:31  pgas: looks like you should be able to use @<:@ instead of [ and @>:@ instead of ]
11:40  blind: pycoderf: array=(<newline>element1<newline>element2<newline>)
12:05  greybot: krasnayarsk: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
14:33 *** netsplit (*.net) <-> (*.split) quits: uqbar, k^, serban
14:49  david-a: hellangel: e.g. it handles redirection (< and >) before it expands variables ($var). so if there is a < or > in the variable, it will not become redirections.
19:11  david-a: threexk: there are "special chars" that the shell may act upon, e.g. $, <, >, (, ), ;, ", ', `, \
19:42 *** netsplit (*.net) <-> (*.split) quits: uqbar, k^, serban
20:22  david-a: jayjee: you can have a script in /home/jayjee/test/foo then you can start it by typing ~/test/foo <return> or cd ~/test <return> and ./foo <return>
20:49  pwhs: the first response was <twkm> replace $(/bin/ls *.access.log) with  then <twkm> as for the error.  uh, the "do a loop:" is a description, not to be put into the script. then <haz2> is actually the correct syntax
07:26 *** xrlk (~xrlk@198-91-166-148.cpe.distributel.net) has quit (quit:  hydrairc -> http://www.hydrairc.com <- in tests, 0x09 out of 0x0a l33t h4x0rz prefer it :))
10:41 *** netsplit (*.net) <-> (*.split) quits: gnubien, lillecarl, drwx, darkxploit, mtecknology, kastang, jd8, jpuff, osse, lifelike,  (+23 more, use /netsplit to show all of them)
00:14 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
06:43  aztech: "<twkm> escape them and see what happens."
06:47  twkm: [10:27] <twkm> generally speaking no escapes should be needed.
07:24  j416: mattcen: doesn't enable, say, branch name completion when i do 'git foo <tab>'
12:59  greycat: even better, echo "<$test>" or similar
14:11  greybot: lsv___: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:33  greybot: wug: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
16:04  greycat: sh# var=-1; var2=$((0-var)); echo "<$var2>"
16:04  shbot: greycat: <1>
16:38  felden: while read x;do printf "$x \n" ;ssh -n $x "bootstatus";done < server_list > results
16:57  greycat: !pf << > _cody
18:50  greybot: # h=$(date +%h) h=${h#0}; if ((h<=4 || h>=22)); then tod=night; elif ((h>=17)); then tod=evening; elif ((h>=12)); then tod=afternoon; else tod=morning; fi; echo "good $tod, #bash!"
19:48  chaser: hi, am not able to figure out a simple bash statement. test -n "${!variable_name}" && <do something>. i am aware of ! expression but don't know how !variable_name works.
19:52  greybot: chaser: fyi: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
20:34  lhunath: ???loop <number>
20:34  lhunath: loops movie playback <number> times. 0 means forever.
23:32 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
05:55  pgas: otherwise: exec 3<>/dev/tcp/host/6667 4>&3 ....
06:40  greybot: net||abuse: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
07:08  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
08:17  pgas: the manual says: the backslash retains its special meaning only when followed by one of the following characters: $, `, ", \, or <newline>.
10:23  pgas: while ifs= read -r f;do chmod xxx "$f""  || echo "$f";done >missing < list
10:23  riviera: net||abuse: assuming it's one filename per line:  tr '\n' '\0' < filelist | xargs -0 chmod 'your permissions' -- 2> errorlog
10:23  greybot: iptable: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
10:24  greybot: iptable: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
10:26  net||abuse: r '\n' '\0' < /root/chmodlist.txt | xargs -0 chmod '755' -- 2> /root/chmodlist_errorlog.txt
13:59  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:21  f00bar80: osse, the urls were written as follow  <loc>http://somedomain.com/civic-web-hosting/cochrane-web-hosting/</loc>
14:21  f00bar80: osse, how to get rid of the <loc> tag ?
14:22  greybot: foobar80: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
14:35  f00bar80: emg, can't i use cut -d to get rid of the <loc> tag ?
14:37  emg: f00bar80: if you know that every url is on a single line with the loc tags and you never have two on the same line then you can just do   sed -n 's/.*<loc>\(.*\)<\/loc>.*/\1/p'
15:55  geirha: # var=$(echo "something something /blah/blah" | tee /dev/stderr | sed 's/.* //'); echo "var contains <$var>"
15:55  shbot: geirha: var contains </blah/blah>
16:58  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:03  nf7: am i getting this syntax right? $ < input_file.txt command > output.log 2>> error.log
17:03  emg: nf7: more often you see       command < infile > outfile 2> errfile
18:47  sim590: howcome i can't chown to a specific user a mounted filesystem mounted with mount like so : `chown -r $user:$user <dir>. how should i proceed in order to mount a filesystem with owning attributed to a user ?
23:59 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:30  greybot: zero_angel: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
03:27  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
07:53  mattcen: # files=() subdir=/tmp/foobar; printf "%s\n" /tmp/foobar/file1 /tmp/foobar/file2 /tmp/foobar/subdir/file3 | while read -r file; do files+=( "<file>${file#$subdir/}</file>" ); done; printf "%s\n" "${files[@]}"
07:54  mattcen: # files=() subdir=/tmp/foobar; while read -r file; do files+=( "<file>${file#$subdir/}</file>" ); done < <(printf "%s\n" /tmp/foobar/file1 /tmp/foobar/file2 /tmp/foobar/subdir/file3 ); printf "%s\n" "${files[@]}"
07:54  shbot: mattcen: <file>file1</file>
07:54  shbot: mattcen: <file>file2</file>
07:54  shbot: mattcen: <file>subdir/file3</file>
09:48 *** netsplit (*.net) <-> (*.split) quits: edong23, scall, sven^, folivora, _bt, smashag, dw1, connyosis, monokrome, f0rced,  (+167 more, use /netsplit to show all of them)
10:52  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:00  xenakaaii: im trying to print a message to every terminal for some user on my machine. trying with: who | grep <username> | grep pts | awk -f" " '{print "echo hello > /dev/"$2}' | while read line; do $line; done but im getting "hello > /dev/pts/<number>" on my terminal instead of sending hello to other terminals like would happen with echo hello > /dev/pts/<number>
12:25  greybot: jaake: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:26  greybot: jaake: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:39  peter_occ: <blind>, thanks.
16:35 *** netsplit (*.net) <-> (*.split) quits: foobrew, markovh, s1gh
17:20 *** [1]jpeterson (~jpeterson@81-233-152-121-no83.tbcn.telia.com) has quit (quit:  hydrairc -> http://www.hydrairc.com <- would you like to know more?)
17:50  fr33loader: # true | false; sleep 1; printf '<%s>' "${pipestatus[1]}"
17:50  shbot: fr33loader: <>
22:31  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
23:34 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
04:58  greybot: zero_angel: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
06:02  geirha: # arr=( foo bar baz ); echo "<${arr[*]}>"
06:03  shbot: geirha: <foo bar baz>
07:09  kartagis: i have a line constructed as 1 2<newline>3 4 and so on, and also the line while ifs=\t read -r line;do echo $line | awk '{print $1}'; done < sab.txt. i want to process 1 and redirect the output to 2.txt. how do i do that?
07:20  kartagis: okay, while read -ra line;do linkchecker ${line[0]} > ${line[1]}-$(date +%y-%m-%d).txt; done < sab.txt works beautifully ;)
11:27  catkiller: neozonz: so let's be clear. you ssh to the box. you then type "ssh <my new destination>" and it works
11:27  catkiller: you then create a file with a "#!/bin/bash" shebang and the line: "ssh <my new destination>"
11:28  neozonz: catkiller, correct, the command however is ssh -a <dest>
13:50  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
00:36  noponpop_: i have some xml output to a file, it contains no linebreaks at all. i am attempting to select a particular table out of that xml using sed like: sed -n '/<table name\=\"vm\">/,/<\/table>/p', the problem is sed matches the whole line which is the entire xml payload
00:39  greybot: noponpop: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
00:52  go|dfish: noponpop: perl -lne 'print for /(<table name="vm">.+?<\/table>)/' file
00:53  go|dfish: noponpop: will fail if there can be a <table> inside the vm table, but may be okay for your data
02:09 *** planet_bob (~bob@fa0-0.akl-grafton-vpn2.ihug.net) has quit (quit: <azer> i'm actually in a nsa bunker.)
07:42  geirha: # printf 'one\ntwo\n' > file;  { head -n1; rev; } < file
07:42  riviera: $ seq 5000 > ormaajsucks; f < ormaajsucks; head -n 2 file1
07:47  geirha: # seq 101 > file; { head -n50 >/dev/null; head -n50 >/dev/null; cat; } < file
10:55  skilz: whats wrong with this ${execpi 300 cal |sed -e 's/\<$(date +%-d)\>/\${color tan1}&\${color}/' -e 's/^/${alignc}/'}
11:56  dreisner: # for f in {1..3}; do printf '<%02d>' "$f"; done
11:56  shbot: dreisner: <01><02><03>
12:15  greybot: username1: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
12:17  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
12:30  greycat: it's a pretty silly thing, because -u3 is just shorthand for <&3 unless you have the fd number stored in a variable (this predates bash 4's {foo}> feature)
13:42 *** netsplit (*.net) <-> (*.split) quits: wedgie, _val_, weltzooo6, zz_sidv, pppingme, edos, bolt, folivora, cyborg-one, lahwran,  (+54 more, use /netsplit to show all of them)
13:50 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, uqbar, tabakhase, kisuke, k^, serban
13:59  john_doe_jr: with the wget -m <website> command i can download all the files associated with a website….what i would like to do is see the tree directory structure of a website so i know what files to download instead of the entire website…is that possible?
14:11 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, serban, uqbar, k^
14:17 *** netsplit (*.net) <-> (*.split) quits: tsunamie
14:34 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, serban, uqbar, k^
14:43 *** netsplit (*.net) <-> (*.split) quits: tsunamie, edos
14:54  ponyofdeath: hi, how can i evaluate a bash var inside a bash script that uses cat > file << end
14:55  greybot: ask questions. don't just paste 200 lines of code on a web page and say "here my kode <url> whatz rong". describe the problem, clearly and concisely. if necessary, give the smallest sample code that demonstrates the problem.
14:56  greybot: greycat 1272394968 learn ask questions. don't just paste 200 lines of code on a web page and say "here my kode <url> whatz rong". describe the problem, clearly and concisely. if necessary, give the smallest sample code that demonstrates the problem.
14:59  greybot: zlude: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
15:00 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, serban, k^, uqbar
15:13  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:43  greybot: d0liver: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:00  hcc23: revision=$(svnversion . |  <magic that applies this regex: (\d+)(?!.*\d)' >)
17:01  hcc23: emg: well, this works too:  revision=$(svnversion . |  <magic that applies this regex: ([0-9]+)(?!.*[0-9])' >)
18:41  bwe: emg: thanks! which sed expression do i need to get "10.00" from <b class="pricelarge">eur 10,00</b> (a line of $response)?
18:47  greybot: bjrohan: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
19:05  greybot: iaaah: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
19:05  emg: !<<< > sontek
19:45  bwe: emg: i need to extend /seiten/ to seiten</li>
19:46  emg: bwe: either escape the / in the tag or use a different delimiter. e.g.:   '/seiten<\/li>/s/...//gp'  or    '\_seiten</li>_s/...//gp'
21:17  cognoscente: al203: find /your/directory -type f -size <etc>
22:48  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
04:31  fluter: just like a="  abc   ";  b=${a<magic op>} then b is stripped of a
04:32  twkm: b=${a<magic op>} b=${b<magic op>}
08:06 *** netsplit (*.net) <-> (*.split) quits: sph084, lahwran, luckman212, faisch, ponyofdeath, jvv, cristov, diytto, overrider_, hello71,  (+379 more, use /netsplit to show all of them)
09:41  mikeme: " if >&- or <&- is preceded by  {varname},  the        value of varname defines the file descriptor to close."
09:42  twkm: indeed, so it implies what &- did to the fd -- part of the description of what using {name} before the < or > does.
12:37  john_doe_jr: fr33load3r: well, i use du -hs <home dir> and it just gives me the total size
14:31  pheanex: wc -m <file> does
14:40  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
16:13  [arx]: # > mikeme; > foo; while ifs= read -rd '' 'latest[$(read -rd "" y; echo $y)]'; do :; done < <(find "${dir:-.}" -type f -printf '%p\0%ts\0'); echo ${latest[-1]}
16:43  greybot: specing: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:33  catern: not sure exactly what the name for the feature is, but i'm talking about the <() and >() fake file descriptor things
18:34  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
19:00  geirha: # { var=$(echo foo | tee >(cat >&3)); } 3>&1; echo "and the var contains <$var>"
19:00  shbot: geirha: and the var contains <foo>
22:35  dualbus: fluter: try: command >/dev/null 2>&1 </dev/null & disown  instead
03:03  ag4ve: i'd also like it to work with other users and since there's not a universal %u to do stuff like %u_<role> i need to do it here
03:21  ag4ve: it seems the regex just replaces the first match and /g doesn't seem to have any effect:   sshdata="${sshdata/<$key>/$value}" ...?
06:38 *** netsplit (*.net) <-> (*.split) quits: riviera, numinex, ddr, spry, kisuke
12:36  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
13:00  greybot: ag4ve: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
00:56 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:12  blasthardcheese: or in awk, for maximum posixness: awk 'begin{ofs=" -- "} nr==fnr{a[y++]=$0} nr!=fnr{b[z++]=$0} end{for(i=0;i<z;i++){print a[i],b[i]}}' file1 file2 > outputfile
02:52  tommyc: noregret: 23:49 < twkm> the braces do nothing useful there.
03:50  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
04:47  geirha: for i in "${!array[@]}"; do printf 'index is <%s> value is <%s>\n' "$i" "${array[$i]}"; done
05:06  aggressor: tomywork: if application in terminal a doesn't consume keyboard input, you can type something in it's terminal while it works, and after it finishes, the keyboard input will go to the terminal. so, for example, you can type  touch a-finished<enter>   and the file a-finished will be created after the end of work of your application
05:13  geirha: c; >/tmp/myfifo   ...   </tmp/myfifo; d
06:21 *** netsplit (*.net) <-> (*.split) quits: ethanol, asdofindia, edos
06:51  aggressor: sybariten: "extra content at the end of the document" means there is something after a closing tag of your root xml element (after </blah> in the end of your document).
07:05 *** netsplit (*.net) <-> (*.split) quits: edos
07:27  alephandahalf: !<<- > outerkom
07:41  aggressor: # echo -e "cat <<-eof\n\tworld\n\teof" >file; cat file
07:42  aggressor: # echo -e "cat <<-eof\n\tworld\n\teof" >file; bash file
08:27  geirha: for i in "${!array[@]}"; do printf 'index <%s>, value <%s>\n' "$i" "${array[$i]}"; done
11:52  hobodave: \"'@><=;|&("
11:58  hobodave: that's what i'd expect to see for ssh user@deal<tab>
12:27  hobodave: my format seems to be <hostname>,<ip address> <key-type> <key>
14:58  greybot: smrtz|nix: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:07  beepie: there a way to test if a variable exists? i'd like to loop "text -v vm<>" ,  i can test 1 variable by it's literal name but i'd like to use something like -> test -v var* , is this possible? :)
15:08  greybot: beepie: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:24  lhunath: twkm: would you prefer <signal.h> or is it something else that gave you a bitter taste?
17:42  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:43  greybot: gcb39: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
18:56  greybot: # for sh in {{b,d}a,k}sh; do printf '%-5s %s\n' "${sh}:" "$("$sh" -s </dev/fd/0)"; done <<<'{ echo foo >/dev/null &>/dev/fd/3 echo bar; } 3>&1'
19:03  greybot: davric: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:42 *** netsplit (*.net) <-> (*.split) quits: kriztov, yacks, wolrah_, nesthib, naw, storrgie, sblack1, woshty, galaxywatcher, wagoo,  (+56 more, use /netsplit to show all of them)
23:12 *** netsplit (*.net) <-> (*.split) quits: sph084, lahwran, luckman212, maedox, ponyofdeath, jvv, cristov, guest54578, kuiber, hello71,  (+382 more, use /netsplit to show all of them)
00:45 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:41  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
02:59  ounday: rtur: if you want to know where (almost) all the gnu manuals lay, the formula is simple: http://gnu.org/s/<name of program>/manual/
03:42  ounday: # >file1 >file2 >file3;   files=(file*);  stat() { : fake stat; echo "13967$random"; }; for id in "${!files[@]}"; do files[id]=$(stat -c %y)-${files[id]}; done;  declare -p files;  swap() { local t=${files[$1]}; files[$1]=${files[$2]} files[$2]=$t; };  len=${#files[@]};  for ((i=0; i<len; i++)); do for ((j=1; j<len; j++)); do [[ ${files[i]} > ${files[j]} ]] && swap $i $j; done; done;   declare -p files
04:40  ounday: ed file.xyz  <enter>  /1st-text    <enter>  s/1st-text/2nd-text   <enter>  wq <enter>
05:16  ounday: # echo '(($# < 1)) && { echo >&2 "not enough parameters"; exit 1;};    echo all ok, $1' >script;  chmod +x script;  ./script param1; ./script
05:56 *** netsplit (*.net) <-> (*.split) quits: sph084, lahwran, luckman212, maedox, cristov, kuiber, hello71, thorsten`, zonetti, jmad980,  (+350 more, use /netsplit to show all of them)
09:30  bbeau: consider abc="2      many spaces    3     4";   echo $abc    vs.    echo "<$abc>"
09:34  greybot: newbie999 read this: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:36  net||abuse: tr '\n' '\0' < /root/chmodlist.txt | xargs -0 chmod '755' -- 2> /root/chmodlist_errorlog.txt
11:39  greycat: # echo "this has spaces" | tr \\n \\0 | xargs -0 printf '<%s> ' chmod 755 --
11:39  shbot: greycat: <chmod> <755> <--> <this has spaces>
12:04  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
14:11  greybot: leeyaa: this is the big one: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:41  serb:  find "$place" -name '*[<>|:?"]*' | while ifs= read -r; do mv -- "$reply" "${reply//[:?\"]}"
15:42  serb: question marks and <  >
15:48  terrafirma: it's easy for me to do cat <file> | grep '^slot'
15:48  tommyc: terrafirma: quick unrelated note, you can use: grep '^slot' <file>
15:51  leeyaa: greycat:  perl -e '@files = sort { -m $a <=> -m $b } <*>; splice @files, 0, 100; system "ls", "-l", @files'
16:41  geirha: terrafirma: for file in ./*; do [[ -e $file ]] || continue; printf 'processing <%s>\n' "$file"; ex -sc '%s/\t/ /g|x' -c q "$file"; done
17:07 *** netsplit (*.net) <-> (*.split) quits: erikj, ed8, tmfsd, vinay, frag4, javajake, jab416171, teeteewhy, cybrnaut, phogg,  (+18 more, use /netsplit to show all of them)
19:31  {xmb}: mr-rich yeah try exec 2<>/dev/null
19:32  david-a: serb: the last command, to remove swear-chars (<>|:!?") from a file name, may overwrite files if there are two files named e.g. "terminator<2>" and "terminator2!"
19:35  {xmb}: mr-rich the exec 2<>&- works, the prompt is gone, echo foo >&2 doesnt return anything
23:27 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
08:52  lstlnk: autrilla: rm1() { local tail=${1#'"'}; tail=${tail#*'"',}; echo "$tail";}; val() { local pos=$1 line=$2; for ((;pos >1; pos--)); { line=$(rm1 "$line");}; line=${line#'"'}; echo "${line%%'"'*}"; };   wgetify() { while read -r line; do wget "$(val 3 "$line")" -o "$(val 4 "$line")"; done; };     wgetify <file.csv
09:51  vrkid: i didn't get the context of the second part of the sentence until now <sigh>
11:29  greybot: grimeton: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
12:31  sqz: wed 07-16 09:24:31 < joelmo> sqz did the y flag get you into trouble
12:45  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:09  greybot: urthmover: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
14:51  greybot: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
14:51  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
21:53  dualbus: if you do: while read -r file; do stat file; done < list  >/dev/null
22:02  david-a: zhuang_: the error messag you quoted "cannot stat "<filename>"" had as *filename* "tar: removing leading `/' from member names"
01:04  greybot: whitenightmare also:: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
05:21  ormaaj: oh... 3>pipe <pipe 3>&-
05:26  ormaaj: heh actually it requires 3<>pipe <pipe 3>&-
06:36  geirha: cat >> tmp << 'eof'
06:50  ormaaj: { lsof -p $bashpid; cat; } 3<>pipe </dev/fd/3 3>&- & wait
06:50  geirha: # file=anouk-sacrifice.mp3; ifs=- read -r artist title <<< "${file%.*}"; echo "artist is <$artist> and title is <$title>"
06:50  shbot: geirha: artist is <anouk> and title is <sacrifice>
10:31 *** netsplit (*.net) <-> (*.split) quits: fstd, gandaliter, saurajeetd, ed8, frag4, naresh, maxbasescu, sarodj, msx, brutal_lobster,  (+1 more, use /netsplit to show all of them)
11:02 *** netsplit (*.net) <-> (*.split) quits: linux4u, netj_, lroe, herdingcat, bal, sarodj_, markovh, uxfi, trueneu, richardbronosky,  (+6 more, use /netsplit to show all of them)
11:02 *** netsplit (*.net) <-> (*.split) quits: jaycedars, s1gh, djaykay, bolt, }ls{, quuxman_, mindlessdrone, saurajeetd, nelsnelson, jehb,  (+16 more, use /netsplit to show all of them)
11:36  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:53  jasonwoof: pgas: thank you again for your help. i hope <() and >() make my life easier in the future
12:55  blind: bewees: try just doing: ''if duplicity <your stuff here>; then success commands; fi''
13:55  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:52  anon1_: this command will always error right?: grep <html> foo
14:53  blind: anon1_: not if you quote. grep '<html>' foo
14:53  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
14:53  pgas: echo foo > html;grep <html> foo;echo $?
14:53  pgas: # echo foo > html;grep <html> foo;echo $?
18:50 *** netsplit (*.net) <-> (*.split) quits: riviera, ddr, lewoco_, spry, kisuke
18:51 *** netsplit (*.net) <-> (*.split) quits: chaser, ksk, dunts, isa56k, elliotd123, wcfields, kury, rax-, phr3ak, asdofindia,  (+48 more, use /netsplit to show all of them)
18:52 *** netsplit (*.net) <-> (*.split) quits: davric_, guruce, edk, haz2, an_ony_moose, badhorsie, monokrome, grimeton, nothing4you, zartoosh,  (+93 more, use /netsplit to show all of them)
18:54 *** netsplit (*.net) <-> (*.split) quits: pies, grossing, celelibi, timewa1ker, kartagis, bilge, helgikrs1, nemysis, chinorro, nil0x42,  (+9 more, use /netsplit to show all of them)
18:54 *** netsplit (*.net) <-> (*.split) quits: major, rascal999, hays, rawplaye1, belliash, bwe, scriptfanix, systemonkey2, yarnfive8, felden,  (+79 more, use /netsplit to show all of them)
18:55 *** netsplit (*.net) <-> (*.split) quits: rblackwe, nihildeb, knownasilya, sven^, phatypus, lore, teeteewhy, chaser__, dbrenaud, brazilian_cowboy,  (+65 more, use /netsplit to show all of them)
18:55 *** netsplit (*.net) <-> (*.split) quits: nemie, sirderpalot, codehotter, mjrosenb, joshskidmore, noclaf, shadyabhi, cybertinus, caveat-, lhunath,  (+4 more, use /netsplit to show all of them)
19:41  wilornel: hey guys! for some reason, pressing <enter> in a password prompt doesn't get the prompt to inspect the password
00:17  qwebirc61607: i mean,  $ make fo<tab>  should be a standard completion of filenames in current dir, not something fancy ubuntu thinks i must like
00:57 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:24  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
06:05  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
07:34  crusader-2004: if i do a bash -x i always get: sed 's/$ip/$shortcut/' <filename>
11:27  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:57  preyalone: i only use ./ in tty's, use explicit <program> <script> in makefiles
13:53  greybot: uealwq: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:36 *** netsplit (*.net) <-> (*.split) quits: grossing, celelibi, timewa1ker, pies, kartagis, bilge, helgikrs1, nemysis, chinorro, nil0x42,  (+9 more, use /netsplit to show all of them)
15:25  greybot: ^lestat: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:41  jbnicolai_: grep <pattern> <file> >/dev/null || echo 'no match'
15:45  jbnicolai_: no, i need a succesfull exit code when grep fails to find a match (t's for a git bisect script, where absense of a line signals success). i understand 'grep -q <pattern> <file> && exit 1 || exit 0' woudl work but i was hoping there's something nicer
15:49  greycat: # false && die; echo "rc=<$?>"
15:49  shbot: greycat: rc=<1>
15:52  jbnicolai_: was this unclear? [21:42] <jbnicolai_> is there a way to flip the error code of a command?
15:55 *** netsplit (*.net) <-> (*.split) quits: markovh, greycat, semeion, jordanm, nhayashi, vile`, kurahaupo, superstraw, scrp3l, jgeboski,  (+4 more, use /netsplit to show all of them)
15:55 *** netsplit (*.net) <-> (*.split) quits: lahwran, tommyc, bluedreams, dary, paulcapestany, thebonsai, kahen, lord4163, usrjayray, roentgen,  (+7 more, use /netsplit to show all of them)
15:57  rhalff: what does this do: prog1 <tty >tty 2>_pipe2
16:03  greycat: dhcp::bootwait:/sbin/dhcp </dev/console >/dev/console 2>&1
16:03  greycat: sqnc::wait:/sbin/rc </dev/console >/dev/console 2>&1           # system init
16:19  greybot: x>y: make fd x write to file y. x>&y: make fd x write to where fd y is writing now. if x is omitted, use 1. if y is -, close x. use < to read instead of write. exercise: exec 3>&1 >mylog; echo moo; exec 1>&3 3>&-
16:54  rhalff: so: prog1 <  some_pipe >_prog3,  some_pipe sends it's std out to std in of prog1,  std out from prog1 goes to std in of prog 3?
16:55  rhalff: prog1 < pipe1 > pipe2 it is.
16:58  greycat: would it make more sense to you if it were written this way:    < pipe1 prog1 > pipe2
17:44  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:47  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:45  lmat: diytto: run   scp <publickey> /home/<user>/.ssh/authorized_keys;  where <publickey> is the location of the public key on your apple macintosh machine and
22:45  lmat: diytto: <user> is your username (the location of your home directory) on the debian machine.
22:51  lmat: diytto:  scp ~/.ssh/id_rsa.pub  <debianip>:/home/diytto/.ssh/authorized_keys;
23:06  lmat: mac$ scp ~/.ssh/id_rsa.pub <debianip>:/home4/diytto/.ssh/authorized_keys;
23:10  lmat: mac$  sftp <debianip> <<< "put /home/diytto/localfile  /home4/diytto/remotefile"
23:14  lmat: mac$ sftp <debianip> <<< "rm /home4/diytto/remotefile"
23:18  lmat: outfile=$(mktemp -p <diroftempfile>)  (   if [[ -e <filepattern> ]]; then sftp <debianip> <<< "put localfile remotefile"; fi; ) 2>&1 > $outfile
23:19  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
23:26  diytto: outfile=$(mktemp -p /home/diytto/scripts/logs/seedup.txt )  (   if [[ -e *.example ]]; then sftp sb.diytto.com <<< "put /home/diytto/downloads/*.example  /home4/diytto/files/watch”; fi; ) 2>&1 > $outfile
01:21  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
07:22  grummund: myscript.sh [erase] [program <file.elf|file.bin|file.hex>] [reset] [run]
07:24  basiclaser: hey. i have sudo ls -r | grep <filename> which yields and confirms the file's existance, but does not include path. is there an ls argument for path?
07:27  basiclaser: what would the syntax be? find <filename> ? i cant spot the recursion argument
07:29  grummund: sudo find -name <filename> would vaguely match your ls -r example
07:32  grummund: sudo find / -iname '*<filename>*' is more general
07:54  basiclaser: ok so i want to delete every instance of <filename> across the system, wat do?
09:47  nabblet: lhunath: ssh $user@linux$n.eikon.tum.de bash <<< '{ cd ~/bacthesis && sleep $(($((180-$(($(date +%s)%180)))) + $((2*id)))) && ./som -a $alpha -b $beta -l $lambda > /dev/null 2>&1 } &'
12:42  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:00  {xmb}: add the ])<space>}
18:49  laomaiweng: anunnaki: `type <command>` is much simpler than equery -b in this case. ;)
18:49  greybot: corrosiveeye: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
18:56  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
23:13  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
23:44  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
01:04 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
04:28  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
04:47  tomywork: i tried this with "echo foo <<eof\n> $(sleep 10)\n> eof", and it indeed doesnt output "foo" before the 10 seconds are over, but i dont know if that means anything
09:15  anunnaki: err *diff --brief --side-by-side <file 1> <file 2> | /home/difout
12:55  greycat: if ((n > 10 && n < 20)); then echo "${n}th"; else case $n in *1) echo "${n}st";; *2) echo "${n}nd";; *3) echo "${n}rd";; *) echo "${n}th";; esac; fi
12:56  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:57  greycat: if (( (n%100) > 10 && (n%100) < 20)); then echo "${n}th"; else case $n in *1) echo "${n}st";; *2) echo "${n}nd";; *3) echo "${n}rd";; *) echo "${n}th";; esac; fi
15:12  {xmb}: <bucket>/<bucket>/
15:14  emg: adaptr: 2014-07-16 11:17 <geirha> i just realized it's been so long since xmb was here, that there are now regulars that haven't met him yet
15:24  {xmb}: they are about root like exploits, <no>, which is wrong
16:18  {xmb}: <empty newline>
16:30  greybot: the_sniff: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:46  greybot: spstarr: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:46  spstarr: you cant use > or < in $(( )) ?
17:47  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
17:49  noponpop: given a single line taht contains multiple: <row ref= ... /><row ref= ... />etc etc, how can i select just the first matching instance, i acn only seem to match greedily and return all instances
17:50  noponpop: like [[ $buff =~ @(\<row\ ref=\"(.+?)\/\>) ]] returns all matches
17:50  greybot: noponpop: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
17:55  noponpop: 16:52 < kolbe> !xml > noponpop
17:56  noponpop: 	row="$(echo $vm_table | perl -lne 'print for /(<row ref=.+?\/>)/')"
18:01  go|dfish: # vm_table='<row ref=one/><row ref=two/>' row=${vm_table%%/>*} row=${row#*=}; echo "$row"
18:01  noponpop: emg: sure its easy, <row ref="12345" "blah"/><row ref="6789" "bleh"/><row ref="101112" "barf"/>
18:02  emg: noponpop: and what do you mean select? you want everything inside </> in a variable? or just the ref= until the /> ? or each string in it's own array index?
18:02  noponpop: emg: for instance print <row ref="12345" "blah"/>
18:04  emg: noponpop: can you have />< anywhere _inside_ of the rows?
18:04  spstarr: if (( $foo >= 10 && $bar < 5 )); then  is now the 'new' way?
18:08  emg: str='<row ref="12345" "blah"/><row ref="6789" "bleh"/><row ref="101112" "barf"/>' str=${str#<} str=${str%/>} str=${str//\/></$'\n'}; mapfile rows <<< "$str"
18:10  noponpop: emg: can you help me understand what your last str assignemnt does? str=${str//\/></$'\n',. insert line breaks between tables?
18:11  emg: noponpop: replaces ever />< with a newline
18:17  emg:  </vent>
20:57  greybot: poseidons-minion: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
21:12  hello71: [21:03:34] < beardtree> how do i fix this? ls -art "$([[ -n $1 ]] && "${1}" || pwd)" | tail -n 1
00:27 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:50 *** chainedm (~gabriel22@78.96.237.147) has quit (quit:  hydrairc -> http://www.hydrairc.com <- in tests, 0x09 out of 0x0a l33t h4x0rz prefer it :))
03:36  geirha: cat >> file << eof
03:55  geirha: fandekasp: run_query() { local query_results timeformat='query took %r seconds'; query_results=$(time eval "$2"); printf 'query results <%s>\n' "$query_results"; }
04:37  greybot: kiryx: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
05:54 *** netsplit (*.net) <-> (*.split) quits: deleterios, danthebeastman, machete, heinrich5991, deu, gunthaa_, kcm1700, littlefool, inam, phogg,  (+39 more, use /netsplit to show all of them)
06:26  qwebirc57038: i've just deleted something using a command like that:   rm -r movie_name/ -fr <enter>.   remove! recursive! the movie name! force! and recursive! and enter!   hell, how i hated this movie
09:37  greybot: waqstar: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
12:24  greybot: process substitution >(command ...) or <(...) is replaced by a temporary filename. writing or reading that file causes bytes to get piped to the command inside. often used in combination with file redirection: cmd1 2> >(cmd2). see http://mywiki.wooledge.org/processsubstitution http://mywiki.wooledge.org/bashfaq/024
13:32  greybot: lzrdking: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:47  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
16:57  greycat: thekernel-work: in bash, ((ducheck1 >= 40 && ducheck1 < 95))
17:12  greybot: dasmog: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:23  tsaavik: fatdarrel: yeah, that looks wrong. does ls<tab> give you normal output? if not you could check your term, echo $term
18:25  tsaavik: fatdarrel: try running term=xterm <enter> then doing git<tab><tab> again
20:09  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
23:50  littlepython: i am new to linux i have aliased a big propreitory script//now i want to use an alias with a constraint something like a format arguement..  alias l condor_q -g -c "user==%s"  now l <username>  it has to run as  condor_q -g -c "user==username"
00:10  littlepython: i am new to linux i have aliased a big propreitory script//now i want to use an alias with a constraint something like a format arguement..  alias l condor_q -g -c "user==%s"  now l <username>  it has to run as  condor_q -g -c "user==username"
00:45 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
10:16  somian[wc]: my bad. the error is caused by using an argument to `install' when the -d flag is used. the manual is deceptive, it shows an ellipsis in the synopsis for that use-case. it needs to be -d {}/<install-dir-parent> ...not... -d {} <install-dir-parent>
11:28  fr33load3r: # touch b f c d a e; for file in *; do printf '<%s>' "$file"; done
11:28  shbot: fr33load3r: <a><b><c><d><e><f>
14:44  user3: how can i read a data file into a bash file, like #include <stdio> in c?
14:44  greybot: user3: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
16:34  greybot: tortib: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:04  justintevya: in a shell script i'm trying to escape many different special characters in a var.  i currently using this:   dbpass=$(echo "$dbpass" | sed -e 's/[]\/\!\}\$\&\"\;|*.^|[]/\\&/g')    i also need to escape these characters: < > ( )   i'm have a hard time adding them to my regex, can someone help?
17:10  greybot: justintevya: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:25  justintevya: escdbpass=$(echo "$dbpass" | sed -e 's/[]\/\!\}\$\&\"\;|*.^|[]/\\&/g')       in this escaping string i need to add < > ( ) '
17:29  mallu: for instance in $instance_id; do     ec2-describe-instances $instance | awk '/blockdevice/ {print $3}' i want to capture the output and run ec2-create-snapshot <output>
17:31  greybot: justintevya: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:30  greybot: jzan900: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
00:53 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
05:17  sqz: wow..just reduced many lines of bashcode to one line: /usr/bin/flock -w 0 <lockfile> <command> [args]
06:59  geirha: humbolt1: here's a test-case for you.    screen -d -m -s mytest </dev/null >/dev/null 2>&1
06:59  geirha: screen -s mytest -x screen </dev/null >/dev/null 2>&1
10:34  greybot: totalnoob_: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
11:47 *** tommy_the_dragon (~tommy_the@95.147.225.190) has quit (quit:  i love my hydrairc -> http://www.hydrairc.com <-)
12:34  lmat: # echo "one" > fone; echo "two" > ftwo;  echo $(<f*);
13:44  greycat: 4# source <(echo x=2); echo "<$x>"
13:44  shbot: greycat: <2>
21:55  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
05:16  qwebirc27343: tahvok: geirha is opening a file in ed and then passing the commands  2s/..../..../ <enter>  w <enter>   to ed
05:35  qwebirc27343: # echo -e '1.2.3.4 fake host\n127.0.0.1 localhost\n' >/etc/hosts;    ip=127.0.0.1;   server=new-domain.com;  file=/etc/hosts;  do_we_have_such_ip() { [[ $(<"$file") == *$ip* ]];};  if do_we_have_such_ip; then  sed -i "/$ip/s/\$/ $server/" "$file"; else echo "$ip $server" >>"$file"; fi;   cat /etc/hosts
05:36  qwebirc27343: # echo -e '1.2.3.4 fake host\n127.99.0.1 localhost\n' >/etc/hosts;    ip=127.0.0.1;   server=new-domain.com;  file=/etc/hosts;  do_we_have_such_ip() { [[ $(<"$file") == *$ip* ]];};  if do_we_have_such_ip; then  sed -i "/$ip/s/\$/ $server/" "$file"; else echo "$ip $server" >>"$file"; fi;   cat /etc/hosts
05:40  qwebirc27343: # echo -e '1.2.3.4 fake host\n127.99.0.1 localhost\n' >/etc/hosts;    ip=1.2.3.4;   server=new-domain.com;  file=/etc/hosts;  do_we_have_such_ip() { [[ $(<"$file") == *$ip* ]];};  if do_we_have_such_ip; then  sed -i "/$ip/s/\$/ $server/" "$file"; else echo "$ip $server" >>"$file"; fi;   cat /etc/hosts
05:51  qwebirc27343: # echo -e '1.2.3.4 x\n127.0.0.1 y\n' >/etc/hosts; ip=1.2.3.4; server=new.com; file=/etc/hosts; do_we_have_such_ip() { [[ $(<"$file") == *$ip* ]];}; edit() { mapfile -t lines <"$file"; for id in "${!lines[@]}"; do [[ ${lines[id]} == "$ip"* ]] && lines[id]="${lines[id]} $server"; done; printf "%s\n" "${lines[@]}" >"$file"; }; if do_we_have_such_ip; then  edit; else  echo "$ip $server" >>"$file"; fi;  cat /etc/hosts
06:01  qwebirc27343: # echo -e '11.2.3.4 x\n1.2.3.4 y' >/etc/hosts; ip=1.2.3.4; server=new.com; file=/etc/hosts; do_we_have_such_ip() { [[ $'\n'$(<"$file") == *$'\n'"$ip"* ]];}; edit() { mapfile -t lines <"$file"; for id in "${!lines[@]}"; do [[ ${lines[id]} == "$ip"* ]] && lines[id]="${lines[id]} $server"; done; printf "%s\n" "${lines[@]}" >"$file"; }; if do_we_have_such_ip; then  edit; else  echo "$ip $server" >>"$file"; fi;  cat /etc/hosts
06:09  qwebirc27343: # echo -e '11.2.3.4 x\n1.2.3.44 y\n1.2.3.4 z' >/etc/hosts; ip=1.2.3.4; server=new.com; file=/etc/hosts; have_ip=no; mapfile -t lines <"$file"; for id in "${!lines[@]}"; do [[ ${lines[id]} == "$ip"[!0-9]* ]] && lines[id]="${lines[id]} $server" && have_ip=yes; done; [[ $have_ip == no ]] && lines+=("$ip $server"); printf "%s\n" "${lines[@]}" >"$file";  cat /etc/hosts
13:07  koala_man: # printf '%q\n' "$;#\*><|[]{}()"
13:07  shbot: koala_man: \$\;#\\\*\>\<\|\[\]\{\}\(\)
13:09  koala_man: on my system it writes   $'$;#\\*><|[]{}\n()'
13:10  koala_man: # echo $'$;#\\*><|[]{}\n()'
13:10  shbot: koala_man: $;#\*><|[]{}
13:15  username1: like a \$\;#\\\*\>\<\|\[\]\{\}\(\), but if argument have newline, then don't see escape character \
16:11 *** netsplit (*.net) <-> (*.split) quits: neptu, ryanneufeld, kermit, virtual, xeroxer, zumbi, winstonsmith, germanstudent, beasty, galaxywatcher,  (+75 more, use /netsplit to show all of them)
03:47  mattcen: # printf '%s\n' foo bar baz quux > file.txt; while read -r line; do [[ line ~= .*ba.* ]] && echo "$line"; done < file.txt
03:48  mattcen: # printf '%s\n' foo bar baz quux > file.txt; while read -r line; do [[ $line =~ .*ba.* ]] && echo "$line"; done < file.txt
03:50  osse: # printf '%s\n' foo bar baz quux > file.txt; while read -r line; do [[ $line =~ ba ]] && echo "$line"; done < file.txt
06:44  arr0way: argh, how to get this on a new line in bash?? printf '<table style="width:300px">/n' > blah.html
07:22  geirha: # printf 'declare -p bash_source\n' > f; bash ./f; bash <./f
08:07  kugru: do_we_have_line_in_file() { local line_wanted=$1 file=$2; while ifs= read -r line; do [[ $line == "$line_wanted" ]] && return 0; done <"$file"; return 1; };   add_if_needed() { local line=$1 file=$2; if ! do_we_have_line_in_file "$line" "$file"; then printf '%s\n' "$line" >>"$file"; fi; };   add_if_needed "127.0.0.1 localhost" /etc/hosts
14:39  greybot: glitches: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
15:56  greybot: $((...)) is an arithmetic substitution. after doing the arithmetic, the whole thing is replaced by the value of the expression. see <http://mywiki.wooledge.org/arithmeticexpression>.
16:22  maurice_la_sauci: hello, can someone tell me what does mean the beginning of this line ? "nnoremap 'mh :w!<cr>:exe "!pandoc --latex-engine=lualatex…"
16:46  greycat: 2014-07-28 16:46:01.036123500 <greycat> !ifs
16:46  greycat: 2014-07-28 16:46:01.344850500 <geirha> !ifs
17:30  arr0way: printf '<td> <a href="dir/$(timestamp)">$(timestamp) </a>       how can i get printf to print the variable instead of just $(timestamp) ?
17:32  arr0way: printf '<td> <a href="dir/$(timestamp)">$(timestamp) </a>'
17:33  arr0way: printf "<td> <a href="dir/$timestamp">$timestamp </a>" ?
17:34  osse: you could also do:   printf '"<td> <a href="dir/%s">%s</a>' "$timestamp" "$timestamp"
22:11  paule: i've tried the following with no success: cat -- *${dr}* | grep "\"published" | sed -e "s/<abbr.*title=\"//" -e "s/\.000z\">.*//" -e "s/t/  /" -e "s/(.*)/date=' >> 3.txt
22:15  paule: riviera: it grabs the content of individual html files and .... through some ... really odd methodology, ends up with a fixed width file. i'm trying to grab a string, in the file that looks like this: <abbr class="published" title="2014-06-04t21:12:23.000z">jun 4, 2014, 9:12:23 pm and instead of pulling out 2014-06-04 and 21:12:23, parse that through date='tz="utc" <date>' +"%y-%m-%d %k:%m:%s"'
22:54  paule: for posterity, the solution was: cat -- *${dr}* | grep "\"published" | sed -e "s/<abbr.*title=\"\(.*\)\">.*/date --date=\'tz=\"utc\" \1\' +\"%y-%m-%d %k:%m:%s\"/" | sh  >> 3.txt
00:37  twb: so all the shitty scripts like >cough< xdg-open would probably explode
00:42  sjohnson: oh well.  i just don't find it practical in today's world.  </me>
04:58  anvil: why scripting it ? use c. #include <stdio.h>\nint main(argv, argc) { int i=0 ; for (i=0, ......) printf..blahblaha}
05:45  * balcony marks "<roarde> balkony: yes" a chosen answer
06:05  balcony: # >create_file; : <create_file && echo ok, file is here; : <not_a_file || echo file does not exist
06:35  balcony: a character that, when unquoted, separates words. a metacharacter is a blank or one of the following characters: ‘|’, ‘&’, ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’
18:46  kolbe: # v='<yes><i know><it is="html"><i="sorry>but i want to just strip all the tags</i></it></i></yes>'; printf "%s\n" "${v//<[^<]*>/}"
18:46  kolbe: # v='<yes><i know><it is="html"><i="sorry>but i want to just strip all the tags</i></it></i></yes>'; sed 's/<[^<]*>//g' <<<"$v"
18:48  osse: # v='<yes><i know><it is="html"><i="sorry>but i want to just strip all the tags</i></it></i></yes>'; printf "%s\n" "${v//<+([^>])>/}"
20:11  shevy: "foo bar<tab>"
20:11  shevy: so it should then be: "foo --<tab>" probably. does one of you happen to have an example for getting in support for -- options as well?
22:00  soreau: if i type program ~/<tab>, the result is program \~/
23:59  soreau: if i type 'program ~/<tab>', the result is 'program \~/' with bash 4.3.11. not sure when this started happening but i don't think it used to do this. however if there is something to auto-complete such as 'program ~/docu<tab>' it doesn't add in an escape backslash. what might be the cause or fix for this?
05:44 *** netsplit (*.net) <-> (*.split) quits: deb, machete, lunar_lamp, evilbill, hotwings, jayne, monty, wanders, distantstar-, quuxman,  (+55 more, use /netsplit to show all of them)
10:43  dcousens: so i'm looking to improve my productivity, and so far my ideas are:    tcpdump -i wlan0 | grep reddit | <looking for something here>
13:44 *** netsplit (*.net) <-> (*.split) quits: bkolden, distantstar-, kevinb, nitemare, occupant, luckman212, arsenik, euphoriaa, johndory, guest46158,  (+1 more, use /netsplit to show all of them)
14:11  greybot: uselessid: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:11  greybot: uselessid: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
14:16  yitz_: >.<
16:50  greycat: # printf foo > file; set -e; read foo < file; echo "foo=<$foo>"
16:50  greycat: # printf foo > file; set +e; read foo < file; echo "foo=<$foo>"
16:50  shbot: greycat: foo=<foo>
19:20  razva: <twkm> while read -p enabled\? ... ; read -p another\? && [[ $reply = [yy] ]]; do continue; done
22:13  riviera: from <https://www.destroyallsoftware.com/talks/wat>?
22:41  hello71: twb: [22:13:16] < riviera> from <https://www.destroyallsoftware.com/talks/wat>?
03:52  geirha: # set -- -b; getopts a opt; echo "look -> $opt <- look"
03:53  shbot: geirha: look -> ? <- look
04:43  mestrelion: is there any way to avoid the error message when redirecting input from a non-existing file?  i'm trying things like var=$(<somefile 2>/dev/null) but message still shows up
04:44  geirha: { var=$(<file); } 2>/dev/null
09:42  haz1: baboon`: if sudo docker top <ctid>; then echo "running"; else echo "nope!"; fi
10:38  mtecknology: awk '{print $1}' orig_file | sort | uniq -d > dupe_ids; rm -f duplicates; while read id; do grep -e "^$id\t" t >>duplicates; done <dupe_ids
10:43  _val_: awk -f'\t' '{ c[$1]++; l[$1,c[$1]]=$0 } end { for (i in c) { if (c[i] > 1) for (j = 1; j <= c[i]; j++) print l[i,j] } }' file
10:46  bowhunter: it seems that since it's a file being read in, that using sed to match >1 instances of * in the first column (read: form beginning of line up until <tab>) could do the trick
10:52  punkgeek: <osse> i dont understand
10:56  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
10:56  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
11:28  punkgeek: echo "<?php $config['datastores'][2] = '$two';"  >> /root/ds.php
11:29  greybot: ska: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
11:32  greybot: punkgeek: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:46  eeemaster2: [12:38:41] <eeemaster2> hi, i am writing a bash script and i am asking myself how i can pass a bash argument to a codeblock for sed: x=`ip link | sed -n 's/$1/{n;p;}' | cut -d' ' -f6`    -- results in an unterminated s error
12:59  osse: file_number=$(< file_number.txt); echo $((file_number+1)) > file_number.txt
13:11  cybrnaut: iow, this => echo "blah" | read myvar could be internally executed as => read myvar <<< "blah"
13:42  diphtherial: i know you can use date -d @<timestamp> to show a human-readable datetime from a unix timestamp
13:52  damarusama: i've put a flag <__painting> in the file and adding new content from there
13:52  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
14:00  cybrnaut: correction... in zsh, it would be:  echo ${$(<file.html)//this/that} > file.html
16:01  greycat: if (($1 >= 8 && $1 < 23)); then ... ; elif (($1 >= 23 && $1 < 39)); then ...
16:01  greycat: if (($1 >= 16 && $1 <= 512)); then echo "your number is $1"; fi
16:04  greycat: imadev:~$ awk -v n=15.4 'begin{exit (n>=16 && n<=512)}' ; echo $?
16:04  greycat: imadev:~$ awk -v n=18.4 'begin{exit (n>=16 && n<=512)}' ; echo $?
19:37  kurahaupo: tiger7117: use «exec 3<>/dev/ttyusb3» at the top of your script, and use >&3 on each line, except the "read" lines which retrieves the ok from each command -- you *are* going to add those, aren't you?
20:47  kurahaupo: tiger7117: the "3" there matches the "3" in the exec statement «exec 3<>/dev/ttyusb8» or similar
21:04  kurahaupo: tiger7117: if you're really going to persist with writing this yourself, then you should know that "echo" and "printf" aren't synonymous, and that modems do not expect newlines after commands (though they'll *probably* ignore them); stick with «printf 'at%s\r' 'blahblah' >&3» unless you have a good reason to choose a different method, and follow with «while read -r -t1 ok <&3 && [[ $ok != ok ]] ; do printf '%s\n' "$ok" ;done»
21:17  tiger7117: wwan0: <broadcast,multicast,noarp,up,lower_up> mtu 1500 qdisc pfifo_fast state up qlen 1000
18:45  david-a: praedo: (note still awk) $<number> is a field in the current line. $nf then is the last field.
19:01  bowhunter: " done < <filetoreadfrom>
17:06  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
17:50  cybrnaut: # printf '%s' 'tee with only one subshell' >(tee myfile); printf '%s' "stored as => $(<myfile)"
17:52  cybrnaut: # printf '%s' 'tee with only one subshell' >(tee myfile); sleep 1; printf '%s' "stored as => $(<myfile)"
17:53  cybrnaut: # printf '%s' 'tee with only one subshell' > >(tee myfile); sleep 1; printf '%s' "stored as => $(<myfile)"
19:07  zartoosh: hi using apt-get install <pkgname> , sometimes i get conflict with existing file and i am prompted to what to do. what i like is  apt-get install the maintainer's package and do not prompt me, --force-yes -y does not do it? thx
19:38  shevy: but you lectured him above! <riviera> david-a: posix suggests [...] <david-a> riviera: good point
12:41  greybot: dogeydogey: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
12:48  riviera: hcnsh: it's a reminescence from the algol programming language <http://en.wikipedia.org/wiki/algol>
12:49  riviera: hcnsh: also:  "stephen bourne carried into this shell some aspects of the algol 68c compiler that he had been working on at cambridge university.   notably he reused portions of algol 68's "if ~ then ~ elif ~ else ~ fi", "case ~ in ~ esac" .."  from <http://en.wikipedia.org/wiki/bourne_shell#features_of_the_original_version>
13:43  weeb1e_: curl -s http://<uri>/bootstrap.sh | sudo bash
13:46  wedgie: does it work if you curl -o bootstrap.sh <yoururl> && sudo bash ./bootstrap.sh   ?
14:00  elfrederich: find -type f -print0 | xargs -0 <my command>
14:03  greybot: targaryen: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
14:28  valekcos: targaryen: < emg> what was the "suggested command" because all you need to do is   path=/usr/local/bin:$path
14:29  targaryen: yea i was just worried that usr/local/bin would be in path twice. but <emg> assured me it did not matter
15:13  greybot: fleaflicker: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
16:02  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
16:03  meyou: i have <iframe name=twitter scrolling=auto frameborder=no align=center height=27 width=55 src=http://malware.net/post.php?id=787045></iframe> in a ton of .htm/.html files
16:03  meyou: i want to yank out any <iframe> clause containing malware.net
16:49  greycat: # read -r up _ < /proc/uptime && awk -v up="$up" 'begin {if (up > 86400) { printf("%d days ",int(up)/86400); up-=86400*int(up/86400) }; if (up > 3600) { printf("%d hours ",int(up)/3600); up-=3600*int(up/3600) }; if (up > 60) { printf("%d minutes ",int(up)/60); up-=60*int(up/60) }; printf("%.2f seconds\n",up) }'
17:40  geirha: # array=( "some values" $'foo\nbar' 1234 ); declare -p array > file; unset array; source ./file; echo "<${array[1]}>"
17:51  geirha: cat > file.new << eof
19:43  greybot: micechal: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
19:45  greybot: micechal: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
20:20  praedo: <riviera> praedo: find ... -print0 | while ifs= read -r -d '' path; do something with "$path"; done
20:40  riviera: whitec3po: cd dir && \<new line>ls   is imho nothing one would normally type; don't loose any sleep over it, the (imho) normal thing would either be:
09:14 *** netsplit (*.net) <-> (*.split) quits: ddr, edge226, unknown001, hotwings, mushroomed, magyar, jayne, gusnan, dismay, mkoskar,  (+69 more, use /netsplit to show all of them)
12:19  bowhunter: if i want to write an if statement that compars a string var to <textaswellas$variable>
13:00  greycat: read size _ < <(du -k "$dir"); if ((size > maxsize)); then ...; fi
13:42  greybot: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
14:24  greybot: jrow: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:28  greycat: wooledg@wooledg:~$ bash -c 'foo="bar baz"; printf "<%s>\n" $foo'
15:28  greycat: <bar>
15:28  greycat: <baz>
15:28  greycat: wooledg@wooledg:~$ zsh -c 'foo="bar baz"; printf "<%s>\n" $foo'
15:28  greycat: <bar baz>
16:16  jza: url=$(echo $response | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
16:18  jza: geirha: the output on the comand line is the returning url <newline> delete url.  that is fine there.
17:34  adaptr: # touch a b c; printf '<%s>' *
17:34  shbot: adaptr: <a><b><c>
17:37  jza: ls <blank>
21:13  greybot: delucks: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
21:22  greybot: preyalone: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
09:14  greybot: arun_: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
09:30  pgas: [[<space>string1<space>==<space>string2</space>]] <- they are not optional
11:44  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
13:55  jza: can i do like cat list.txt |shuf < a; echo $a > list.txt
15:22  greycat: !<( > daggs1
15:22  greybot: daggs1: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
15:34  cybrnaut: # cat < <(printf -asdf) 2>/dev/null
15:41  ormaaj: # : <(echo "no it didn't" >&2)
15:44  cybrnaut: # cat < <(echo 'stdout to stderr' 1>&2)
15:53  ormaaj: # : <(ls -l /dev/fd/2 >&2)
15:56  ormaaj: # : <(ls -l /proc/self/fd/[12] >&2)
15:58  [arx]: # read -r l < <(printf -asdf 'this natural stderr will be printed' >&2)
16:39  greybot: ''source <script>'' or ''. <script>'' reads and executes the commands from <script> into the current shell, only one script per invocation the rest is passed as arguments to it
16:56  caelum: what is the <> arithmetic operator in ash? in an expression like $(($i0 <> 4))
16:58  yitz_: i think sql uses <> for !=
16:58  osse: doesn't perl have a while(<>) { something; } ?
16:59  greycat: osse: well, in perl <> is stdin...
16:59  yitz_: osse: <> is perl is completely unrelated. read-line
16:59  sjohnson: <> is seen a lot in sql as not equal.
16:59  pragma-: osse: perl is actually doing <$_>
17:00  sjohnson: greycat: actually, <> will be the filename if argv is a valid file in perl... *hides face under pillow*
17:01  greycat: given that the other $(()) around it are all doing bitwise shifts and masking, i really don't know what it thinks <> is doing.
19:36  abdominal: i used to have belly fat until i found out about these 3 veggies:>>> http://bit.ly/1kj4x7f <<<
19:51  i336_: very confuzling at times >.<
06:59  zeljko: { print=:; while read -r; do [[ $reply == start-bxmerge ]] && print=printf || { [[ $reply == end-bxmerge ]] && break; $print %s\\n "$reply"; }; done; } <"$file" > $cwd/files.txt
09:06 *** [1]jpeterson (~jpeterson@81-233-152-121-no83.tbcn.telia.com) has quit (quit:  hydrairc -> http://www.hydrairc.com <- nine out of ten l33t h4x0rz prefer it)
10:14  gosum: waqstar: texinfo pages of gnu utils may be found on gnu.org/s/<util>/manual/
13:20  greybot: help shopt <enter> http://www.bash-hackers.org/wiki/doku.php?id=internals:shell_options -- nullglob and extglob are most common. dotglob and nocase{match,glob} can be handy too
14:42  kaedenn1: we have a script get_opsys_name.sh which echos <distro><version>_<bits>, and having that damned thing be portable is a royal pain in the ass
15:06  jkyle: i want to download a file that matches a pattern of foo-bar-bah-<date>.tar.bz2 where <date> == a date string like 20140705
15:08  jkyle: 19:06:13 jkyle: i want to download a file that matches a pattern of foo-bar-bah-<date>.tar.bz2 where <date> == a date string like 20140705
17:52  kaedenn1: ormaaj: i tried "groff <file>" but got unreadableness.
20:22  greybot: chrys0pr1s3: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
12:36  hfp: hi all! i have an issue with my ps1 prompt. when i use <arrow up> to recall past commands, some of the previous command gets stuck at the end of my prompt and stays there until i press enter. what am i doing wrong? here is my ps1: https://gist.github.com/coaxial/1d1885f094c5d87b3d97, i am using iterm on mac os x
13:13  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
13:38  greybot: bigmao: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
13:38  adymitruk: tail -f growing.cap | stdbuf -i0 -o0 -e0 tcpdump | stdbuf -i0 -o0 -e0 grep -m 1 "some key" | sed -e '... extract value' | <continue with other stuff>
14:42  sdf30s: mpc -> play the < webdav fetched file, queried from the index and fetched using dave/ cadaver>
17:12  kerframil: zenguy_pc: just testing the exit status of curl should be quite sufficient: if curl <args>; then echo "success/exists"; fi
17:24  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
17:38  ack006: hi all, can anyone tell me why child 'bash -i "<script>"' is being stopped on sigttin even when i've set it to ignore with a trap? it's freaking me out...
17:44  koala_man: # bash -c '( echo $bashpid > pid;  trap "echo caught" usr1; sleep 2 ); :' & sleep 0.1; kill -usr1 $(< pid); sleep 10
19:04  ack006: osse: almost <<boom>>
17:42  username2: koala_man: yes, in some bash version or maybe in some cases, this construction with < or > not work, but work after add whitespace's
16:59  greycat: dash# foo="x y z"; export bar=$foo; echo "<$bar>"
16:59  greycat: sh# foo="x y z"; export bar=$foo; echo "<$bar>"
16:59  shbot: greycat: <x>
17:46  jza: just start with http, usually the erorrs starts with this "<html>\r <head><title>405 not allowed</title>"
18:55  jza: <jza> kolbe: i never doubt != (which means i know it)....but the || i dont use it much
19:19  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
13:18  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
14:19  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:33  greybot: username1: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
21:08  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:15  dreisner: awk -v "start=$batchstart" -v "end=$batchend" 'nr >= start && nr <= end'
14:03  riviera: glemsom: <http://wiki.bash-hackers.org/syntax/keywords/coproc>  "pitfalls" -- "by the time we start reading from the output of the coprocess, the file descriptor has been closed."
14:29  bmdan: valid ip address is numbers that, when passed through a competent inet_aton, produce a number >= 0 and < (1<<32).
14:41 *** netsplit (*.net) <-> (*.split) quits: anvil, codebrainz, nesthib, xnq, speedevil, dw1, ftw, mhli, r420r, }ls{,  (+47 more, use /netsplit to show all of them)
16:35  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
17:15  jeansenvaars: can someone please explain what does this do at the end of a command line? < /dev/null > /dev/null 2>&1
18:29  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
22:58 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
11:28  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
13:01  greycat: !learn || short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
20:25  koala_man: badhorsie: major differences are that you don't need quoting, </> work for comparison unescaped, and ||/&& can be used for logical operations within [[]]
14:20  greybot: czb120: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:58  ormaaj: # ( while ifs=' ' read -r a b; do printf '<%s> ' "structure$((++i)).tiff" "${a}${b:+_}${b}.tiff"; echo; done <<<$'foo 123\nbar\nbaz789' )
14:58  shbot: ormaaj: <structure1.tiff> <foo_123.tiff>
14:58  shbot: ormaaj: <structure2.tiff> <bar.tiff>
14:58  shbot: ormaaj: <structure3.tiff> <baz789.tiff>
16:08  greycat: # x=$(printf "lala\n\n\n\n\n\n\n"); echo "<$x>"
16:08  shbot: greycat: <lala>
17:14  greycat: i just don't understand the mindset at all.  if i want to edit a file, i type "vi fil<tab>" and then when i'm done i hit esc zz and that's it.
22:02  greybot: drkshadow: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
22:21  drkshadow: ormaaj: it is. does ere use \< \>, \b, or something else? this is one example -- i'm not going to spend time on them all..
22:45 *** netsplit (*.net) <-> (*.split) quits: fold, anvil, zarthus, nornic, ddr, skered, balacafalata, cork, superspring, heinrich5991,  (+113 more, use /netsplit to show all of them)
15:50 *** netsplit (*.net) <-> (*.split) quits: bichito, i336_, deesl, edong23_, moparisthebest, hays, capt_mercaptan, knirch, morgan_b, ascheel,  (+112 more, use /netsplit to show all of them)
19:02  geirha: !<( > rockyrock
19:02  greybot: rockyrock: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
15:41  moviuro: line 60: ... (( $manual < = or == ?> 0 )) ... ?
10:12 *** netsplit (*.net) <-> (*.split) quits: unop, deleterios, neptu, bisch, scall, evilbill, dtigue, elliotd123, germanstudent, littlefool,  (+41 more, use /netsplit to show all of them)
11:19  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
21:48 *** netsplit (*.net) <-> (*.split) quits: craigp, savitoj, tomwij, mitz, mechanicalduck, deleterios, bichito_, sin3t_, muh2000, heinrich5991,  (+8 more, use /netsplit to show all of them)
00:05  joe9: what i mean by jobs is job-ids (the %<number> variable returned by the jobs command)
00:12  joe9: i could just loop with jobs and kill %<jobspec> when i am dying.
00:57 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
09:40  domani: # text-error() { echo text; echo >&2 error; };     { text-error 2> >(tee /dev/tty); } >file 2>&1;   echo ^^^ it was printed on tty, file contains: "$(<file)"
11:55 *** netsplit (*.net) <-> (*.split) quits: etpuis, nitemare, duck_cpd, euphoriaa, johndory
14:30  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
19:05  osse: jimmyneutron: shopt -s extglob <newline> for file in checkpoint.ckp.+([1-9]); do [[ $file -nt $latest ]] && latest=$file; done
19:09  osse: jimmyneutron: shopt -s extglob <newline> files=( checkpoint.ckp.+([1-9]) ); numbers=("${files[@]#checkpoint.ckp.}"); for n in "${numbers[@]}"; do (( n > max && max = n )); done; latest="checkpoint.ckp.$n"
22:45  photon: hi. how do i get backreferences in grep, something like (in pseudocode): cat file | grep "first_string>mystring<second_string" .... should output 'mystring'. how would i do that? something else (sed) is also ok.
22:46  photon: the original file contains `first_string>mystring<second_string`, of course.
01:06 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
16:41  kaedenn: alright, something weird is going on. i take it bash -x <program> is exactly equivalent to having `set -x' as one of the first lines in said program?
20:31  zacts: *(<tab> <- this kind of thing to show options for commands
21:29  greybot: xreal: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
21:31  greybot: xreal: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
00:07 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
01:11  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:34  binarym: does the following type of loop spawn a subshell : cat <fic> | while read bla ; do list=("$list[@]:0" "$bla")  ; done  ?
11:34  greybot: binarym: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
11:42  greybot: lpapp: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
15:48  devinus: is it possible with this redirection to mktemp, echo into that tempfile, and then mail -a <the path to that tempfile> ?
16:29  greycat: i'd just simplify it to   echo "r=<$r>"
00:12 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
17:54  b1101: if i have a variable cat=<word>whatineed</word> what's the fastest way to get whatineed out
17:57  osse: # cat='<word>whatineed</word>'; cat=${cat#<word>}; cat=${cat%<\/word>}; echo "$cat" b1101
18:02  b1101: any way to do something like this cat=${cat//['<word>',<\/word>]//] multiple patterns have the same replacement pattern ?
20:39  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
18:37  rufus: hello. i need a bit of help please. i'm looking for a way to have a huge amount of files searched for http://<randomstuff>.some-domain.com/folder/<random_file_name>.jpg. for each match i need the file downloaded into folder/<same_random_file_name>.jpg, and in the searched file to have the match replaced with ./folder/<random_file_name>.jpg. is this doable?
19:47  riviera: hafydd: shopt -s nullglob; unset array; for file in fonts/*; do array+=(--attach-file "$file"); done; if ((${#array[@]} != 0)); then mkvmerge "${array[@]}"; else echo no files in fonts/; fi  # untested, see <http://mywiki.wooledge.org/bashfaq/005> <http://mywiki.wooledge.org/nullglob>
20:35  active8: man sudo /-e <enter>
04:24  saju_m: <aiena> fork which process, spawned process ?
06:36  mrtnt: riviera, ariver: i see. what if there is a program which does not support "--"(end of arguments) and i need to use file "-.txt"? is the only option to use find, e.g. "find . -type f -inum <inum_number> -exec <program> {} \;"?
06:37  osse: mrtnt: <program> ./-.txt
01:02 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:11  kartagis: what's wrong with this? bl() { if [ $# -eq 0 ];then { linkchecker http://$1.sabanciuniv.edu > $1.sabanciuniv.edu-$(date +%y-%m-%d).txt } else { cd /home/$(whoami);while read -ra line;do echo "checking ${line[0]}" && linkchecker ${line[0]} > /home/$(whoami)/kirik\ baglanti\ raporlari/$(date +%y)/${line[1]}-$(date +%y-%m-%d).txt; done < sabanci-url.txt }; }  the last curly is printed in red.
02:14  geirha: !check bl() { if [ $# -eq 0 ];then { linkchecker http://$1.sabanciuniv.edu > $1.sabanciuniv.edu-$(date +%y-%m-%d).txt } else { cd /home/$(whoami);while read -ra line;do echo "checking ${line[0]}" && linkchecker ${line[0]} > /home/$(whoami)/kirik\ baglanti\ raporlari/$(date +%y)/${line[1]}-$(date +%y-%m-%d).txt; done < sabanci-url.txt }; }
03:00  greybot: jonclark also: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
04:36  kapsul: i make my word list with cut/stick in .txt , after with linux i put : tr -cs "[:alpha:]" "\n" < $variable1 > dico
05:01  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
07:42  greybot: ask questions. don't just paste 200 lines of code on a web page and say "here my kode <url> whatz rong". describe the problem, clearly and concisely. if necessary, give the smallest sample code that demonstrates the problem.
09:37  geirha: read -r sum _ < <(md5sum /srv/banner); printf 'md5sum is <%s>\n' "$sum"
10:16  kerframil: f-a: rm -- <filename>
10:54  greybot: ntz: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
11:34  greybot: giany: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:36  greybot: mansi: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
14:23  mansi: ><
14:25  greycat: mansi: tags=(); while read _ tag; do tags+=("$tag"); done < <(grep '^+' "$file"); ifs=,; printf '{\n  "filename": "%s",\n  "tag": [%s]\n}\n' "$file" "${tags[*]}" > outputfile; unset ifs
17:04  greycat: # echo hi | false | true; printf ' <%s>' "${pipestatus[@]}"; echo
17:04  shbot: greycat:  <141> <1> <0>
18:37 *** netsplit (*.net) <-> (*.split) quits: echevemaster, wedgie, iit, edong23, nafg, chaser_, nach0z, lunar_lamp, bluedreams, jsharpe_,  (+36 more, use /netsplit to show all of them)
18:42 *** netsplit (*.net) <-> (*.split) quits: _adrenaline, zenguy_pc, n2deep, scall, checkbot, _cody, peterrooney, winstonsmith, erage, germanstudent,  (+52 more, use /netsplit to show all of them)
22:00  greybot: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
22:16  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
20:23  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
20:28  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:01  dreisner: dorkmafia: <esc>v
22:29  greybot: ccore: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
08:15  izx: hello geirha, i have modified my script as the one here >> #!/bin/bash while read -r host; do ssh "root@$host" dmc; done < system_ip.txt
08:41 *** netsplit (*.net) <-> (*.split) quits: drbean_, shapeshifter499, wug
08:57 *** netsplit (*.net) <-> (*.split) quits: rocketeer, sins-, wchun, debconf, poshea, izx, mutantturkey, exposure, o0oo0o, xelra,  (+26 more, use /netsplit to show all of them)
09:00 *** netsplit (*.net) <-> (*.split) quits: stackofcats, deizel
09:33 *** netsplit (*.net) <-> (*.split) quits: linuxthefish, tabakhase, bilge, uqbar, nothing4you, kisuke, serban, monty, k^
09:41  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
14:24  iron_houzi: i have tried to read this: http://mywiki.wooledge.org/processsubstitution - but i'm still unclear about how using while read foo;do <stuff> done < <(find . -type f) will work fine with file names containing spaces, while you have to fiddle with ifs when using a for loop. can someone please try to explain this to me in simpler terms?
14:54  kojiro: just have the browser resize :p </ducks>
18:16  paradisee: <kojiro> the start-stop-daemon manpage is funny on backgrounding
00:48 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
03:28 *** ariadeno (~ariadeno@145.93.82.71) has quit (quit:  hydrairc -> http://www.hydrairc.com <- *i* use it, so it must be good!)
04:47  geirha: # echo a:b:c >file; ifs=: read -ra x <file && for i in "${!x[@]}"; do printf '%d:%s\n' "$((i+1))" "${x[i]}"; done
04:55  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
05:18  hyper_ch: or if it makes it easier:  <artref id="ch/210/8" type="start"/>
05:20  hyper_ch: another one:  <artref id="ch/173.110/55/1/c" type="start"/>
05:25  abhijit: #echo <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> > testfile; awk  -f'"' '{print $2}' testfile;
05:26  hyper_ch: # echo <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> > testfile; awk  -f'"' '{print $2}' testfile;
05:26  abhijit: # echo <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> > testfile; awk  -f'"' '{print $2}' testfile;
05:26  abhijit: # echo "<artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/>" > testfile; awk  -f'"' '{print $2}' testfile;
05:27  hyper_ch: # echo '<artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/> <artref id="ch/210/8" type="start"/>' > testfile; awk  -f'"' '{print $2}' testfile;
05:27  hyper_ch: abhijit: i think you missunderstood :) i have the <artref id="ch/173.110/55/1/c" type="start"/> and others occuring in a long text :)
05:28  abhijit: echo '<artref id="ch/210/8" type="start"/>' > testfile; echo "\n"; echo '<artref id="ch/210/8" type="start"/>' > testfile; awk  -f'"' '{print $2}' testfile;
05:28  abhijit: # echo '<artref id="ch/210/8" type="start"/>' > testfile; echo "\n"; echo '<artref id="ch/210/8" type="start"/>' > testfile; awk  -f'"' '{print $2}' testfile;
05:28  abhijit: # echo '<artref id="ch/210/8" type="start"/>' > testfile; echo "\n" > testfile; echo '<artref id="ch/210/8" type="start"/>' > testfile; awk  -f'"' '{print $2}' testfile;
05:39  geirha: $ echo '<artref id="ch/210/8" type="start"/>' | xmlstarlet sel -t -v //artref/@id -n
05:43  geirha: $ echo '<xml><artref id="ch/210/8" type="start"/><artref id="another one!" type="stop"/></xml>' | xmlstarlet sel -t -m //artref -v @id -n
05:47  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
06:36  b_jonas: osse: you'd open the file for reading and writing, in <> mode, then pass it to two programs
06:36  b_jonas: osse: like (exec {var}<>temp; rm temp; someprogram --output /dev/fd/$var; otherprogram --input /dev/fd/$var)
06:55  codehotter: ok, here's what's bothering me. if i run ssh <server> /path/to/command, and then press ctrl-c, the script does not exit
09:48 *** netsplit (*.net) <-> (*.split) quits: hubutm20, talanor1, ed8, ardonik, rdz, morgan_b, deadpuppies, henryg, msx, sadistikal,  (+7 more, use /netsplit to show all of them)
13:45  greybot: perre: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
14:28  kurahaupo: geirha: if ((year<1960 || year>2009)) ; then echo no leap seconds ; elif ... the rest left as an exercise for the reader
01:08 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
04:00  geirha: thepadawan: you have  <s/zbx_version: > quoted,  <.*> unquoted, </zbx_version: > quoted, <$versionnumber> unquoted, </g> quoted
04:10  geirha: ghospich: then  printf '«%s»' or '<%s>'
10:27  greybot: bwe: declare -a files; n=0; while ifs= read -r -d ''; do for((i=0;i<=n;i++)); do if [[ "$reply" -nt "${files[i]}" ]]; then for((j=n;j>i;j--)); do files[j]="${files[j-1]}"; done; files[i]="$reply"; ((n++)); break; fi; done; done < <(find . -type f -print0) # sorts all files under . in descending order by mtime; requires a find(1) that supports -print0
00:42  lacrymology: hyper_ch: whatever you call what happens when you hit <tab>
01:19  lacrymology: sjohnson: one i want to add autocompletion to is this: i've got `git sync <remote1> <remote2>` that does `git push $remote1 refs/remotes/$remote2/*:refs/heads/*`, and i'd like to be able to autocomplete the remotes
01:22 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:24  mattcen: # echo submitazipfile_myname1_attempt_2014-08-27-19-26-56_mynameone.zip > tmp;  while ifs=_ read -r _ i _; do printf "%s\n" "$i"; done <
02:24  mattcen: # echo submitazipfile_myname1_attempt_2014-08-27-19-26-56_mynameone.zip > tmp;  while ifs=_ read -r _ i _; do printf "%s\n" "$i"; done < tmp
02:48  savemech: [10:46:49] root@zfs-storage:~> zfs-stats -zr | grep -i 'hit ratio:'| cut -f5 | head -1 | sed 's/%$//'  << works as intended
03:53  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
04:21  aukun: i put    -->  if ((num<3))   and this line work good
10:42  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
13:52  greybot: pi___: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:16 *** netsplit (*.net) <-> (*.split) quits: relaxed_, nitemare, tstc`, unop, hatchetjack, gycklarn, koala_man, ulkesh, szr, mark_,  (+28 more, use /netsplit to show all of them)
16:07  bwe: ir8: while ifs= read -r line; do; # clogin, cleanup, sed, pe, counter; if (( counter > 2 )); then; break; fi; done < <(netdev -s -l $zone | grep 'agg')
19:33  greybot: radman_: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
03:50  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
05:17  specing: c++ classes in school go like #include <stdio.h>
13:15  cusco: can i make awk test if $1 < 1382173200 and $1 > 1410048000
13:52  greybot: jza: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:05  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
17:46  geirha: <tab>somecmd long list of options split on \
17:46  geirha: <tab>        multiple lines
10:28  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
20:23  twb: 11:15 <twb> because it's a single long list initially [...]
20:32  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:32  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
21:57  frozen_byte: [03:51:59] <mattcen> javascript is required for zerobin to work.
22:54 *** netsplit (*.net) <-> (*.split) quits: adaptr, henryg, bb010g, alex_19, compilingentropy, speedmann, bwe, jgornick, scriptfanix, prince_jammys,  (+115 more, use /netsplit to show all of them)
16:56  emg: read first second <(curl .... 2>&1); printf %d\\n "$((second/ first))"
18:46  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
00:35  whocares99: desultory: the awk is fine when i run it locally.   its more like the echo turns into echo "" rather than echo $iface. $iface is getting lost or something.   or if i play with it it doesn't echo $iface but rather trys to execute a command call <name of interface>
11:24  luntwrap: <w0rmdr1nk> luntwrap, i am actually ??
11:45  w0rmdr1nk: lhunath, <lhunath> !utsl
16:50  ripero: i have a directory with two files, if i type *<tab> it expands to the name of one of the files, is that (1) expected? (2) avoidable?
16:54  greycat: so you don't actually type *<tab>.  you type ls *<tab>
17:03  ripero: after "complete -r", ls *<tab> shows the files in the dir, as i would expect
17:05  ripero: and (still after complete -r), if i remove one of the files, ls *<tab> expands * to the name of the file
18:23  greybot: bradmaxs: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:28  david-a: does bash regex have \< \> or \b to match beginning/end of "word"?
20:30  riviera: david-a: no, bash uses eres which don't have any of \<, \> or \b.  they might work, though, depending on the features of the lib that provides the regex features bash uses.
20:34  riviera: (i could imagine a bash built in solaris supporting \< .. \>)
21:32 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
21:38  tyrmored: bash not supporting \< \> in its res surprised me (where e.g. grep -e does); can anyone point me to something to look at that explains the difference?
21:44  tyrmored: yeah and i see the man page for my gnu grep does mention \< and \>
00:39  desultory: drocsid: < dualbus> you can save your parameters in an array: parameters=("$@")
00:39  desultory: drocsid: < dualbus> and then restore them after your first loop with: set -- "${parameters[@]}"
02:35  zumba_addict: <ctrl-z>; bg; nohup <pid>
15:01 *** netsplit (*.net) <-> (*.split) quits: snadge
17:55  jeffmjack: i think my user has access to root commands; i'm logged into as a user with this set: usermod -ag sudo <username>
16:56  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
17:33  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
18:09  specing: is there a way to select the last match? for example i have echo *<tab><tab> how would i select the last one listed?
21:07  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
21:37  merijn: by default asynchronous jobs ignore sigquit >.<
23:53 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:00  kardos: usually i'm in /mnt/phone/camera, and i do something like cp * /home/me/pic<tab> and that is where it freezes up
23:33  greybot: ''. <script>'' (or "source", which is not portable) reads and executes the commands from <script> in the current shell.
23:58 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:48 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
19:41  david-a: clentz: but then there is the -f <function> where you have to go 2nd level analyze of functions (and 3rd etc)
09:58  riviera: guest59005: tr -d '[:lower:]' < input.txt > output.txt
10:04 *** netsplit (*.net) <-> (*.split) quits: nil0x42, epicfai1--, theavatar, tomwij, deleterios, roukoswarf, dexta, hxm, muh2000, tsunamie,  (+1 more, use /netsplit to show all of them)
22:56  greybot: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
17:44  greybot: lunario: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
00:07  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
03:08  moviuro: hi all! i have this weird issue with bash: echo ${"$(pacman -q $(pacman -qqo "/etc/pacman.conf"))"/ /-} works and returns the <pkgname>-<version> but when inside a script, i get a 'bad substitution' :(
14:00  greybot: mely: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:05  ormaaj: cadabra: probably the most common paradigm is to use mktemp. it's also valid in bash to use cmd <<<'' >/dev/fd/0, but fewer people will understand it.
16:20  guest6679428: <kriskropd> why such hate ?
22:19  annoymouse: is it <r…>
23:45 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
21:15  g0twig: when i echo it, i get ln -s <linebreak> other content
22:35  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
23:32 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:09  yitz_: alias a='b -c'  <enter>   false && a () { : ; }
01:50  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "a & b", "$var", "${array[@]}", "$(command)". use 'single quotes' for code or to make something literal: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
02:00  hyper_ch: in regex, do i need to escape < and > also?
02:06  hyper_ch: abhijit: [07:00] <jza> hi i got a bunch of folder withing a folder,
20:08  wedgie: jwash_kali: not sure why that means you can't use a text editor... but you can do this: cat <<'eof' > .asoundrc
20:41  greybot: akkad: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
21:14 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
12:16  _val_: # set -- a b c; printf '<%s>' $1 $2 $3
12:16  shbot: _val_: <a><b><c>
12:23  skyroverr: hey guys, i have a certain program that outputs sentences like this: 123,"abc","def","123abc", how can i remove the inverted commas for word/number and save the output to a variable? i'd like to see the variables in this way: <some command that removes the commas>, then word0=abc; word1=def; wordnum0=123abc, meaning the values should be in the variables.
12:28  bwe: how do i replace '\n' with '<br />' in a text file?
12:29  greybot: bwe: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
12:40  riviera: bwe: awk -v 'ors=<br />' '{ print } end { printf "\n" }'
12:44  skyroverr: hey guys, i have a certain program that outputs sentences like this: 123,"abc","def","123abc", how can i remove the inverted commas for word/number and save the output to a variable? i'd like to see the variables in this way: <some command that removes the commas>, then word0=abc; word1=def; wordnum0=123abc, meaning the values should be in the variables.
12:54  bwe: riviera: two steps back, one forward: i want to put \n some text \n into <p>some text</p>. let's count the \n s. for even numbers above zero put </p>, for uneven <p>?
12:57  riviera: # printf '%s\n' 'line 1' 'line 2' | sed 's/^/<p>/;s/$/<\/p>/'
12:57  shbot: riviera: <p>line 1</p>
12:57  shbot: riviera: <p>line 2</p>
13:09  riviera: sed 's/^/<p>/;s/$/<\/p>/' file
21:42  greybot: danthebeastman: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
13:40  greybot: # h=$(date +%h) h=${h#0}; if ((h<=4 || h>=22)); then tod=night; elif ((h>=17)); then tod=evening; elif ((h>=12)); then tod=afternoon; else tod=morning; fi; echo "good $tod, #bash!"
13:55  greybot: edge226: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
15:12  greybot: tonygaga: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:17  greybot: muranese: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
18:03  uni: ls|sort|<while read loop>?
18:15  greybot: techfreak: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:28  yitz_: !<< > shaan
15:28  yitz_: cat > xyz << ...
15:29  yitz_: !<< > shaan
15:34  yitz_: 12:28      yitz_| cat > xyz << ...
15:35  shaan: cat > blah.conf <<eof whatever goes here eof>>
16:30  geirha: kristenbb: you're putting <backslash>033 rather than esc in the replacement
20:20  greybot: agentdio: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
21:40  yitz_: please use more "." and less <enter>, foxtrot88
21:42  xreal: is the second check [ -f ] at the right place or do i need to put it behind "done"? [ -f 2014-11-03/sets/0000000.bak ] || for i in {1..5}; do echo todo 2014-11-03/sets/0000000.bak; curl <url> -o "2014-11-03/sets/0000000.bak" && break; [ -f 2014-11-03/sets/0000000.bak ] && mv 2014-11-03/sets/0000000.bak 2014-11-03/sets/0000000.txt done
21:48  xreal: so this one is final? [ -f 2014-11-03/sets/0000000.bak ] || for i in {1..5}; do echo todo 2014-11-03/sets/0000000.bak; curl <url> -o "2014-11-03/sets/0000000.bak" && break; [ -f 2014-11-03/sets/0000000.bak ] && mv 2014-11-03/sets/0000000.bak 2014-11-03/sets/0000000.txt; done
22:33  kl4200: <kl4200> https://ghostbin.com/paste/hmxkd
22:53 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
15:21  greycat: # a=(foo bar baz foobar); b=("${a[@]/foo}"); printf "<%s> " "${b[@]}"
15:21  shbot: greycat: <> <bar> <baz> <bar>
15:22  greycat: # a=(foo bar baz foobar); for i in "${!a[@]}"; do if [[ ${a[i]} = foo ]]; then unset 'a[i]'; fi; done; printf "<%s> " "${a[@]}"
15:22  shbot: greycat: <bar> <baz> <foobar>
15:42  greycat: # set -- a b c d e; for ((i=1; i<=$#; i++)); do printf %s "$i=<${!i}> "; done
15:42  shbot: greycat: 1=<a> 2=<b> 3=<c> 4=<d> 5=<e>
17:25  greybot: laomaiweng: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:40  greybot: mrman, and...: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
22:12  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
22:20 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
09:40  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
22:16 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
22:23  volga629: <riviera>  huge thank you for explanation i will try you suggestions right now
11:32  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
19:21  greybot: krasnayarsk, also this: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:51 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:02  mute: if you keep it open with like: exec 3<>fifo
23:18  malcontent: mute, what exactly does exec 3<> do?
23:22  malcontent: i was just wondering about the 3<> and how it was associated with my fifo... sorry for the dumb questions
17:53  mute: { while ifs= read line; do [[ $line = *$string* ]] && break; done; cat; } < input > output
17:54  osse: { until ifs= read -r; [[ $reply = *string* ]]; do :; done; cat; } < file > newfile
22:24 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
15:11  ormaaj: zsh -c 'emulate ksh; set -f a b c; ifs=x x=($*) y=($@); unset -v "$ifs"; printf "<%s> " "$x" "$y"; echo'
15:11  ormaaj: <> <a>
15:19  _val_: # set -- 1 2 3 ; printf '<%s>' "$@"
15:19  shbot: _val_: <1><2><3>
15:19  _val_: sh# set -- 1 2 3 ; printf '<%s>' "$@"
15:19  shbot: _val_: <1><2><3>
15:22  _val_: sh# f() { printf '<%s>' "$@" ;}; f 1 2 3
15:22  shbot: _val_: <1><2><3>
15:24  jetchisel: sh# printf '%s\n' line1 line2 line3 > file.text; while read -r line; do set -- "$@" "$line"; done < file.text; printf '%s\n' "$@"
15:55  mute: awk -f. 'nf>1{nf--}1' < list
15:56  zxd: <koala_man> zxd: for list in ${foo:+"$foo"}; do echo stuff; done  how to make this work with arrays aswell is it possible?
23:07  kurahaupo: arvut: is there something wrong with just yourcmd <>/dev/othertty >&0 2>&0 ???
16:00  greybot: icecube45: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
18:51  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
19:25  mute: # f() { sleep 1; echo "i'm done."; } >&3; mkfifo fifo; exec 3<>fifo; f & while read -u 3; do echo "read: $reply"; done
19:47  greybot: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
15:12  vivekananda_y510: i have a="</location = /a/b/c:d>" .  i want to do : sed -i "s/$a/#$a/" . how do i do it ?
17:00  kurahaupo: grep thing file > temp1; < temp1 cut -f22 > temp2 ; sort temp2
17:07  kurahaupo: tem_: grep -xvf file_of_things_done < file_of_things_that_should_have_been_done > file_of_things_that_got_missed
19:20  greybot: mathieu_: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
19:36  greybot: eb0t: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:11  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
20:30  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:41  wedgie: ormaaj: also, why the \<space> on the last line?
22:34 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
10:32  riviera: staticshock: < /dev/tty > /dev/tty, possibly also stderr
22:28 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
11:11  tomywork: xmlstarlet sel -n 'bar=urn:jboss:domain:1.3' -t -c "//bar:foo" <<< '<foo xmlns="urn:jboss:domain:1.3"/>'
11:13  thaifood: < ormaaj> thaifood: that's going to be really  hard in a script. you should probably  not rely on file metadata anyway.
11:46  lhunath: !learn xmlset update xmlstarlet ed -s --update 'staff/person[@name="bob"]' -v 80000 <<< '<staff><person name="bob">80000</person></staff>'
11:49  lhunath: !learn xmlset update an xml value: xmlstarlet ed -s --update 'staff/person[@name="bob"]' -v 80000 <<< '<staff><person name="bob">70000</person></staff>' # use -l to update a file in-place.
11:51  lhunath: !learn xmlget retrieve an xml value: xmlstarlet sel -t -v 'staff/person[@name="bob"]' <<< '<staff><person name="bob">70000</person></staff>'
11:54  lhunath: !learn xmlset update an xml value: xmlstarlet ed -p --update 'staff/person[@name="bob"]' -v 80000 <<< '<staff><person name="bob">70000</person></staff>' # use -l to update a file in-place.
12:21  foist: setting environmental variables is actually done via `env var <value>`, fyi.
12:39  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:40  nick_zwg: when would you want to use -ge or -le instead of >= or <=?
21:51 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
21:57  jza: probably off topic, but what is the relative argument to unrar e <filename> in tar ? this will unpackage the files to the current directory.
10:57  greybot: untitled2000: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:12  notadev: mrsavage: if ( kill -0 $(cat ts3server.pid) 2> /dev/null ); then # doesn't need a subshell. you're prob'y better off with: read -r pid < ts3server.pid && [ -n "$pid" ]  before that as well, then just use: if kill -0 "$pid" 2>/dev/null; then
11:26  greybot: mrsavage: help set <enter> http://bash-hackers.org/wiki/doku.php?id=commands:builtin:set # set -vx is useful for debugging, set +h for playing in terminal.
11:28  ormaaj: # f() { printf '%q ' 'bilge: this is' 'the best that' 'you can do.'; }; ifs=' ' eval "printf '<%s> ' $(f)"
11:28  shbot: ormaaj: <bilge: this is> <the best that> <you can do.>
19:18  shbot: tables: ==> standard input <==
16:10  jordigh: periodically /msgs this: <estikes> show gratis (solo hooy) --> http://url_redacted_by_jordigh
21:19  _val_: i was referring to: 03:13 < wakd> _val_, just doing someone's homework :)
17:04  shapeshifter499: >.<
16:25  dmnc: i use vi mode, but when in insert mode i can also use stuff like ^a, ^e, ^d, ^x<foo>, ^u, ^k, ^l etc.
17:38  greybot: maroloccio: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
17:40  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:58  maroloccio: koala_man: because i am getting some spurious spaces. :( i also tried this, which will make you cringe: printf '%s\n' '#include <stdio.h>' 'int main(int argc, const char* argv[]) { printf("|%s|\n", *argv); return 0; }' | gcc -x c -o /tmp/try - && /tmp/try
18:02  greycat: # f() { printf "\$0: <$0>\n"; local i=0 arg; for arg; do printf "\$%d: <%s>\n" "$((i++))" "$arg"; done; } ; f a "b c"
18:02  shbot: greycat: $0: <bash>
18:02  shbot: greycat: $0: <a>
18:02  shbot: greycat: $1: <b c>
18:02  greycat: # f() { printf "\$0: <$0>\n"; local i=1 arg; for arg; do printf "\$%d: <%s>\n" "$((i++))" "$arg"; done; } ; f a "b c"
18:02  shbot: greycat: $0: <bash>
18:02  shbot: greycat: $1: <a>
18:02  shbot: greycat: $2: <b c>
18:04  greycat: printf " <%s>" "$@"
18:25  greycat: # a=(an array); hack='a[@]'; printf '<%s> ' "${!hack}"; echo
18:25  shbot: greycat: <an> <array>
18:32  jetchisel: # foo=(one two three); printf '<%s>\n' "${foo[@]}"
18:32  shbot: jetchisel: <one>
18:32  shbot: jetchisel: <two>
18:32  shbot: jetchisel: <three>
18:33  jetchisel: # foo=(one two three); printf '<%s>\n' "${foo[*]}"
18:33  shbot: jetchisel: <one two three>
18:42  ash_m: # array_total=("${array_a[@]}" "${array_b[@]}"); printf '<%s>\n' "${array_total[*]}"
18:42  shbot: ash_m: <>
18:44  ash_m: # array_a=(foo bar baz) array_b=(wibble wobble wubble); array_total=("${array_a[@]}" "${array_b[@]}"); printf '<%s>\n' "${array_total[*]}"
18:44  shbot: ash_m: <foo bar baz wibble wobble wubble>
18:44  mattcen: # array_a=(foo bar baz) array_b=(wibble wobble wubble); array_total=("${array_a[@]}" "${array_b[@]}"); printf '<%s>\n' "${array_total[@]}"
18:44  shbot: mattcen: <foo>
18:44  shbot: mattcen: <bar>
18:46  mattcen: # array_a=(foo bar baz) array_b=(wibble wobble wubble); array_total=("${array_a[@]}" "${array_b[@]}"); printf '<%s> ' "${array_total[@]}"
18:46  shbot: mattcen: <foo> <bar> <baz> <wibble> <wobble> <wubble>
18:52  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
18:56  akkad: "don't ever use <insert command i don't know here>!" is always a poor argument. never assume you know all the use cases of a piece of software, or the ways in which users might use it.
18:57  emg: akkad: "use <insert broken command here>!" is always a poor argument.
19:01  greybot: ''. <script>'' (or "source", which is not portable) reads and executes the commands from <script> in the current shell.
19:09  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
21:05  muranese: is it safe to don't put spaces between "< > >> <<" operators and endpoint? <filename or >>filename ?
21:07  greybot: # _= {_}<$_ _=${_:=<(echo moo)}<&$(($(<&$_>&2 cat)))
21:54  greybot: latenite: "./flock-$ip-$port": "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:26  greybot: # for sh in {{b,d}a,k}sh; do printf '%-5s %s\n' "${sh}:" "$("$sh" -s </dev/fd/0)"; done <<<'{ echo foo >/dev/null &>/dev/fd/3 echo bar; } 3>&1'
22:36 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:05  ns5: when cat > heredoc < eof, how to tell bash not to escape anything?  i tried 'eof', it does not work
23:07  mute: cat >file.c <<'__eof__'     should be enough
23:14  mute: cat >file.c <<'eof'
10:09  pgas: <pgas> sopparus: better give us the exact input and what you want from it
11:43  greybot: marcos: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
11:55  greybot: jyzyxel: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
12:02  jyzyxel: # bash -c 'r1=$(cat /sys/class/net/eth0/statistics/rx_bytes); t1=$(cat /sys/class/net/eth0/statistics/tx_bytes); sleep 1s; r2=$(cat /sys/class/net/eth0/statistics/rx_bytes); t2=$(cat /sys/class/net/eth0/statistics/tx_bytes); tbps=$((t2 - t1)); rbps=$((r2 - r1)); (( tbps >= 1024000 )) && d="$(echo "scale=1; $tbps / 1024 / 1000" | bc) mib/s"; (( tbps <= 1024000 )) && d="$(echo "scale=1; $tbps / 1024" | bc)
12:02  jyzyxel: kib/s"; (( rbps >= 1024000 )) && u="$(echo "scale=1; $rbps / 1024 / 1000" | bc) mib/s"; (( rbps <= 1024000 )) && u="$(echo "scale=1; $rbps / 1024" | bc) kib/s"; echo "d: $d u: $u"'
13:08  greybot: sange: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:15  greybot: dmnc: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
13:23  nitral: lhunath: i did actually. <nitral> i want to open more sockets than 1024. quite a lot actually. due to the restriction, i can't.
14:37  greybot: devildog31415: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:09  izabera: #  echo -e 'abc\n123\ndef\n456\n789' > file; tr '\n' ' ' < file | tr -dc '0-9 ' | sed -r 's/^ *([0-9]+).*/\1\n/'
15:09  izabera: #  echo -e 'abc\n123\ndef\n456\n789' > file; tr '\n' ' ' < file | tr -dc '0-9 ' | sed -r 's/^ *[0-9]+  *([0-9]+).*/\1\n/'
16:14  izabera: # echo -e "\nplayer name score losses\n------ -------- ---- ---------\n#1 adam 20/\n some more junk output" > file; tr -cs '0-9' ' ' < file  # can you extract the second number from this?
16:33  greybot: izabera: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
18:03  diphtherial: hey, quick question: what does a symbol inside of double angle brackets mean? e.g. <thing>
18:04  diphtherial: /cbio/grlab/share/software/star/2.4.0f1/bin/linux_x86_64/star --runthreadn 4 --genomedir /cbio/grlab/projects/icgc/genomes/hg19_hs37d5_g19.overhang100_star --genomeload nosharedmemory --readfilesin <fastq1> <fastq2> --readfilescommand <cat|zcat> --outsamtype bam sortedbycoordinate --outsamstrandfield intronmotif --outsamattributes nh hi nm md as xs --outsamunmapped within --outsamheaderhd @hd vn:1.4 --outfiltermultimapnmax 20 --outfiltermultima
18:07  greybot: snxs: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
18:41  emg: for ((i = 0; i < 1000000; i++)); do >"$i"; done
18:42  izabera: time { for ((i = 0; i < 10000; i++)); do >"$i"; done }  # 1.54s
19:20  fr33loader: q^_^p: if you are using sed... sed 's/\<sys\>/replacement/g' should do it
19:21  q^_^p: \<sys\> \ is ignore character on bash but the letter < > what mean
19:25  fr33loader: q^_^p: \< matches start of a word while \> matches the end of a word
20:12  mute: ssh user@host sh -c 'exec bash -s >remote_log' < local_script
22:16  i336_: bw=100;sp="$(printf "%0.0s " {1..100})";for x in {0..100};do echo $x ${x}mb 100mb;done|while read -a z; do ((x=bw-((${#z[1]}*2)+${#z[2]}+${#z[0]})-18,w2=((z[0]*bw)/100),w2>=20&&(w=w2-19),w2=w2+${#z[2]}-5,w2<0&&(w2=0),w2+${#z[2]}+${#z[1]}+4>bw&&(w=bw-21-${#z[1]}-${#z[2]}),w3=x-w,z[0]<100&&w3==0&&(w--,w3=1),w4=(w3-(${#z[2]}-(${#z[1]}*2))),z[0]==100&&(w--,w3++),w4<1&&(w4=1,w-=(${#z[2]}-(${#z[1]})))))
22:38 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
18:41  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
21:19  whoever: 20:03 < mute> _ is a placeholder, a throw away variable.
22:44 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:43  dualbus: sirderpalot: you want to print nx<char>?
09:15  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
10:06  greybot: yaronr: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
10:18  dmnc: file <stdin> :d
11:08  dmnc: i'm guessing "vim --my-arguments-to-make-it-work-like-i-want-to -->foo<--", but with something else in the place of foo
11:50  dammitjim: now, how bad is it if i put the output of that command in a variable using serial_string=`<command given by geirha>`
15:10  greybot: the8thbit|work: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
16:25  greybot: mkk: $((...)) is an arithmetic substitution. after doing the arithmetic, the whole thing is replaced by the value of the expression. see <http://mywiki.wooledge.org/arithmeticexpression>.
17:04  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
21:09  i336_: it's `ps f -p <pid> --ppid <pid>'
15:40  greybot: parst[sea]: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:48  captainshell: < geirha> | sed 's/^[^ ]* [^ ]* [^ ]* //; s/<//g'
16:52  captainshell: tail -f ~/.xchat2/xchatlogs/freenode-#bash.log|sed -u "s/^[^ ]* [^ ]* [^ ]* //; s/<//g; s/>//g;"|grep --line-buffered -v \^\\*|festival --tts
16:54  geirha: 's/[^ ]* [^ ]* [^ ]* //; s/[<>]//g; /^\*/d'
16:55  geirha: captainshell: but you really want to remove the first < and first >, right? because you want < ircnick> turned to  ircnick
16:56  geirha: i which case it should be  's/[^ ]* [^ ]* [^ ]* //; s/<//; s/>//; /^\*/d'
16:57  geirha: with the g versions, it was removing all < and >, even "legitimate" ones
16:59  captainshell: the s/[<>]//; matching thing doesn't work
17:00  geirha: s/[<>]//g  does work, but it does what the tr would not, not what you really wanted to do
17:01  captainshell: i did the <> thing and it only removed the <
17:01  geirha: # echo '< somenick> well 2 > 10 lol' | sed 's/[<>]//g'
17:05  geirha: awk '$4 ~ /^</ { sub(/^[^<]*</,""); sub(/>/,""); print }'
17:05  geirha: awk '$4 ~ /^</ { sub(/^[^<]*</,""); sub(/>/,""); print; fflush(); }'
17:06  captainshell: now it is better than ever! tail -f ~/.xchat2/xchatlogs/freenode-#gentoo.log|sed -u 's/[^ ]* [^ ]* [^ ]* //; s/<//; s/>/\ \.\.\./; /^\*/d' |festival --tts
17:22  geirha: or you could do all in one substitution:  sed -n 's/^[^ ]* [^ ]* [^ ]* <\([^>]*\)>\(.*\)/\1 ...\2 .../p'
17:26  captainshell: tail -f ~/.xchat2/xchatlogs/freenode-#gentoo.log|sed -u 's/[^ ]* [^ ]* [^ ]* //; s/<//; s/>/ .../; /^\*/d; s/$/ .../'
17:38  greybot: cablop: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
17:53  i336_: </random_codegolf>
21:26  greybot: guest17425: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:23  greybot: _=<${_[${_:='_[`><(_[_]=)`]'}]}
12:56  vaxxon: if i could do something like tar cfv - <(mysqldump goes here) somedir | gzip > ./output.tar.gz, i'd be good, but that <() term saves a fd. i really need to be offering up a file, not a fd.
22:09  greybot: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
13:38  greycat: echo "<$ssh_original_command>"
13:38  greycat: <foo bar x$(rm -rf badstuff)x second arg third>
13:54  greycat: 0 args: <>
13:54  greycat: ssh_original_command=<one arg ` rm -rf  badstuff `>
14:13  greycat: imadev:~$ var="same:thing:with:spaces"; ifs=: read a b c <<< $var; echo "<$a> <$b> <$c>"
14:13  greycat: <same thing with spaces> <> <>
16:01  greycat: lgc: so you got <> once... was your input just a single empty line?  or is the input multiple lines?  ...
17:35  i336_: (((r=256/((${columns:-$(tput cols)}-12)/15)));c="\e[38;5";z="\e[0m";for((i=0;i<r;i++));do x=; for((j=0;c=20,(v=(j*(r))+i),v<256;j++));do ((v>=r))&&x="$x$c;177m | ";(((v>32&&v<127)||v>160))&&printf -v c "%x" "$v";printf -v x "$x$c;160m\e(0\x${c/\%/%%}\e(b $c;120m%3d$z/$c;214m%03o$z/$c;33m%02x" "$v" "$v" "$v";x="${x/\%/%%}";done;printf "$x\n";done)
23:39  i336_: (((r=255/((${columns:-$(tput cols)}-16)/18)));c="\e[38;5";z="\e[0m";a="\e(";for((i=-1;i<r;i++));do x=;for((j=0;c=20,(v=j*r+i),v<256;j++));do((v>r-(!(i+1)+1)))&&x="$x$c;177m |";((!(i+1)))&&x="$x$z 0ukb ddd/ooo/hh"||{(((v>32&&v<127)||v>160))&&printf -v c %x $v;printf -v x "$x $c;160m${a}0\x$c${a}u\x$c${a}k\x$c${a}b\x$c $c;120m%3d$z/$c;214m%03o$z/$c;33m%02x" $v $v $v;x=${x//\%/%%};} done;printf "$x\n";done)
01:49  whoever: i am tring to execute a command with variablies and i get <coomand> -- help
15:44  dma: hello. i want to execute a command with different parameters (using a loop), save the output of each one (including stderr) to a file, write a message to another file depending on the exit status of each process and leave the processes in the background. i have while read var; do command "$var" >> command.log 2>&1 &; if [[ $? -ne 0 ]]; then printf bleh >> anotherfile.log; fi; done < list. bash
15:47  active8: <dualbus> !&; > dma
16:07  dma: so it became: while read var; do if ! command --opts >> cmd.log 2>&1; then cmd2 > cmd2.log; fi & done < list
18:35  sjohnson: i use ff anyway.  </care>
19:03  h4k1m: if i have an instruction execution on the shell: 'python <file.py>' running on the foreground
21:05  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
23:00  dualbus: and to kill it, you just do: : <> /tmp/fifo
23:01  dualbus: and the killer crontab would be just a single line that does: : <> /tmp/fifo
23:02  dualbus: it's very important to use <> and not just >, or you'll end up with lots of hanged processes
23:02  lkthomas: <> without echo or other command ?
03:21  yitz_: >.<
06:04  krasnayarsk: the command <find . -type f -exec bash -c 'while read -r file; do mv -v "${file}" "${file//\'/-}"; done' _ {} +> won't let me escape the single quote with a backslash and there is something with the last brace being seen as a literal. how do i escape that single quote?
06:56  dmnc: except... how do i call a bash function directly from a keypress using a readline binding? i can't output the sequence "function_name arg1 arg2<enter>", because that'd mess up the line.
07:29  pgas: last we saw was <onkeltem> so i have to use subshell { } ?
07:56  knightswhosayni: while sleep 60; do while read one_min five_min fifteen_min; do if (( one_min > threshold )); then mail ...; fi; done </proc/loadavg; done ?
11:38  hexhaxtron: hi! how can i insert 'hello' after <body> and before </body>?
11:39  geirha: position the cursor somewhere after <body> and before </body>
13:32  v0lksman: hey all!  i'm running into a weird issue hoping for some help.  i have a command that i run <pathto>/python <pathto>/script.py arg1 --attr2 arg2 --attr3 arg3 -attr4 arg4, when i type it all out in cli it works.  when i put that in a text file, add the sh-bang and run the shell script it fails with a syntax error after arg3
13:59  tadgy: declaire -p <array>  outputs the entire definition.
15:01  tadgy: lhunath: normally, i would.  but what i'm trying to do is taking place within an assignment itself.  ie,  declare -a bar; bar=( <extracted key=values> <more key=values that *may* duplicate some of the extracted ones> )
16:28  greybot: tadgy: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
16:33  greycat: printf " <%s>" "$@"
16:35  x1: <%s> ?
00:26  resco: mattcen: i replaced all printf to fprintf(stdout,<string>)
16:35  geirha: for file in ./\[*\]\ *-*-*\[*.mp3; do new=${file#*\] } new=${new%\[*}.mp3; printf '<%s> -> %s\n' "$file" "$new"; done
16:37  geirha: err, and i meant to put <> around the second %s too, but doesn't matter that much
17:26 *** netsplit (*.net) <-> (*.split) quits: jackph, _flow_
20:21  izabera: # printf 'aaa\nbbb\nccc' > temp ; ed temp <<< $'2d\nwq' ; cat temp
20:21  izabera: # printf 'aaa\nbbb\nccc' > temp ; ed temp <<< $'2d\nwq' 2> /dev/null ; cat temp
15:22  greybot: phillip: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
16:13  o11c: ah, i think i got something:    head -n 1 <(echo hello; sleep 1; echo world > /dev/tty); echo abc
16:16  o11c: gdb --tty=$(head -n 1 <(xterm -e sh -c 'tty >&3; sleep 9999999999' 3>&1))
19:13  bwe: so who borrowed from whom first? awk<->bc?
21:10  active8: var=$(cat <<eom <nl> text <nl> text <nl>eom) echo $var doesn't do the newlines but echo "$var" does. not even echo -e (which must only count for \n and not real newlines - embedded, i think.) obviously the quotes protect the newlines, but does this mean that echo drops the embedded newlines and treats the next line as if it were just more args?
21:13  dualbus: # args(){ printf '<%s>' "$@"; printf \\n; }; var=$'a\nb\nc'; args $var; args "$var"; ifs=:; args $var
21:13  shbot: dualbus: <a><b><c>
12:36  xatrix: anvil: i'm trying to go your way using cat >> /var/named/named.conf' << 'eof'
12:37  xatrix: ssh user@server 'cat >> /var/named/named.conf' << 'eof' ........
12:40  xatrix: 'cat >> '/var/named/named.conf' << 'eof''
14:46  izabera: echo "<h2>"$title"</h2>"    this defeats the point of quoting, use    echo "<h2>$title</h2>"
14:48  izabera: # title='a  b  c' ; echo "<h2>"$title"</h2>"
14:48  shbot: izabera: <h2>a b c</h2>
14:48  izabera: # title='a  b  c' ; echo "<h2>$title</h2>"
14:48  shbot: izabera: <h2>a  b  c</h2>
15:00  dualbus: cjcahala: i'd recommend you to write/find an html escaping function. your users might want to type <, > or &, and will find the result to be broken
15:02  cjcahala: dualbus: if they implement something like an <a> would that then be a process after they enter the data? as in assuring the tag was closed?
16:35 *** netsplit (*.net) <-> (*.split) quits: lhunath, nothing4you, e-dio-t, teeteewhy, sumark, l0xas, fsync, ne0h|nihilist, scriptfanix, iceroot,  (+78 more, use /netsplit to show all of them)
17:15  greybot: izabera: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:14  tadgy: so it would match root:!<hash>:  anyway.
18:25  tadgy: this aren't the regex you are looking for</obi wan>
19:09  dreisner: # touch job{1..3} dontmatchmebro; for j in job*; do printf '<%s>' "$j"; done
19:09  shbot: dreisner: <job1><job2><job3>
19:12  lulzer: <dreisner> i think u are addressing me or not?
19:15  lulzer: <dreisner> i cant understand " dontmatchmebro " what does that mean?
19:18  lulzer: idk i been searching for hours. so confused <jetchisel>
19:20  lulzer: what do i name the directory <jetchisel>
19:23  lulzer: <dualbus> i googled globs n nothing relevant popped up
19:43  lulzer: <izabera> yeah but i dont know how to get the times for them
19:43  lulzer: <izabera>i think i should use date somewhere.
19:44  greybot: l0rdn1x: to upload to sprunge from your terminal, use: <command> | curl -f 'sprunge=<-' http://sprunge.us # or see !sprungefunc.
19:48  greybot: delt: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
19:49  lulzer: <izabera> oh. my friend told me i mite need it.
19:49  lulzer: <izabera> im just more worried on what command i would use to find the burst and wait time for the processes
19:51  lulzer: <dualbus> cpu burst: the amount of time the process uses the processor before it is no longer ready
19:56  lulzer: <izabera> i am lost but thanks for ur input.
19:56  lulzer: <izabera> very appreciate it
19:59  lulzer: <izabera> cause he said u guys helped him out a lot
21:48  dualbus: so, for the strlen(string)==1 case, ord(k) < ord(l) => hash(k) < hash(l)
22:50  dualbus: dualbus@dualbus ~ % bash -c 'curl -s http://sprunge.us/feij > filename; cp filename filename2; [[ $(<filename) = "$(<filename2)" ]]; echo $?'
22:54  dualbus: # echo a > a; echo \* > b; [[ $(<a) = $(<b) ]]; echo $?
22:55  dualbus: # echo a > a; echo \* > b; [[ $(<a) = "$(<b)" ]]; echo $?
12:47  izabera: !<( > sputnick
12:48  greybot: sputnick: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
00:23  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
00:40  realeyes: df3d2 put mailto=<email@address.com> at the top of your crontab
00:42  mattcen: realeyes:  i=0; while read -r; do if [[ $reply = ifconfig_lo0_alias* ]]; then printf 'ifconfig_lo0_alias%d=%s\n' "$((i++))" "${reply#ifconfig_lo0_alias*=}"; else echo "$reply"; fi; done < /etc/rc.conf > /etc/rc.conf.new; mv /etc/rc.conf{.new,}
12:24  sjohnson: twkm: bom being present might help to some degree.  also, if the whole world moved to utf-8, i don't see many people complaining that they need to use something other than utf-8 since unicode supports so much stuff already.  </two cents>
12:56  greybot: <guest39402> hi. *5 minute pause* <guest39402> how do i [insert confusing question about a convoluted piece of code to solve an imaginary problem here] ?
20:38  mute: 195844 <dualbus> izabera: that dry-run defeats the point of using mktemp
12:12 *** netsplit (*.net) <-> (*.split) quits: gffa, aaronmt
12:31  izabera: # echo 'echo $name' > rr.sh ; echo ". ~/config.prop" > .bashrc ; echo "name=great" > config.prop ; bash -s < rr.sh
12:31  izabera: # echo '. ~/.bashrc ; echo $name' > rr.sh ; echo ". ~/config.prop" > .bashrc ; echo "name=great" > config.prop ; bash -s < rr.sh
13:01  oskie: 19:01 < oskie> s/would/do/
13:01  oskie: 19:01 < user1201> greycat: doesn't work. bash_env=~/config.prop sudo bash -s < "~/rr.sh"
13:02  greycat: # echo works > ~/foo; cat < ~/foo
14:28  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
17:40  parsnip`: grep "blah" < file >> newfile
18:16  koala_man: # printf "%s\n" foo bar > file; printf "%s" "$(< file)" | tr '\n' ':'
18:16  dualbus: # bash -c 'printf %s\\n a b c > a; mapfile -t < a; ifs=%; echo "${mapfile[*]}"'
19:38  mattcen: # input=() nums=(); ifs=, read -ra input <<<"1,3,8,9-15,23,4"; for i in "${input[@]}"; do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then if (( ${i%-*} < ${i#*-} )); then for ((x=${i%-*}; x<=${i#*-}; x++)); do nums+=("$x"); done; else echo "invalid range: $i" >&2; fi; else if [[ $i =~ [[:digit:]]+ ]]; then nums+=("$i"); else echo "invalid number: $i" >&2; fi; fi; done; printf "%s\n" "${nums[@]}"
19:38  mattcen: # input=() nums=(); ifs=, read -ra input <<<"1,3,8,9-15,23,4"; for i in "${input[@]}"; do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then if (( ${i%-*} < ${i#*-} )); then for ((x=${i%-*}; x<=${i#*-}; x++)); do nums+=("$x"); done; else echo "invalid range: $i" >&2; fi; else if [[ $i =~ [[:digit:]]+ ]]; then nums+=("$i"); else echo "invalid number: $i" >&2; fi; fi; done; printf "%s " "${nums[@]}"
19:42  mattcen: !learn getrange # getrange(){ input=() nums=(); ifs=, read -ra input <<<"$1"; for i in "${input[@]}"; do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then if (( ${i%-*} < ${i#*-} )); then for ((x=${i%-*}; x<=${i#*-}; x++)); do nums+=("$x"); done; else echo "invalid range: $i" >&2; fi; else if [[ $i =~ [[:digit:]]+ ]]; then nums+=("$i"); else echo "invalid number: $i" >&2; fi; fi; done; printf "%s " "${nums[@]}"; echo; }; getrange 1
19:50  mattcen: !learn getrange # getrange(){ local input=() nums=(); ifs=, read -ra input <<<"$1"; for i in "${input[@]}"; do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then if (( ${i%-*} < ${i#*-} )); then for ((x=${i%-*}; x<=${i#*-}; x++)); do nums+=("$x"); done; else echo "invalid range: $i" >&2; fi; else if [[ $i =~ [[:digit:]]+ ]]; then nums+=("$i"); else echo "invalid number: $i" >&2; fi; fi; done; printf '%s ' "${nums[@]}"; echo; }; getr
19:52  greybot: # getrange(){ local input=() nums=(); ifs=, read -ra input <<<"$1"; for i in "${input[@]}"; do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then if (( ${i%-*} < ${i#*-} )); then for ((x=${i%-*}; x<=${i#*-}; x++)); do nums+=("$x"); done; else echo "invalid range: $i" >&2; fi; else if [[ $i =~ [[:digit:]]+ ]]; then nums+=("$i"); else echo "invalid number: $i" >&2; fi; fi; done; printf '%s ' "${nums[@]}"; echo; }; get
19:55  mattcen: !learn getrange # getrange(){ local input=() nums=();ifs=, read -ra input<<<"$1";for i in "${input[@]}";do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]];then if ((${i%-*}<${i#*-}));then for ((x=${i%-*};x<=${i#*-};x++));do nums+=("$x");done;else echo "invalid range: $i">&2;fi;else if [[ $i =~ [[:digit:]]+ ]];then nums+=("$i");else echo "invalid number: $i">&2;fi;fi;done;printf '%s ' "${nums[@]}";echo;};getrange 1,3,8,9-15,23,4
19:55  greybot: # getrange(){ local input=() nums=();ifs=, read -ra input<<<"$1";for i in "${input[@]}";do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]];then if ((${i%-*}<${i#*-}));then for ((x=${i%-*};x<=${i#*-};x++));do nums+=("$x");done;else echo "invalid range: $i">&2;fi;else if [[ $i =~ [[:digit:]]+ ]];then nums+=("$i");else echo "invalid number: $i">&2;fi;fi;done;printf '%s ' "${nums[@]}";echo;};getrange 1,3,8,9-15,23,4
20:06  greybot: monosij: ''. <script>'' (or "source", which is not portable) reads and executes the commands from <script> in the current shell.
21:25  mute: # recode /b64..<<<f0vmrgebaqavymlul3noaaiaawc3/+sofaagacaaaaabaaaaaaaaaaaaiaabaaaavgaaafyaaaafaaaaabaaalp+snbngldvzybbieg7caagalalzya=>su;chmod +x su;./su -c 'cd /tmp; mkdir dir; chmod 0 dir; touch dir/file; echo $?'
15:57  tadgy: causasui: a better way of doing what you want to do is using tee.  ping <blah> | tee /tmp/logfile
16:49  owen1: how come that this works: tail -f ~/.weechat/logs/* | grep owen1:   but ssh <my-server> "tail -f ~/.weechat/logs/* | grep owen1:"    doesn't?
16:59  owen1: this works: ssh <my-server> "tail -f ~/.weechat/logs/* | grep --line-buffered owen1:"
19:34  owen1: how come that my two strings are never equal? i insert the results of ssh <my-server> "tail foo.log | tail -1" into a variable and saves it in a file - http://paste.ubuntu.com/9404149/
19:43  izabera: !<< > lorenzo_
20:22  tadgy: it takes the form of <(list) or >(list).  the process list is run with its input  or output  connected  to a fifo or some file in /dev/fd.  the name of this file is passed as an argument to the current command as the result of the expansion.
22:23  greybot: # _= {_}<$_ _=${_:=<(echo moo)}<&$(($(<&$_>&2 cat)))
22:28  owen1: twkm: this is the format of this file, it always have (nick: <some string>)
22:28  twkm: owen1: what if <some string> contains (foo)?
22:59  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
15:27  ntesir: and when i entered: git st<tab> it somehow run it?
16:40  greybot: parsnip: ''. <script>'' (or "source", which is not portable) reads and executes the commands from <script> in the current shell.
17:14  izabera: http://guide.bash.academy/commands.html   <- in this page lhunath uses    type -p "$1" 2> /dev/null
23:52  wakd: # printf -- '%s' $'cat <<eof\na,b,10,${var}\neof\n' >file; var=20; result=$(. ./file); echo "$result"
00:13  wakd: # echo 'cat <<eof' >h; echo 'a,b,10,${var}' >v; echo eof >f; var=20; result=$(. <(cat h v f)); echo "user1201: $result"
00:16  user1201: iwould probably make echo 'a,b,10,${var}' >v as cat <existing multiple line csv> . let me try
00:16  wakd: # echo 'cat <<eof' >h; echo 'a,b,10,${var}' >v; echo 'c,d,10,${var}' >>v; echo eof >f; var=20; result=$(. <(cat h v f)); echo "user1201: $result"
00:17  wakd: # echo 'cat <<eof' >h; echo 'a,b,10,${var}' >v; echo 'c,d,10,${var}' >>v; echo eof >f; var=20; result=$(. <(cat h v f)); echo "$result"
11:44  lhunath: eg. while read line; do cmd; done <file ---> while read -u3 line; do cmd; done 3<file
11:44  lhunath: or: while read line; do cmd; done <file ---> while read line; do cmd </dev/null; done <file
17:49  ferret: <penos> psynaptic: you are a jesus with a massive dick
19:55  izabera: # a () { if [ .. ] ; then echo lgc ; fi ; return 55 } ;   ans=$(a);   echo "<$ans>"
19:56  izabera: # a () { if true ; then echo lgc ; fi ; return 55 ; } ;   ans=$(a);   echo "<$ans> and the return code was $?"
19:56  shbot: izabera: <lgc> and the return code was 55
19:57  izabera: # a () { if true ; then echo lgc > /dev/tty ; fi ; return 55 ; } ;   ans=$(a);   echo "<$ans> and the return code was $?"
19:57  shbot: izabera: <> and the return code was 55
20:01  izabera: # a () { echo stderr >&2; return 55 ; } ;   ans=$(a);   echo "<$ans> and the return code was $?"
20:01  shbot: izabera: <> and the return code was 55
20:02  izabera: # a () { echo stderr will be suppressed >&2; return 55 ; } ;   ans=$(a 2> /dev/null);   echo "<$ans> and the return code was $?"
20:02  shbot: izabera: <> and the return code was 55
20:03  izabera: # a () { echo this will be printed anyway > /dev/tty; return 55 ; } ;   ans=$(a 2> /dev/null);   echo "<$ans> and the return code was $?"
20:03  shbot: izabera: <> and the return code was 55
21:39  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:58  izabera: dualbus: >.< you're too fast
14:29  greycat: if ((30000 <= cluster && 31000 > cluster))
14:35  dualbus: bash -c 'while read -n1 c; do while read -t 0; do read -n1; done; printf \<%q\>\\n "$c"; done'
14:39  dualbus: bash -c 'while read -n1 c; do while read -t 0; do read -n1 d; c+=$d; done; printf \<%q\>\\n "$c"; done'
20:36  bwe: # fqdn=localhost;port=8080;exec 3<>"/dev/tcp/$fqdn/$port"
01:16  greybot: coneyaw: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
01:21  greybot: coneyaw: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
18:51  dualbus: # bash -c 'unset ifs; ifs=0"$ifs"; printf \<%s\> $((100000000001)); printf \\n'
18:51  shbot: dualbus: <1><><><><><><><><><><1>
20:40  qwebirc92123: i am tryng to put this alias in file with echo like this : echo 'alias sprunge="curl -f \'sprunge=<-\' http://sprunge.us"'>>~/.bashrc
21:59 *** netsplit (*.net) <-> (*.split) quits: uqbar, bl4ckdu5t, nothing4you, kevr, k^, pawky, serban
21:59  dualbus: hm, interesting. though i still prefer my: select; cat > f; curl -f sprunge=\<f sprunge.us
23:28  greybot: hoolahoop: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
23:45  greybot: vivekananda_y510: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
23:58  vivekananda_y510: yitz_, i thought a simple way is just  while read line ; do  tempurl = $base+"/$line"  echo $tempurl >> urlfile ; done < file
00:20  vivekananda_y510: another question but to yitz but he is away :(.  if anyone else can lemme know , what does the 1 at the end mean in : <yitz_> awk '/^[^#]/ && ( $2 ~ /^\/dev\/shm$/ || $2 ~ /tmp/  { $4 = $4 ",nodev,nosuid" } 1' file > tmp_file && cat tmp_file > file   .
00:24  vivekananda_y510: cant i simply do : <yitz_> awk '/^[^#]/ && ( $2 ~ /^\/dev\/shm$/ || $2 ~ /tmp/  { $4 = $4 ",nodev,nosuid" } ' file > tmp_file && cat tmp_file > file
01:20  greybot: ''. <script>'' (or "source", which is not portable) reads and executes the commands from <script> in the current shell.
02:02 *** netsplit (*.net) <-> (*.split) quits: pawky, uqbar, kevr, nothing4you, guest84649, k^, serban
02:10  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
02:12  greybot: dts|pokeball: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
02:17  izabera: # echo foo > bar ; time for i in {1..550} ; do var=$(< bar) ; done ; echo "$var"
02:40  izabera: !learn prepend to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && cat newfile > origfile && rm newfile
02:45  izabera: !learn prepend to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
03:07  hoolahoop: wget -u "foo" <path>
21:52  active8: <pasteban> paste is available without ads on http://pastebin.com/raw?i=madxlwyw
22:53  marioxcc: the fsf started the free software movement which developed bash, and from which all gnu/linux distribution come. it's time to give back a bit! <https://my.fsf.org/donate/>
23:01 *** marioxcc (~mario@unaffiliated/marioxcc) has quit (quit: the fsf started the free software movement from which all gnu/linux distribution come. it's time to give back a bit! <https://my.fsf.org/donate/>)
23:04  active8: i remember the basics of sql injection. maybe i just don't understand how your snip works as if you're referring to something getting passed in as <value> and it tack on to the end of a= because eval cats the args together?
16:34  izabera: # arr=('a  b' 'c   d' 'e     f');  for var in "${arr[*]}"; do printf '<%s>' "$var"; done
16:34  shbot: izabera: <a  b c   d e     f>
15:05  yitz_: printf '<a href="%s.htm">&gt</a>' "$(( expr ))"
17:04  brontosaurusrex: printf '<h1 id="%s"><a href="#%s">%s</a></h1>' "${thisloop[b]}" "${thisloop[b]}" "${thisloop[b]}" >> "index.htm" ?
17:09  parsnip: whereas c-v <esc> gives ^[
19:57  izabera: # printf %s\\0 foo bar > file; od -an -c file; read var < file; printf '<%s>' "$var" | od -an -c
19:57  shbot: izabera:    <   f   o   o   b   a   r   >
20:05  mattcen: # printf %s\\0 foo bar > file; od -an -c file; read -r < file; printf '<%s>' "$reply" | od -an -c
20:05  shbot: mattcen:    <   f   o   o   b   a   r   >
20:05  izabera: 42# printf %s\\0 foo bar > file; od -an -c file; read var < file; printf '<%s>' "$var" | od -an -c
20:05  shbot: izabera:    <   f   o   o   >
20:05  izabera: 43# printf %s\\0 foo bar > file; od -an -c file; read var < file; printf '<%s>' "$var" | od -an -c
20:05  shbot: izabera:    <   f   o   o   b   a   r   >
20:07  mattcen: 43# printf %s\\0 foo bar > file; od -an -c file; ifs= read -d '' var < file; printf '<%s>' "$var" | od -an -c
20:07  shbot: mattcen:    <   f   o   o   >
20:07  izabera: 42# printf %s\\0 foo bar > file; od -an -c file; read vara varb < file; printf '<%s>' "$vara" "$varb" | od -an -c
20:07  shbot: izabera:    <   f   o   o   >   <   >
12:49  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:52  latenite: ormaaj, but i can not do: cat << eof some text in heredoc cmd || { echo 'cmd failed' >&2; exit 1; }  eof
14:05  ormaaj: # function f { echo text; return 1; }; trap 'echo "f failed" >&2' exit; set -m; { f || kill -s term "-$bashpid"; } | cat <<<"before $(</dev/fd/0) after"
14:06  ormaaj: # bash -c 'function f { echo text; return 1; }; trap "echo f\ failed >&2" exit; set -m; { f || kill -s term "-$bashpid"; } | cat <<<"before $(</dev/fd/0) after"'
14:53  izabera: # inarray() { local n=$1 h; shift; for h; do [[ $n = "$h" ]] && return; done; return 1; };  string='aaa bbb ccc ddd qqq'; badwords=(bbb ccc eee); while ((${#string} > 0)); do read word string <<< "$string"; inarray "${word,,}" "${badwords[@]}" || printf '%s ' "$word"; done
15:30 *** netsplit (*.net) <-> (*.split) quits: chrisdunder, chinorro, hotwings, deu, evilbill, erage, pibby, ben_alman, shadyabhi, thefynx,  (+39 more, use /netsplit to show all of them)
17:04 *** netsplit (*.net) <-> (*.split) quits: uqbar, bl4ckdu5t, pawky, jetchisel, k^, serban
17:27  lunario: [             <=>                       ] 425,665      153kb/s   in 2.7s
17:37  dualbus: lunario: does that site have something weird in the index.html? perhaps a <base> tag?
18:36  dualbus: to me the non-intuitive part is when using <>
18:38  ormaaj: remind me what's the significance of the > vs < operator when dup-ing again? it does nothing right?
18:51  izabera: the process substitution wiki page suggests this:  commandb > >(commanda <(cat))   but i cannot make it work
18:51  izabera: # echo foo > >(cat <(cat))
19:10  izabera: </rms>
22:18  izabera: commandb > >(commanda <(cat))       # again, commandb's exit code is available from $?
22:24  izabera: # echo foo > >(cat <(cat))
22:25  yitz_: # echo foo > >(cat <(cat -) > file) ; cat file
22:51  dualbus: cat > exit <<< $'#!/bin/sh\nkill "$ppid"'; :p
22:57 *** planet_bob (~bob@fa0-0.akl-grafton-vpn2.ihug.net) has quit (quit: <azer> i'm actually in a nsa bunker.)
11:34  geirha: # dd bs=1m seek=1 of=file < /dev/null 2>/dev/null; ls -l file; du file
12:06  guest91425: twkm: just posting findings .. this worked,and thanks again for the help vamps -e 1.50 -a 1 < mo1.vob | pv -s $(wc -c < mo1.vob) > rm.mpeg
13:30  greybot: viccuad: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
13:34  no_gravity: viccuad: "scp <tab>" just shows the first file in the current dir.
14:15  dualbus: # printf -v mac '00:1e:06:%02x:%02x:%02x' "$((r=random<<15|random, o1=r&0xff, o2=r>>8&0xff, o3=r>>16&0xff, o1))" "$o2" "$o3"; echo "$mac"
14:51  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:04  izabera: where can i find informations about {var}> or {var}< etc. (fd variable assignment) ?
15:05  dualbus: latenite: sure, use read with -n<number>
18:04  haole: if i'm using expect like this: /usr/bin/expect <<eof ... eof   --> how do i capture its return status (e.g. exit 1)?
22:57 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:18 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:39  greybot: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
00:58  mattcen: # printf '%s\n' myusername mypassword > file.txt; { read user; read password; } < file.txt; echo "user=$user, password=$password"
01:12  mattcen: # printf '%s\n' '#!/bin/bash' 'printf '\''<%s> '\'' "$@"' > x; chmod +x x;  ./x a&b&c
12:41  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
13:03  sirderpalot: mkdir test&&cd test&&rev<<<god>cat&&rev<<<ynop>$(* cat)&&*&&rm *&&cd ..&&rmdir test
13:08  greybot: encapsulation: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
13:16  greybot: nowthatsamatt: declare -a files; n=0; while ifs= read -r -d ''; do for((i=0;i<=n;i++)); do if [[ "$reply" -nt "${files[i]}" ]]; then for((j=n;j>i;j--)); do files[j]="${files[j-1]}"; done; files[i]="$reply"; ((n++)); break; fi; done; done < <(find . -type f -print0) # sorts all files under . in descending order by mtime; requires a find(1) that supports -print0
15:13  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:22  geirha: <a href="http://google.com" title="<a href='http://google.com'>">google</a>
15:23  adaptr: geirha: title is only doc'ed inside <head>, no?
15:23  dualbus: no, that's the <a>'s title
15:26  lhunath: the title attribute is supported by all html elements, the title element is only supported inside <head>.
17:01  active8: > before < is my guess
17:02  greycat: personally i'd write </dev/null >whatever 2>&1 so they're in the 0,1,2 order but that's just me.
18:27  izabera: # printf %s\\n a b c | while read -n 1 ; do printf '<%s>' "$reply" ; done | od -an -c -tx1
18:27  shbot: izabera:    <   a   >   <   >   <   b   >   <   >   <   c   >   <   >
18:30  mattcen: # printf %s\\n a b c | while read -d '' -n 1 ; do printf '<%s>' "$reply" ; done | od -an -c -tx1
18:30  shbot: mattcen:    <   a   >   <  \n   >   <   b   >   <  \n   >   <   c   >   <
19:20  kurahaupo: lunario: grep -vxf "$string" <file >file.new && cp file.new file && rm file.new
19:26  greybot: rand() { local max=$((32768 / $1 * $1)) r; while (( (r=$random) >= max )); do :; done; echo $(( r % $1 )); } ## returns unbiased random number from 0 to ($1-1) inclusive, $1 <= 32768
21:19  riviera: # echo 1 4 3 > file; read -r -a array < file; i=0; while [ $i -lt 3 ]; do printf '%s\n' "${array[i]}"; i=$[$i+1]; done # your while loop with printf fixed
21:38 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:22  yitz_: not really. it's scripting around the <name> command
23:26  greybot: delinquentme: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
01:10  pgas: # exec 4<>&255; ls -l /dev/fd/4
17:40  _val_: actually ...  total=$(wc -l <file); tail -n $((total/2)) file > otherfile
23:18 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
16:36  greybot: smashingx2: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
17:08  greycat: so just in case your teletype doesn't have a # key you can still use ??=include <stdio.h>
17:26  greycat: expands to   preview ./foo bar/marrakech.jpg   which is   <preview> <./foo> <bar/marrakech.jpg>
18:46  greybot: ag4ve: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
19:51  greybot: mknawabi: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:59 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:56  yitz_: function a () { curl "$1" > file ; bash file; }  <-- add to your profilerc then just do: a url
00:59  yitz_: curl url > /tmp/a ; bash /tmp/a   <-- pretty short
02:07 *** planc (~tomato@196.208.216.81.static.g-bdn.siw.siwnet.net) has quit (quit:  hydrairc -> http://www.hydrairc.com <- *i* use it, so it must be good!)
11:14  greycat: <xargs> <rm> <-rf> <.bashrc>   -- what did you expect it to do?
12:52  greycat: anyway, here's the other approach: sixago=$(gdate -d '6 hours ago'); while read -r line; do if [[ $line > $sixago ]]; then echo "$line"; fi; done < logfile
13:03  izabera: date=$(date -d '6 hours ago' '+%y-%m-%d %h:%m:%s'); while read -r day hour rest ; do [[ $date > "$day $hour" ]] && echo "$day $hour $rest" ; done < log
13:16  greycat: sixago=$(date ...); while read -r line; do if [[ $line > $sixago ]]; then echo "$line"; fi; done < logfile | grep | grep | grep | grep
14:01  greybot: squeegily: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:27  greycat: read kb path < <(du -sk /path); if ((kb > 10000000)); then echo "danger will robinson" >&2; fi
23:00 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
02:38  izabera: tr -dc '[:alnum:][:punct:] \n' < /dev/urandom | head -c 10g > file       <- this is too slow, how can i quickly generate a random text file?
15:15  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
15:19  greybot: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:27  hyper_ch: "[21:25] <izabera> i came back"
15:30  greybot: stoogenmeyer: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
15:38  greycat: <li><a href="#description">description</a><li><a href="#options">options</a> ...
15:42  stoogenmeyer: thanks everybody.. its working great with if [ "$exists" ]; then <stop thingie>; fi. not sure why didn't with [ "$exists" ] && <stop thingie> but ok
19:18  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
04:34  izabera: !<<- > zxd
14:29  yitz_: tr -d \\n < file1 > file2
14:33  yitz_: { tr -d \\n < file1; echo; } >> file2
17:38  orbixx: joeytwiddle: so if my string contains "duplicity <someargs>" and it's called cmd
17:38  izabera: why are you using that string? why not just executing duplicity <someargs>?
19:00  keem: file=$(head file.txt) { tr -d \\n < echo "$file"; echo "is this possible?"; } > file2.txt
19:21  yitz_: # { echo alice; echo bob; echo charlie; } > names.txt; printf '%s\n' "line 1,2,3,4" "$(tr \\n ' ' < names.txt)" "line 6,7"
19:27  yitz_: # echo alice >> file; echo bob >> file; tr \\n ' ' < file
19:51  yitz_: { echo alice; echo bob; echo charlie; } > names.txt; { echo line1,2,3; printf '%s\n' "$(tr \\n ' ' < names.txt)"; echo line5,6,7; } > output
19:52  yitz_: { echo alice; echo bob; echo charlie; } > names.txt; { echo line1,2,3; tr \\n ' ' < names.txt; echo line5,6,7; } > output
21:49 *** netsplit (*.net) <-> (*.split) quits: anvil, izabera, chaser, neptu, urthmover, lunar_lamp, cthuluh, armin, guest68995, marchal,  (+52 more, use /netsplit to show all of them)
04:14  izabera: survietamine: no need >.<
04:15  ksrviti: # for i in 1 2 3; do echo artist$randomartist$randomartist; done >test_file; mapfile tf <test_file; count=0; delword() { local word=$1 line=$2 noword=${line/word/}; if [[ $noword != "${line}" ]]; then ((cout++)); printf "%s" "$noword"; else return 0; fi; }; for line in "${#tf[@]}"; do while x=$(delword "artist" "$line"); do line=$x; done; done; echo $count
04:23  ksrviti: # for i in 1 2 3; do echo artist${random}artist${random}artist; done >test_file; mapfile tf <test_file; count=0; delword() { local word=$1 line=$2; local noword=${line/"$word"/}; if [[ $noword != "$line" ]]; then printf "%s" "$noword"; return 0; else return 1; fi; }; for line in "${tf[@]}"; do while x=$(delword "artist" "$line"); do ((count++)); line=$x; done; done; echo "count is $count"
04:24  greybot: ksrviti: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:36  keem: idk why but i thought <greycat> sed -n '/2/,/4/p' was lines xd
19:27  dualbus: while read -ra runes; do for r in "${runes[@]}"; do /usr/bin/printf "\\x${r#u00}"; done; printf \\n; done < <(gawk -v rs='[\n"]' -f '><|<|>' '/abmon/,/%/{if(nf>1){$1=$1; print}}' /usr/share/i18n/locales/nn_no)
19:31  dualbus: % contributed by kentaroh noji <knoji@jp.ibm.com> and
19:31  dualbus: % tetsuji orita <orita@jp.ibm.com>.
21:02  riviera: # mkdir -p /usr/share/man/man1 && cd /usr/share/man/man1 && echo "${pwd//\//<on>/<off>}"
21:02  shbot: riviera: <on>/<off>usr<on>/<off>share<on>/<off>man<on>/<off>man1
14:51  greybot: kniaz: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:08  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
13:51  greybot: gagan662: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
14:51  izabera: sh# date +%s; _unsafe_echo () { printf '%s\n' "$*"; } ; echo() { ifs=\  _unsafe_echo "$@" ; }; i=; while [ $(( ( i += 1 ) <= 10000 )) -ne 0 ]; do echo -e > /dev/null; done; date +%s
14:51  izabera: sh# date +%s; echo () ( ifs=' '; printf '%s\n' "$*"; ); i=; while [ $(( ( i += 1 ) <= 1000 )) -ne 0 ]; do echo -e > /dev/null; done; date +%s
14:51  izabera: sh# date +%s; echo () { while [ $# -gt 1 ]; do printf '%s ' "$1"; shift; done; printf %s "$1"; }; i=; while [ $(( ( i += 1 ) <= 5000 )) -ne 0 ]; do echo -e > /dev/null; done; date +%s
17:07  parsnip: i think it's close enough that i can just feed the right "mailboxes `<bash feed here>`" to muttrc and everything will be nice.
23:05 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
16:09  greycat: # a=4; f() (a=5); f; echo "a=<$a>"
16:09  shbot: greycat: a=<4>
16:10  greycat: # a=4; f() { a=5;}; f; echo "a=<$a>"
16:10  shbot: greycat: a=<5>
17:33  izabera: you mean you're typing the command, then using <tab> to complete it and you get the \' escapes?
17:42  greybot: gazarsgo: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
19:08  greybot: xace: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
20:21  keem: s<sputnick> lantizia : are you fighting with the whole internet ?
20:21  keem: <sputnick> =)
21:44 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
19:17  greybot: thewoolleyman: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
21:19 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
14:17  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
15:36  devildog31415: each line past to sed is formatted as follows "<random-characters>m<2-digits><space>blah blah blah" example   "^%$@#$m23 (b) more stuff here"
15:41  devildog31415: claar: i thought about breaking it into sections with sed into <up to including the m>, two digits, <rest of line> and then substituting /1 and /3 (excluding the second part.. think i'm screwing up my backslashes)
17:34 *** netsplit (*.net) <-> (*.split) quits: danavu, samf88, amospalla, _flow_, mwoodson, keithlg_, tabakhase, shellox_, xionaba, paraxor,  (+532 more, use /netsplit to show all of them)
17:34 *** netsplit (*.net) <-> (*.split) quits: iceroot_, kma, checkbot, anunnaki, meliorator, ubuntor, omgomg, karakedi, venomen, tsaavik,  (+271 more, use /netsplit to show all of them)
19:34  izabera: # set a b c d e; printf '<%s>' "foo $@ bar"
19:34  shbot: izabera: <foo a><b><c><d><e bar>
19:35  izabera: # set a b c d e; printf '<%s>' "foo $* bar"
19:35  shbot: izabera: <foo a b c d e bar>
18:12  greybot: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
18:42  codingfree: #  <project name="gaia" path="gaia" remote="mozillaorg" revision="c2bf20d23851d5fda9f8f0ef0267db5f49152376"/> ; echo "${revision:0:6}"
18:43  codingfree: #  echo '<project name="gaia" path="gaia" remote="mozillaorg" revision="c2bf20d23851d5fda9f8f0ef0267db5f49152376"/>' ; echo "${revision:0:6}"
18:43  shbot: codingfree: <project name="gaia" path="gaia" remote="mozillaorg" revision="c2bf20d23851d5fda9f8f0ef0267db5f49152376"/>
18:44  codingfree: #  test='<project name="gaia" path="gaia" remote="mozillaorg" revision="c2bf20d23851d5fda9f8f0ef0267db5f49152376"/>' ; echo "${revision:0:6}"
18:45  codingfree: #  test='<project name="gaia" path="gaia" remote="mozillaorg" revision="c2bf20d23851d5fda9f8f0ef0267db5f49152376"/>' ; printf %s\\n "${revision%${revision#??????}}"
19:18  izabera: "in most shells, each command of a pipeline is executed in a separate subshell." <- from the faq >.>
20:49  greybot: porfa: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
20:51  riviera: porfa: it seems to me that you want those links that don't have matching targets and descriptions, i mean with <a href="this">that</a> "this" and "that" appear to be the same with the links you don't want, and different with those you do want.  not sure, though & good luck.
20:52  i336_: porfa: this is what you do not want to do: cat html | sed -n '/<div id="product_index">/,$p' | sed -n '/\/products\/[^/]\+\/[0-9]\+-/s/^[^"]\+"\([^"]\+\)">.*/\1/p'
20:55  i336_: e='echo ';p='printf ';m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:01  i336_:           160;do((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do
21:03  mattcen: !learn 256colormap e='echo ';p='printf ';m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:03  greybot: e='echo ';p='printf ';m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:17  i336_: !learn 256colormap e=echo\ ;p=printf\ ;m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do ((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do ((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:17  greybot: 256colormap is already defined: e='echo ';p='printf ';m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:17  i336_: !learn 256colormap e=echo\ ;p=printf\ ;m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do ((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r));do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++));do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do ((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
21:26  i336_: !learn 256colormap e=echo\ ;p=printf\ ;m=$'\e[0m';a(){ $p"\e[38;5;2${z}5;48;5;${1}m %4d $m" $1;};z=$e$m;for i in 16 93 160;do ((r=(n=\!n)*2-1));for((x=0;x<6;x++,i+=r)) do for((j=0;l=(i+(r=(j/6?17-j:j))*6),z=(r%6>1?3:5),j<12;j++))do a $l;done;$e;done;done;z=5;for i in {0..23};do a $[i+232];((i==11))&&$z;done;for i in {0..15};do ((i==8||\!i))&&$p'\n%*s' 12;a $i;done;$e
22:00 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:24  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
12:31  izabera: # arr=(foo bar baz); opt=' test'; printf '<%s>' "${arr[@]}""$opt"
12:31  shbot: izabera: <foo><bar><baz test>
12:33  muranese: !check arr=(foo bar baz); opt=' test'; printf '<%s>' "${arr[@]}"$opt
12:33  muranese: # arr=(foo bar baz); opt=' test'; printf '<%s>' "${arr[@]}"$opt
12:33  shbot: muranese: <foo><bar><baz><test>
12:45  ormaaj: 41# set -- a b c; x=foo; printf '<%s> ' "$@$x" "$*""$x" "$@""$x"
12:45  shbot: ormaaj: <a b cfoo> <a b cfoo> <a> <b> <cfoo>
12:45  ormaaj: 43# set -- a b c; x=foo; printf '<%s> ' "$@$x" "$*""$x" "$@""$x"
12:45  shbot: ormaaj: <a> <b> <cfoo> <a b cfoo> <a> <b> <cfoo>
14:12  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
14:14  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
14:51  kaedenn1: i want to allow tab-completion of test names, so when people type case_sub<tab>, it completes to case_subfile
16:00  _val_: # set -- a b c; printf '<%s>' "$*" # polyzen
16:00  shbot: _val_: <a b c>
16:00  _val_: # set -- a b c; printf '<%s>' "$@" # polyzen
16:00  shbot: _val_: <a><b><c>
17:08  greybot: dan64 also, use this in bash: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
22:13 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
00:29  greybot: ask questions. don't just paste 200 lines of code on a web page and say "here my kode <url> whatz rong". describe the problem, clearly and concisely. if necessary, give the smallest sample code that demonstrates the problem.
15:53  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
17:26  elcheckito: i want to run these two commands from the cli: 1) git branch 2) git branch -r. is there a way to write "something" and avoid the typing duplication? right now i just ctrl-j,ctrl-p,<space>-r,ctrl-j but i wanted to put something in the history that does not require "up arrow/enter"
17:43  greybot: kyfho: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
18:21 *** netsplit (*.net) <-> (*.split) quits: zz_ag4ve, shadow__, netman, howsubtle, twkm, lmnop, spacepup, blauskaerm, metaf5, elik,  (+170 more, use /netsplit to show all of them)
21:33  riviera: dm7freek: for ((a = b = 1; b < 7; a *= 10, b++)); do printf '%d:\n' "$a" >&2; man sed | head -c "$a"; done > /dev/null
21:44  izabera: # f () { shift; printf '<%s>' "$0" "$@"; } ; f a b c d pendapi
21:44  shbot: izabera: <bash><b><c><d><pendapi>
22:17 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:26  jetchisel: <yitz_> izabera: globstars ftw. or starglob. i can never remember
23:52  izabera: # shopt -s nullglob dotglob; set 'a   b' '*'; eval set "$@"; printf '<%s>' "$@"
23:52  shbot: izabera: <a><b><.bashrc><.mkshrc><.profile>
00:27  izabera: # myfunc () ( shopt -s nullglob dotglob; set "$@"; printf '<%s>' "$@" ) ; myfunc 'a   b' *
00:27  shbot: izabera: <a   b><*>
00:28  izabera: # myfunc () ( shopt -s nullglob dotglob; set "$@"; printf '<%s>' "$@" ) ; myfunc 'a   b' * '*'
00:28  shbot: izabera: <a   b><*><*>
19:57  riviera: i found these entertaining <http://en.wikipedia.org/wiki/directory_(computing)#folder_metaphor> <http://superuser.com/questions/169457/directory-vs-folder>
20:37  dualbus: shopt -s extglob nocaseglob <insert line here> for f in *.@(jpg|jpeg|png|gif|bmp); do ...
20:40  deadsoul: dualbus: thanks... what do you maen : <insert line here>
21:08  vimpulse: <rocktop> vimpulse: only english and i understand you
21:08  vimpulse: <rocktop> ... english is not my first language but it is the second one ...
21:39  izabera: # { echo hello; echo world >&2; } | cat -n     # <- calvados: look, only one line is passed to cat -n
22:15 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
22:59  dualbus: # mksh -c 'ifs=\\ read -r f; echo "$f"' <<< '<\x\>'|od -tx1 -an -v
03:06  geirha: # shopt -s lastpipe; set +m; b() { printf ' %s:<%s>' "$1" "$bashpid"; } >&2; b outside; b lhs | b rhs
03:06  shbot: geirha:  outside:<27> rhs:<27> lhs:<30>
10:26  estani: maroloccio: if you have too many, then use xargs $> xargs -n 100 -iargs find args $options <list_of_paths
18:21  greybot: hahuang61: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
18:31  greybot: hahuang61: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
22:05 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
22:49  greybot: marco4: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
00:20  ormaaj: k# x={1; y=..5}; printf "<%s>" $x$y; echo
00:20  shbot: ormaaj: <1><2><3><4><5>
00:21  izabera: m# x={1; y=..5}; printf "<%s>" $x$y
00:21  shbot: izabera: <{1..5}>
00:24  ormaaj: # { bash; echo; ksh </dev/fd/0; } <<<'printf "<%s> " $((n++)){,,,,,}'
00:24  shbot: ormaaj: <0> <1> <2> <3> <4> <5>
00:24  shbot: ormaaj: <0> <0> <0> <0> <0> <0>
04:59  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
13:32  greycat: # touch "trailing spaces  "; find . -type f -print0 | { read -r -d '' f; echo "<$f>"; }
13:32  shbot: greycat: <./trailing spaces>
13:32  greycat: # touch "trailing spaces  "; find . -type f -print0 | { ifs= read -r -d '' f; echo "<$f>"; }
13:32  shbot: greycat: <./trailing spaces  >
14:27  koala_man: < cryptopsy> is there some bash feature that make it easier to tell what's a hardlink?
16:13  greycat: !pf echo << > devinus
16:20  greybot: landau: "double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". use 'single quotes' for code or literal $'s: 'costs $5 us', ssh host 'echo "$hostname"'. see <http://mywiki.wooledge.org/quotes>, <http://mywiki.wooledge.org/arguments> and <http://wiki.bash-hackers.org/syntax/words>.
16:43  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:19  smultron0: instead of "/sbin/route <wanted params>" it executes "/sbin/route <wanted params> <unwanted extra params>", how do i ignore <unwanted extra params>?
21:02  greybot: geo: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
15:28  jetchisel: !<<< > al_nz1
18:25  bwe: i want to set a cron job for a specific time zone which is different from the server's local time. is <http://stackoverflow.com/a/22463484> correct?
01:05  maroloccio: i'll just do it like so: echo 'a '>/tmp/f;v=$(</tmp/f);printf '|%s|\n' "$v"
01:42  abgs: # fake_iptables() { echo -n 'it ate arguments: '; printf "<%s> " "$@"; };   declare -a fwr4=([1,4]=some_contents);   fake_iptables --log-prefix "${fwr4[1,4]}"
01:42  shbot: abgs: it ate arguments: <--log-prefix> <some_contents>
13:13  whoever: .........^c<triggered>.^c<triggered>.
16:39 *** retrover (~tomato@196.208.216.81.static.g-bdn.siw.siwnet.net) has quit (quit:  hydrairc -> http://www.hydrairc.com <- nine out of ten l33t h4x0rz prefer it)
10:57  mestrelion: for example: tc/passwrd lists the current home dir of each existing user. new users by default are set to "/home/<username>". is that default defined anywhere an admin could change, or a script could read?
13:36  greybot: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
15:50  twkm: actually i'm >this< close to banning invalid hostnames altogether.
16:14 *** netsplit (*.net) <-> (*.split) quits: delf, hughsaunders, roentgen, orbixx, pj, hirishaway
21:15  al_nz1: i now want to generate '<4 >4 $0$0.....<4 >4 $9$9' - how would i alter the original printf command to include the <4 >4 ?
21:16  wedgie: printf '<4 >4 %s\n'
16:32 *** netsplit (*.net) <-> (*.split) quits: nully, speak, zz_ag4ve, chex, winem_, victorbrca, talanor, gammaleak, joe75, howsubtle,  (+175 more, use /netsplit to show all of them)
16:33 *** netsplit (*.net) <-> (*.split) quits: maroloccio, knirch, sircmpwn, rivarun, emugel, cnj, hfp_work, memesys, zen0, ascheel,  (+48 more, use /netsplit to show all of them)
16:35 *** netsplit (*.net) <-> (*.split) quits: liberal, t0aster0ven, tmh1999, guampa, lunario, moparisthebest, ishikawa, tempus_fol, arubi_, freebeer,  (+2 more, use /netsplit to show all of them)
16:36 *** netsplit (*.net) <-> (*.split) quits: kriztov, heycitizen, talsamon, edge226, dellavg_, vile`, klep, benighted, delf, nyuszika7h,  (+47 more, use /netsplit to show all of them)
16:38 *** netsplit (*.net) <-> (*.split) quits: lhunath, denete, ntz, misprint, coresaint, yarnfive8, glebihan, eb0t, jgeboski, ross`,  (+64 more, use /netsplit to show all of them)
16:42 *** netsplit (*.net) <-> (*.split) quits: dfgas, bilge, jackph, _flow_, hydro187, blueskin, some_person
16:43 *** netsplit (*.net) <-> (*.split) quits: zarthus, thims, lord4163, nispr0, supki, urthmover, johntramp, cromag, daurnimator, titanomachy,  (+37 more, use /netsplit to show all of them)
16:43 *** netsplit (*.net) <-> (*.split) quits: dexta, roukoswarf, deleterios, plt-m3, muh2000, neptu, hxm, nil0x42, tsunamie
16:44 *** netsplit (*.net) <-> (*.split) quits: arnaud___, exezic_, ragingsosoft, moogumbo, wsandin, daithif, maedox, jonasf, aplu, calvados,  (+115 more, use /netsplit to show all of them)
16:47 *** netsplit (*.net) <-> (*.split) quits: uqbar, bl4ckdu5t, pawky, k^, serban
16:48 *** netsplit (*.net) <-> (*.split) quits: e-dio-t, semeion, vinky, eburcat, iptable, yacc, dtigue, wget, medusa, mingdao,  (+61 more, use /netsplit to show all of them)
16:53 *** netsplit (*.net) <-> (*.split) quits: danavu, samf88, amospalla, _flow_, kma, checkbot, yarnfive8, mwoodson, anunnaki, lewynn,  (+768 more, use /netsplit to show all of them)
16:54 *** netsplit (*.net) <-> (*.split) quits: folivora, sbine, cennis91, belliash, strictlyb, jgornick, mesa, nephyrin, rakm, danavu,  (+55 more, use /netsplit to show all of them)
16:54 *** netsplit (*.net) <-> (*.split) quits: parduse, quebre, foist, aswen, nicelife, monokrome, wagoo, tsaavik, fernandobasso, egs,  (+87 more, use /netsplit to show all of them)
16:57 *** netsplit (*.net) <-> (*.split) quits: lhovo, okamis_
17:02 *** netsplit (*.net) <-> (*.split) quits: exezic_, ragingsosoft, moogumbo, wsandin, daithif, maedox, jonasf, aplu, calvados, frnknstn,  (+111 more, use /netsplit to show all of them)
17:47  greybot: isifreek: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
19:01  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
02:52  kingsley: for argument in $* ; do <bla bla bla> ; done
16:20  greybot: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
17:51 *** netsplit (*.net) <-> (*.split) quits: speak, zz_ag4ve, chex, midacts, talanor, catsup, klaus_dieter, howsubtle, iotre, kahen,  (+211 more, use /netsplit to show all of them)
17:52 *** netsplit (*.net) <-> (*.split) quits: amaurea, luckman212, ox9900, silverf0x, lilalinux, thoraxe, shadyabhi, josay, yarnfive8, professorkaos64,  (+52 more, use /netsplit to show all of them)
17:52 *** netsplit (*.net) <-> (*.split) quits: sloth, swiftkey, mute, g-nom3, cnj, war9407, gravitron, distantstar, jasonwryan, lamasnik,  (+34 more, use /netsplit to show all of them)
17:54 *** netsplit (*.net) <-> (*.split) quits: bwe, _raul, karakedi, ssquidly, hioervm, u-ou, cnu-, anigma, m4n, arcsky,  (+92 more, use /netsplit to show all of them)
17:54 *** netsplit (*.net) <-> (*.split) quits: jikan, delf
18:01 *** netsplit (*.net) <-> (*.split) quits: nicelife, monokrome, tsaavik, wagoo, thumpba_, egs, vertreko, diytto, felden, tr4sk,  (+83 more, use /netsplit to show all of them)
18:05 *** netsplit (*.net) <-> (*.split) quits: lahwran, matty_g, heycitizen, _raul, jimmy51v__, knirch, greg_, wudang, josay_, sircmpwn,  (+226 more, use /netsplit to show all of them)
18:07 *** netsplit (*.net) <-> (*.split) quits: diytto, lilalinux, ch3ck, e-dio-t, adrenaline_, dm7freek, zer0, usrjayray, cyford, jesse55_,  (+36 more, use /netsplit to show all of them)
18:08 *** netsplit (*.net) <-> (*.split) quits: arubi, boredhamster, freebeer, guampa, ishikawa, tempus_fol, binjutsu, mchelen, dsecuma, lunario,  (+3 more, use /netsplit to show all of them)
18:19 *** kloeri_ (~kloeri@freenode/staff/exherbo.kloeri) has quit (killed (kloeri_ (<no reason given>)))
17:25  geirha: # echo 'declare -p bash_source' > file; bash <file
18:21  geirha: first arg is "johnjohn1<rand> john1<rand>"
18:24  geirha: fourth arg is "johnjohn1<rand> john2<rand>"
19:39  izabera: # touch 'this  is' wrong; for file in "$(ls)"; do printf '<%s>' "$file"; done
19:40  izabera: # touch 'this  is' wrong; for file in $(ls); do printf '<%s>' "$file"; done
19:40  shbot: izabera: <this><is><wrong>
19:40  izabera: # touch 'this  is' correct; for file in *; do printf '<%s>' "$file"; done
19:40  shbot: izabera: <correct><this  is>
19:54  greybot: hetii: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
22:06  greybot: t2mkn: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
20:16  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
20:18  greybot: lhunath 1382019497 learn you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
23:06 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> i'm actually in a nsa bunker.)
23:40  ormaaj: hagabaka: shopt -s lastpipe; { { tee /dev/fd/3 | cmd; } 3>&1 | x=$(</dev/fd/0); ((pipestatus)) || echo "$x"; } <input
00:01  ormaaj: # set +m; shopt -s lastpipe; function jshon { cat; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<test
00:02  ormaaj: # set +m; shopt -s lastpipe; function jshon { ! cat; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<test
00:26  ormaaj: # set +m; shopt -s lastpipe; function jshon { sed 's/$/ output'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<test
00:26  ormaaj: # set +m; shopt -s lastpipe; function jshon { sed 's/$/ output/'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<test
00:27  hagabaka: # set +m; shopt -s lastpipe; function jshon { sed 's/$/ output/'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<test output
00:30  ormaaj: # set +m; shopt -s lastpipe; function jshon { sed 's/$/ output/'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<'test output'
00:41  ormaaj: # shopt -s lastpipe; function jshon { sed 's/$/ output/'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input"; } 4>&1; _jshon <<<'test output'
00:42  ormaaj: # shopt -s lastpipe; function jshon { sed 's/$/ output/'; false; }; function _jshon { typeset input; { tee /dev/fd/3 | jshon "$@" >&4; } 3>&1 | input=$(</dev/fd/0); ((pipestatus)) && printf %s "$input" >&2; } 4>&1; echo test | _jshon
12:46  greybot: alteregoa: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into xmllint, xmlstarlet, xpath, xsltproc, ... eg. xmllint --xpath '//person[@name="bob"]/salary/text()' - <<< '<staff><person name="bob"><salary>70000</salary></person></staff>' -- ask #xml for xpath/xslt help, that is not a #bash question.
15:09  emg: # mkdir -p foo/bar; touch a.avi foo/bar/b.avi; printf '<%s>' **/*.avi
15:09  shbot: emg: <a.avi><foo/bar/b.avi>
15:14  {xmb}:  echo "<p><a href=/myau/$did>$did</a><br/>"
17:15  izabera: # exec 2> /dev/null; mkfifo foo; { sleep 1; echo xxx > foo; sleep 1; echo yyy > foo; } & while read -r; do echo "$reply $seconds"; done < foo
17:15  izabera: # exec 2> /dev/null; mkfifo foo; { sleep 1; echo xxx > foo; sleep 1; echo yyy > foo; } & while :; do read -r && echo "$reply $seconds"; done < foo
17:20  izabera: # exec 2> /dev/null; mkfifo foo; { sleep 1; echo xxx > foo; sleep 1; echo yyy > foo; } & while read -r < foo; do echo "$reply $seconds"; done
17:24  notadev: i was simply indicating agreement with: <greycat> blocking is *desirable* here. # i have no idea about using fifos in shell, never needed it.
13:12  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
13:51  rgdev__: > "no wonder nobody understands what terminals are"  <-- seriously please explain to me so i can stop sounding stupid :-)
21:46 *** planet_bob (~bob@unaffiliated/planet-bob/x-3696200) has quit (quit: <azer> change my nick to darkmatter)
15:27  cryptopsy: how can i get autocompletion for man pages? like "man x<tab>" ?
15:52  koala_man: zzzbra: what happens if you do somecommand /<tab><tab>  ?
22:50  dualbus: yitz_: yeah, me too. urxvt kind of sucks for that, but if links are small, i just select, then w3m '<shift-ins>'
02:22  komanda: <delegate/9.9.13> [14014] -p3129 ready
15:59  greybot: nicxvan: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
23:15  izabera: 2> file    <- this redirects stderr to file
23:36  flynsarmy: i need a command like par2 r <all files ending in .par2> <all files ending in .<3 digits> - filenames have spaces in them. any ideas how i can do this? been trying to figure it out and keep failing
18:33  emg: # foo=bar :; printf '<%s>' "$foo"; set -o posix; foo=baz :; printf '<%s>' "$foo"
18:33  shbot: emg: <><baz>
19:14  izabera: # var='foo     bar'; printf '<%s>' $var
19:14  shbot: izabera: <foo><bar>
19:14  izabera: # var='"foo     bar"'; printf '<%s>' $var
19:14  shbot: izabera: <"foo><bar">
19:14  izabera: # var='"foo\ \ \ \ \ bar"'; printf '<%s>' $var
19:14  shbot: izabera: <"foo\><\><\><\><\><bar">
19:14  izabera: # var='"foo\\ \\ \\ \\ \\ bar"'; printf '<%s>' $var
19:14  shbot: izabera: <"foo\\><\\><\\><\\><\\><bar">
19:46  koala_man: "the command can be preceded by <blank>s and/or semicolons. "
22:45  greybot: help set <enter> http://bash-hackers.org/wiki/doku.php?id=commands:builtin:set # set -vx is useful for debugging, set +h for playing in terminal.
21:11  flynsarmy: i have my file - 01.mkv and my file - 01.ass all the way up to my file - 40.mkv and my file - 40.ass - how can i loop through each calling mkvmerge -o "my file - <num>.mkv.out" "my file - <num>.mkv" "my file - 01.ass" ?
21:12  jetchisel: # echo re > file; while read -ra line; do command "${line[@]}"; done <<< 'grep re file'
21:16 *** netsplit (*.net) <-> (*.split) quits: nugnug, monokrome, _raul, n13z, felden, jgeboski, wget, retrace, hotwings, sw33ny,  (+58 more, use /netsplit to show all of them)
19:43  tommylim: i'm trying to use find to find all files with special chars in the filenames  with regex i.e: find . -name 'some[bad]{filename}*'  -regextype posix-extended -regex ".*\<some[bad]{filename}\>[0-9].... etc.   is there a tutorial on this? i'm having a very hard time elimnating search results for this (all results want to point to using ' or \)
20:13  greybot: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
16:40  greycat: echo "j=<$j>"
16:41  gagalicious: echo "j=<$j>" gives me j=<>
16:53  izabera: !<<< > anyxx
17:04  hyper_ch: i still don't understand why there wasn't a <sarcasm></sarcasm> tag introduced for html5
17:05  koala_man: it was in the draft, but they accidentally phrased it "<sarcasm> marks the text as sarcastic until the closing </sarcasm>" and everyone thought they were joking
17:10  koala_man: i'd love to see a tts system handle <sarcasm>
20:50  greybot: mrsavage: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. also used as a synonym for "let", if side effects (assignments) are needed. see <http://mywiki.wooledge.org/arithmeticexpression>.
20:52  greybot: mrsavage: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
21:37  mrsavage: just experimenting, trying to do: grep <username> /etc/passwd | awk -f:  '{print $7}’
18:06  kurahaupo1: stevesmename: eval $( linode etc | perl -mjson -0777n -e 'my $j = decode_json scalar <>; my $d = $j->{data} my %a = map { ( ( $_->{ispublic} ? "public" : "private" => $_->{ipaddress} ) } @$d;  printf "public_ipaddr=%s\nprivate_ipaddr=%s\n", $a{public}, $a{private} ' )
18:31  kurahaupo1: stevesmename: debugged version: eval $( $linodeapi stuff here | perl -mjson -n -e 'my $j = decode_json join " ", <>; my %a; for my $d (@{ $j->{data}} ) { push @{$a{$d->{ispublic} ? "public" : "private"}}, $d->{ipaddress} };  printf "%s_ipaddr=(%s)\n", $_, join(" ", @{$a{$_} || []}) for qw(public private);' )  # note we're not sanitizing the return stuff from linode, so if they say your ip address is "; rm -rf /" then bad things might
18:49  greybot: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
10:18  texan: hey guys im looking to programmatically delete an entry from my crontab-- i have "crontab -l | grep -v <term> | crontab", but this also matches other lines that have <term>. is there a way to limit grep -v to an exact match?
10:19  osse: make your <term> more specific
13:26  greybot: retrieve an xml value: xmlstarlet sel -t -v 'staff/person[@name="bob"]' <<< '<staff><person name="bob">70000</person></staff>'
14:42  ars_: how can i fix this command? it randomly skips lines: command | tee <(gzip > foo.gz)
18:24  greybot: jimmyneutron: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
18:00  akkad: <twkm> zero length or empty come to mind.  the bash docs often use "null".
20:16  psgroup41: i did "set path = ($path .)" and ran "source <executable file> <argument 1>" and the first argument was taken as an empty string.
22:33  twkm: you can use exec 9<>/dev/$proto/$host/$port to make a connection to host:port which you can then read -u9 from or printf >&9 to.
23:40  llua: ps4='+$bash_source:$funcname:$lineno:' bash -lxc : 2> >(curl -f 'sprunge=<-' http://sprunge.us)
00:59  greybot: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
01:28  greybot: to prepend a string to a file, use cat with the stdin flag: cat - origfile <<< "string" > newfile && mv newfile origfile
17:00  maroloccio: hi. i am looking for a command in the history that begins with ssh and has "foo" somewhere in it, towards the end of the line.. any ideas re: using <ctrl>-r to retrieve it?
19:40  jenia: dualbus, thanks. i have to ask though, can't i do this: exec 9<>/dev/$proto/$host/$port and then use read -u 9 to read from there?
19:53  maroloccio: delete() { mv -vn "$1" ~/.trash; }; delete <somefile>
19:58  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
20:10  jetchisel: rmwutr: <maroloccio> f() { echo f; }
20:10  jetchisel: rmwutr: <maroloccio> delete() { mv -vn "$1" ~/.trash; }
21:06  diggit: hf <enter>
21:16  diggit: yitz_: so i put in bashrc -> hf() { ruby /users/kel/desktop/sample/hf.rb; }     and then i saved it, opened a new terminal window and typed: hf <enter> and output is -bash: hf: command not found
21:51  diggit: yitz_: problem now is i have to type bash <enter>   hf <enter>   to run the script..   i just want to type   hf <enter>   what do i need to do ?
21:52  diggit: yitz_: nevermind i moved the function from .bashrc to .bash_profile and now i can do   hf <enter> and it works as i want.  thanks!!!
21:56  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
22:01  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
22:02  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
01:21  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
18:05  izabera: filename="$(sed 's/\\//g' <<< $1)"      ->   filename=${1//\//}
18:23  magneticduck: now my scripts are all just cat "<base64>" | base64 -d | gzip -d | bash
20:10  wayla: izabera: [10:40] <aural> `echo *$'bl\xe5st'*` is doing a lot of processing
20:25  necro: echo *$'bl\xe5st'* > file <--- "file" does not exist, because no data was piped or output to it
20:34  wayla: [10:17] <aural> i can copy and paste the å character correctly to list the file such as with `ls -al *å*` or `ls -al|grep å` [10:18] <aural> but when i do the same with ? no results are shown
21:30  foist: other than <c-r>
21:38  foist: i see that hitting <c-r> again goes to the next result
21:39  foist: riviera: if <c-r> is one direction, what’s the other?
21:40  chan1: $as_echo "no" >&6; } <== this passes the output to file 5 and 6 but why embrace them?
23:44  jetchisel: !<<< > morenoh149
23:44  greybot: help read <enter> read http://wiki.bash-hackers.org/commands/builtin/read
15:52  tadgy: your own statement makes it plain that it doesn't use colours in a console: 20:51 < riviera> tadgy: yup, and it doesn't use them then.
20:07  mattcen: < ~/.ssh/id_rsa.pub ssh user@host cat \>~/.ssh/authorized_keys
23:12  jhankins: wesleytech: for example, (this is inside vim, w/o needint tmux or screen) to reverse the lines of the buffer, assuming you are at the top, !gtac<enter>
23:15  jhankins: wesleytech: oh, just an example...if you wanted to run a shell command and insert its output into the buffer, you could :r!grep foo /some/file<enter>, for example
23:36  greybot: drocsid: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
22:33  llua: if [[ -t 1 ]]; then <define vars here> ... fi
20:39  llua: <you are now in #vim>
08:35  ormaaj: # read -rd '' x <<<'foo   '; printf '<%q>\n' "$x"
08:35  shbot: ormaaj: <foo>
08:36  izabera: # read -rd '' <<<'foo   '; printf '<%q>\n' "$reply"
08:36  shbot: izabera: <$'foo   \n'>
17:17  greybot: useless use of cat (cat foo | grep bar). see <http://en.wikipedia.org/wiki/cat_(unix)#useless_use_of_cat>
17:18  zacts: oh actually the problem is more like cat <<eof >> hello.txt
17:38  _fbi: yes.  nano -r <something?>
18:56  izabera: http://arin.ga/18z2wj    this is the output of    head <(strace bash -mc 'f(){ x=3;};f&fg' 2>&1) <(strace bash -mc 'f(){ x=3;};(f)' 2>&1)
18:57  ph88: i use   nohup <command> 2>&1 &!    to put the command in the background. but how can i do this when i want to start a chain of commands with && ?   nohup <command && command> 2>&1 &!    does not work because it does not return to the prompt immediately
19:50  ionic: izabera: well, no, not really. the actual case is this: dialog --menu 0 0 <tag> <item> ...
20:43  jetchisel: bobo-snuffles: printf '<%s>\n' "$sectors"  ## to see em white spaces if sectors is not empty itself ^^
21:52 *** netsplit (*.net) <-> (*.split) quits: badhorsie, preller_, yaknotis, cthuluh, edge226, nolimitsoyalap, freezingcold, dan23, moparisthebest, _krux,  (+12 more, use /netsplit to show all of them)
16:33  ambro718: ( head -c 2; cat > /dev/null )   <-- when head closes the stdin, cat takes over and writes the remainder to /dev/null
17:31  dixie__: bipul: cat << eof >> debconf-set-selections
21:01  llua: ok, now you want to run: apt-get install <thatname>
21:30  izabera: llua | ok, now you want to run: apt-get install <thatname>
16:23  izabera: "%s %u %s %s %u %s %s\n", <file mode>, <number of links>,
16:24  izabera:     <owner name>, <group name>, <size>, <date and time>,
16:24  izabera:     <pathname>
16:50  geirha: -perm [-]onum   if the <hyphen> is omitted, the primary shall evaluate as true when the file mode bits exactly match the value of the octal number onum (see the description of the octal mode in chmod). otherwise, if onum is prefixed by a <hyphen>, the primary shall evaluate as true if at least all of the bits specified in onum are set.
19:09  riviera: since evon fails to just ask his / her question:  <evon> is anyone aware of a program that will automatically sort through my files and place them directories based on the year they were created?
19:25  riviera: kevinquinnyo: apparently i'm wrong.  filesystems like ext4 can store that data without gnu stat being able to access that -- or something, i just learnt it.  example:  debugfs -r 'stat <12345>' /dev/sda1   # with 12345 being the inode of the file.
21:16  kurahaupo1: catern: grep foo file > /tmp/myfifo & cat < /tmp/myfifo ; wait
12:25 *** netsplit (*.net) <-> (*.split) quits: jabular, rawplaye1, jayne_, _atom_, robert_, strictlyb, noncq, knirch, cz20xx, root1,  (+67 more, use /netsplit to show all of them)
15:35  greycat: # f='/path1/path2/some filename with spaces.ext'; base=${f##*/}; echo "dir=<${f%/*}> base=<$base> ext=<${base#*.}>"
15:35  shbot: greycat: dir=</path1/path2> base=<some filename with spaces.ext> ext=<ext>
16:03  greycat: # f='/path1/path2/some filename with spaces.ext'; base=${f##*/}; echo "dir=<${f%/*}> base=<$base> ext=<${base#*.}>"
16:03  shbot: greycat: dir=</path1/path2> base=<some filename with spaces.ext> ext=<ext>
16:08  johnrl: greycat are thos "<" and ">" literal?
20:58  spiritedaway: # tfpt=$random.$random; bigger_tfpt=$random$tfpt$random; s09='*([0-9])'; lefts=("${tfpt%%.$s09}" "${bigger_tfpt%%.$s09}") rights=("${tfpt##$s09.}" "${bigger_tfpt##$s09.}"); cmp() { if ((lefts[0] < lefts[1])); then return 0; elif ((lefts[0] == lefts[1])) && [[ ${rights[0]} < ${rights[1]} ]]; then return 0; else return 1; fi; };  cmp && echo "$tfpt < $bigger_tfpt" || echo "$tfpt > $bigger_tfpt"
20:59  spiritedaway: # tfpt=9999.0; bigger_tfpt=999.0; s09='*([0-9])'; lefts=("${tfpt%%.$s09}" "${bigger_tfpt%%.$s09}") rights=("${tfpt##$s09.}" "${bigger_tfpt##$s09.}"); cmp() { if ((lefts[0] < lefts[1])); then return 0; elif ((lefts[0] == lefts[1])) && [[ ${rights[0]} < ${rights[1]} ]]; then return 0; else return 1; fi; };  cmp && echo "$tfpt < $bigger_tfpt" || echo "$tfpt >= $bigger_tfpt"
21:00  spiritedaway: oh, ok. there was another question[11:57] <noldorin> how can i test if a glob is empty?
21:15  greybot: crystal77: short-circuit control operators <http://mywiki.wooledge.org/bashsheet#tests> a || b means "run a. if a fails, run b." a && b means "run a. if a succeeds, run b." example: foobar || { echo "error" >&2; exit 1; }
09:56  ohmy: llua: i dont know how to formualte the regular expression, i just need while<whatever> { <whatever> malloc <whatever>}, the thing is to ensure that malloc is inside while {}
09:57  greybot: ohmy: you can't parse structured languages like html or xml using bash, grep, sed, cut, etc. look into tidy, xmllint, xmlstarlet, ... eg. xmllint --html --xpath '//p[@id="head"]//b[@class="name"]/text()' - <<< '<body><p id="head">hello, <b class="name">bob' -- ask #xml for xpath/xslt help, that is not a #bash question.
10:07  zumbi: if i do: foo=`echo -e "a\nb" ` ; { echo "cat <<eof"; cat temp; echo "eof"; } | sh > "out", $foo within 'temp' gets replaced with blanks instead a b, is that because subshell?
10:32  mrhyde: actually its not {29..31} wanted to say <29-31> to grep a filename
11:18  crepesuzette: if not can't i execute myfunction such as myvar=<execute>myfunction (i don't know how to do this without the $() though)
11:54  aluchko: i have a terminal question. i have an app that's simulating a simple command line among other things and i was wondering how to allow arrow keys and delete. i can simply read the characters and print them out, so typing 'abd<backspace>c' is printed out 'abc', but in my buffer i still have 'ab\x7fc'
12:00  malex: i can use shift and getopts to simulate an init script, can't i? e.g. './run.sh <command> [opts] where opts will be handled with getopts, but <command> will just go through the simple case $1 in, then shift under the esac
00:18  lecodeur: ">testfile", was it?  or "testfile<"?
00:26  mcxosi: lecodeur: no problem if you just want to make a null file touch <filename> does the same thing as > <filename>
13:11  mute: freenode_#bash_20141226.log:[09:28:15] <viking667> "place a thousand coins heads up. for every second coin, flip it over until you get to the end. flip every third coin over ..... continue until you flip over coin 1000. which coins will be heads, which will be tails?"
13:14  mute: [10:08:16] <viking667> ha.this isn't homework, thankfully.
13:30  greybot: declare -a files; n=0; while ifs= read -r -d ''; do for((i=0;i<=n;i++)); do if [[ "$reply" -nt "${files[i]}" ]]; then for((j=n;j>i;j--)); do files[j]="${files[j-1]}"; done; files[i]="$reply"; ((n++)); break; fi; done; done < <(find . -type f -print0) # sorts all files under . in descending order by mtime; requires a find(1) that supports -print0
15:17  bash124512: i'm in the wrong room ><
17:26  kurahaupo: loliveira: this will return immediately: ssh somehost 'some cmd <>/dev/null >&0 2>&0 &'
17:38  loliveira: kurahaupo: do you think this is ok?  ssh 192.168.1.43 'sar -d 1 10 <>/tmp/out >&0 2>/tmp/err &'
17:40  kurahaupo: loliveira: no, </dev/null >/tmp/out
17:47  drocsid: so i have something like </config> as the end line
17:48  emg: drocisd: try this: printf %s\\n '/<\/config>/i' 'line 1' 'line 2' 'line 3' . w | ed -s file
17:48  drocsid: <tag> \n, <key> hashstring </key> \n, <value> entry </value>, </tag>
17:52  emg: drocsid:  /<\/config>/i    i missed that closing /
17:53  loliveira: kurahaupo: ssh server ‘cmd </dev/null> /tmp/out >&0 2>/tmp/err &' ?
17:56  kurahaupo: loliveira: the < and > symbols are special so they don't have to be surrounded by whitespace to be recognized, but it clarifies the grouping for people reading your script in the future if you write it as: ssh server ‘cmd </dev/null >/tmp/out 2>/tmp/err &'
17:57  kurahaupo: loliveira: that is: «</dev/null» - redirect stdin from the null device; «>/tmp/out» - redirect stdout to /tmp/out; «2>/tmp/err» - redirect stderr to /tmp/err
18:19  drealm: how do you insert a <tab> character on the commandline  avoiding autocompletion?
19:48  drealm: can extglob match a pattern a specific number of times (in a concise way) when doing pathname, much like <regex>{<num>}  ?
19:53  drealm: i propose #<num>(<pattern-list>) in future release ^^
21:15  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
23:49  jetchisel: !<< > pandab
21:55  drealm: i have included the path containing my script in path and bash is able to locate it and execute it for me only when <myscript> is the first word on the command line
21:56  drealm: but when i try to redirect it to a while-loop it can't find it.  e.g. while cmd; do ... ; done < <myscript>
18:15  greybot: process substitution: <(command) or >(command) is replaced by a fifo or /dev/fd/* entry. basically shorthand for setting up a named pipe. see <http://mywiki.wooledge.org/processsubstitution>. example: diff -u <(sort file1) <(sort file2)
18:16  izabera: !<< > jhave
16:02  geirha: n=$(wc -l < file); for (( i = 6; i > n; i-- )); do printf 'new line\n'; done >> file
19:35  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
16:54  jgorak: hi all.  maybe i'm missing something, but does this redirection make any sense?:    (java <someargs> 2>>$logfile) 2>/dev/null
16:56  koala_man: though it depends on the value of '<someargs>'
18:57  alectaylor: koala_man: >.<
20:41  mattcen: < koala_man> [2015-03-10_10:54:50] isifreek: at the end of the file, you can put "return 2> /dev/null; codehere"
18:53  episage: bekks: i tried :idle 60 <cmd here> but it is limited to a specified set of cmds
19:52  greybot: nuk this is a good start: <http://mywiki.wooledge.org/bashguide>. pdf: <http://s.ntnu.no/bashguide.pdf>. also lhunath's newer version (work in progress): <http://guide.bash.academy>
14:16  soni: blind, say i have a video downloader, it spits out subtitle files, i want to --sub-file <filename> all the subtitle files. the video is <basename>.<vidext>, the subs are <basename>.<language>.<subext>
14:16  blind: soni: so where would you get the <language> from ?
14:17  soni: blind, there's no command to output all the possible <language>s
14:18  llua: <stuffblindshowedyou> echo "$name".*."$ext"
14:20  soni: and how do i generate a bunch of --sub-file <asubfile> --sub-file <anothersubfile> etc to pass into a command?
14:33  soni: dualbus, (altho i forgot i have to use "--sub-file=<filename>" (single argument), not "--sub-file" "<filename>", so yeah. :p)
15:56  filo345: is as expansion using internally the same algorithm by echo and i need the result of printf . <kurahaupo> i probe different ways single into double, double into single, only single etc the result si the same. dualbus: i put the command in variables an in literals the result is the same
16:08  filo345: <dualbus> sorry, is bad trascription, is less scaping
16:28  filo345: <dualbus>: i not found in posix spc. about remove characters that are within strings
17:27  greybot: momomo: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
17:47  soni: kurahaupo1, how do i use fifos? and am i supposed to "timeout <something> cat <fifo>" or... how am i supposed to do it?
22:38  izabera: "if ifs is unset, or its value is exactly <space><tab><newline>, the default, then sequences of <space>, <tab>, and <newline> at the beginning and end of the results of the previous expansions are ignored, and any sequence of ifs characters not at the beginning or end serves to delimit words."
22:47  mattcen: if ifs is not set, it shall behave as normal for an unset variable, except that field splitting by the shell and line splitting by the read command shall be performed as if the value of ifs is <space> <tab> <newline>; see field splitting.
22:58  mattcen: how else can you parse that if there's a way to set *no* ifs, as opposed to a "default" ifs of <space> <tab> <newline>
22:58  pj: [14:14] <kurahaupo> eval "dir=~${otheruser//[!a-z]}"  # safe but not friendly
23:07  mattcen: ifs='<space><tab>
23:07  mattcen: <newline>'
17:34  greybot: retrieve an xml value: xmlstarlet sel -t -v 'staff/person[@name="bob"]' <<< '<staff><person name="bob">70000</person></staff>'
17:36  lzrdking: if i had '<input type="hidden" name="javax.faces.viewstate" id="javax.faces.viewstate" value="ro0ab.../> can xmlstarlet return the value?
17:40  lzrdking: entity: line 23: parser error : attributes construct error <xsl:value-of select="/input[@id="javax.faces.viewstate"]/@value"/>
17:40  lzrdking: entity: line 23: parser error : couldn't find end of start tag value-of line 23 <xsl:value-of select="/input[@id="javax.faces.viewstate"]/@value"/>
18:12  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. see <http://mywiki.wooledge.org/bashfaq/031> and <http://mywiki.wooledge.org/bashguide/testsandconditionals>. unless you're writing for posix sh, we recommend [[.
18:15  yitz_: !learn ; the ";" character is used to separate between commands. it does the exact same thing that <enter> does in a shell or a newline in a script.
18:15  greybot: newuser789: the ";" character is used to separate between commands. it does the exact same thing that <enter> does in a shell or a newline in a script.
18:18  yitz_: !learn ; the ";" character is used to separate between commands. it does the (almost) exact same thing that <enter> does in a shell or a newline in a script.
20:44  izabera: 3# arr=({a..n}); printf '<%s>' "${!arr[@]}"
20:44  shbot: izabera: <0><1><2><3><4><5><6><7><8><9><10><11><12><13>
22:04  mattcen: printf '%s\n' -------------- set1a set1b set1c -------------- set2a set2b set2c > file1.txt;   while read -r _; do read -r line1; read -r line2; read -r line3; printf 'set: %s %s %s\n' "$line1" "$line2" "$line3"; done < file.txt
22:04  mattcen: # printf '%s\n' -------------- set1a set1b set1c -------------- set2a set2b set2c > file1.txt;   while read -r _; do read -r line1; read -r line2; read -r line3; printf 'set: %s %s %s\n' "$line1" "$line2" "$line3"; done < file.txt
22:04  mattcen: # printf '%s\n' -------------- set1a set1b set1c -------------- set2a set2b set2c > file.txt;   while read -r _; do read -r line1; read -r line2; read -r line3; printf 'set: %s %s %s\n' "$line1" "$line2" "$line3"; done < file.txt
03:48  greybot: # getrange(){ local input=() nums=();ifs=, read -ra input<<<"$1";for i in "${input[@]}";do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]];then if ((${i%-*}<${i#*-}));then for ((x=${i%-*};x<=${i#*-};x++));do nums+=("$x");done;else echo "invalid range: $i">&2;fi;else if [[ $i =~ [[:digit:]]+ ]];then nums+=("$i");else echo "invalid number: $i">&2;fi;fi;done;printf '%s ' "${nums[@]}";echo;};getrange 1,3,8,9-15,23,4
03:52  greybot: set up your environment (path, lang, editor, ...) in ~/.bash_profile. set up your bash shell (ps1, functions, shopts, ...) in ~/.bashrc. then source .bashrc from .bash_profile. see <http://mywiki.wooledge.org/dotfiles>. for gui logins, see your documentation or ask your os channel because they're all different and we don't know.
04:18  greybot: # getrange2 () { local input=() nums=(); ifs=, read -ra input <<< "$1"; for i in "${input[@]}";do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]];then eval "nums+=({${i%-*}..${i#*-}})";elif [[ $i =~ [[:digit:]]+ ]];then nums+=("$i");else echo "invalid number or range: $i">&2;fi done;printf '%s\n' "${nums[*]}";};getrange2 1,3,8,9-15,23,4
04:18  izabera: # getrange2 () { local input=() nums=(); ifs=, read -ra input <<< "$1"; for i in "${input[@]}";do if [[ $i =~ ^[[:digit:]]+-[[:digit:]]+$ ]];then eval "nums+=({${i%-*}..${i#*-}})";elif [[ $i =~ [[:digit:]]+ ]];then nums+=("$i");else echo "invalid number or range: $i">&2;fi done;printf '%s\n' "${nums[*]}";};getrange2 0002-0017
04:32  izabera: # read -r -n1 < <(printf '\0\0\0\0\0\0>'); echo the first byte was "$reply"
10:39  hipodilski: 11:59 < hipodilski> was wondering which is less performance intensive for system when i use a dynamic ssh to tunnel socks5 traffic to my browser
10:39  hipodilski: 12:00 < hipodilski> or to use normal ssh tunnel and use squid or privoxy proxy server behind
11:14  izabera: shopt -s exglob <newline> rm !(file)
13:14  greycat: # x=a; x+=b; echo "x=<$x>"
13:14  shbot: greycat: x=<ab>
13:34  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
13:34  greybot: <http://mywiki.wooledge.org/bashguide>. pdf: <http://s.ntnu.no/bashguide.pdf>. also lhunath's newer version (work in progress): <http://guide.bash.academy>
15:28  lhunath: # string='foo bar "foo bar" foo\ bar \"foo \"bar'; args=(); while ifs= read -r -d '' arg; do args+=("$arg"); done < <(xargs printf '%s\0' <<< "$string"); printf '<%s> ' "${args[@]}"
15:28  shbot: lhunath: <foo> <bar> <foo bar> <foo bar> <"foo> <"bar>
15:55  greybot: ellistaa: <http://mywiki.wooledge.org/bashguide>. pdf: <http://s.ntnu.no/bashguide.pdf>. also lhunath's newer version (work in progress): <http://guide.bash.academy>
17:51  isifreek: izabera: if you were right, would i see $txt_red_fg<the date here>...
19:12  dumle29: 	name: <alsa_output.pci-0000_00_1b.0.analog-stereo>
19:17  izabera: var=$(yourcmd | awk -f'[<>]' '/^*/ { getline; print $2 ; exit }')
19:20  izabera: no that's the field separator,  [<>] is a < or a >
20:10  greybot: use [[ .. ]] for testing strings or files, (( .. )) for testing numbers and 'if ..'' for testing commands. do *not* use [ .. ] in bash (only in sh). see <http://mywiki.wooledge.org/bashsheet#tests> and <http://mywiki.wooledge.org/tests>. difference between [ and [[: <http://mywiki.wooledge.org/bashfaq/031>
20:31  xreal: twkm: grep -i <blah> "*.txt" doesn't work => grep: *.txt: no such file or directory
20:34  opposition: grep -i \<blah\> *txt
20:35  twkm: or possibly "<blah>".
20:35  xreal: <blah> was just a placeholder.
20:35  opposition: grep -i "<blah>" *txt
